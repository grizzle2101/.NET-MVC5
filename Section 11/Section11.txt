Authentication & Authorization
---Tutorial 1 - Introduction---
Most if all not ALL apps need some kind of Authentication & Authorization.
In this section we're going to go over some of the core components like.

In This Section:
-JSON WebTokens
-Stateless Authentication
-Protect Routes
-Redirect Users to a Login or Acces Denied Page
-Show/Hide Elements
-Get the Current User
-Consume Protected API Endpoints


---Tutorial 2 - Application Overview---
Great start the Application proivded won't build.
-Login Page Email & Password
-There is no backend API for this, just a dummy service that returns true if my email & password are used.
-Once we login we then get a HomePage with your name, AdminPage Link Login & Logout.
-If we log out, the Admin & Logout links disappear.
-Cannot simply type the route to get past the authentication, we get redirect to login page.

So this just demonstrates some of the core functionality we are going to cover the in the upcoming tutorials.


---Tutorial 3 - Architecture---
-On the Client we build a Login Page & on the Server an API endpoint to recieve the credentials.
-api/authenticate
--Server Returns JSON Web Token (JWT)
-The Client then persists the Token incase the tab is closed.
-The Client Browsers users folders per website to hold this token.
-The Client Browser provides an API to retrieve key value pairs from this token.

JWT on the Client:
-Display current user's name.
-Show/Hide parts of a page.
-Prevent Access to Certain Routes

API Orders:
Say we have a secured route api/orders that is only accessible to admins.
To do this we send a request and include the JWT Token as the request header.
Else return a 401 unauthorized.


---Tutorial 4 - JSON Web Tokens---
So head over to https://jwt.io/ the official JSON Web Token site.
We can see all the libraries in many different languages for working with JWT, and even some samples.

Encoded Token:
This is a sample token that would be send to the client when they successfully authticate.
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c


On the site its seperated into 3 sections denoted by colour.
red = Header
purple = Payload
blue = Digital Signature

Note:
This Data is not enctrpyed, it is only encryped. If we take this to any base 64 decoder we will get the message. Just after google base 64 decoder we can see what it contains
{"alg":"HS256","typ":"JWT"}{"sub":"1234567890","name":"John Doe","iat":1516239022}pD䌸⅙迊Lx編㤫"UiԬ㎜

Again we can break down the decoded JSON to Header, Payload(the good shit) and our signature that is not readable.


Double Note:
The Values returned in the token are a great way of storing details we're going to commonly use.
Storing the username for example avoids us having to make any database calls. So we should keep 
some basic details here for quick access.
The signature section is used to verify that the data in the payload has not been changed by a malicious user.


How this Guarentees Security:
So the Alghoritgm for creating the JWT takes our Header & payload, then signs it with a secret stored only on the server. So if you attempt to edit the value, you won't now what secret was used to create the signature, and thus you have an invalid request.

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  
your-256-bit-secret

) secret base64 encoded

Next step we're going to start implmenting Authentciation & Authorization.



---Tutorial 5 - Starter Code---
So basically this project has been provided to us so we can avoid spending so much time creating the components, routes and everything else. The important things to note in the application are as follows:


fakeBackendFactory:
This is a fake implmentation of the JWT backend. It basically just checks the uername & password, then returns a JWT token for the client to use. It looks quite complex, but we don't have to know much for the moment.


API Orders:
We have some similar code for dealing with orders, returning a status 200 and an array of orders.
This only happens if we have a valid authorization header which contains a valid token, 
else we're going to get 401 or unauthorized.

Note:
All this code is inside a SetTimeout function, which allows us to simulate a real request.


fakeBackEndProvider:
This is how we intercept HTTP Requests. Remember when used Provider objects to change the Global Error Handling, we are essentially doing the same thing just instead we have useFactory, which points to factory that generates the class.

export let fakeBackendProvider = {
    provide: Http,
    useFactory: fakeBackendFactory,
    deps: [MockBackend, BaseRequestOptions]
};

In the next section we'll get started writing some code for this bad boy.


---Tutorial 6 - Implmenting the Login---
So lets start implmenting the Login Component.

The Important Parts:
-Login Form, Template Driven form which passes Username & Password to the Component.
-Login Component, has a Sign in method which uses the AuthService.login.
-Login Component Subscribes to Observeable, then Redirects or Triggers Validation Errors.


-Task 1 -Expore AuthService.Login:
So with our current implmentation of AuthSerivce.Login, we post the credentials to /api/authenticate then return the response object.
This really doesn't make sense, we want to return true or false, that way our component doesn't have to work with HTTP response objects,
thus keeping our code cleaner, but also safer that we don't give away any security implmentation.

-Test Valid credentials - Get JWT Token
If we print the Output we can get a good idea how this works, on successful login using mosh@domain.com password 1234, we get a response object
with the JWT token, pretty cool!
 .map( response =>{
        console.log(response);
      });

-Test Invalid credentials - Get Null


-Task 2 - Map Responses to True/False:
Using our new favourite method Map, we can Map the response object to return true or false.
Parse result to josn, check the result is true and contains a token, then store using localStorage.setItem.
let result = response.json();
        if(result && result.token)
        {
          console.log("true");
          localStorage.setItem('token', result.token);
          return true
        }
        return false;


Task 3 - Test Results:
So now on successful login we should have a saved JWT token, in chrome developer tools open application > local storage
Then we should see our stored token and the encoded token like we saw on the JWT website.

token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ik1vc2ggSGFtZWRhbmkiLCJhZG1pbiI6dHJ1ZX0.iy8az1ZDe-_hS8GLDKsQKgPHvWpHl0zkQBqy1QIPOkA

Morale of the Story:
-Login Form passes values to Component.
-Component passes the values to the AuthService
-AuthService makes a request to api/authenticate
-We map the response to True or false, and finally save the token using localStorage.
-Finally the Component recieves true/false then either triggers validation errors or routes to next page.


---Tutorial 7 - Implmenting the Logout---
So now that we can save the token, and route to the main page we also need a way to logout.
Again the process is very similar, we have the logout link, we want to trigger a method in the component, which uses authservice.logout.


Task 1 - Bind Link to Logout Method
In Our HomeComponent we take the authService into our constructor, which makes it available in the Template.
So we can call the AuthSerivce directcly from the Template, which is nice.
<li><a (click)="authService.logout()">Logout</a></li>

Task 2 - Implement Logout Method:
To logout all we really need to do is delete the token.

  logout()
  { 
    console.log("Logging Out");
    localStorage.removeItem('token');
  }


  ---Tutorial 8 - Showing/Hiding Elements:---
  So now that we have some Login functionality, we want to show or hide things depending on your status.
  -Already Logged in Users should not see option to Login
  -Logged out Users should not see Admin & Logout


  Task 1 - Install JWT:
  To Work with JWT Tokens we need the JWT library installed.
  npm install angular2-jwt --save


 Task 2 - Implment IsLoggedIn Method:
 So after we import JWT we can use JWT helper to work with the data in our token. It comes with some really handy methods for us to work with tokens.
-getTokenExpirationDate
-isTokenExpired

  isLoggedIn() { 
    let jwtHelper = new JwtHelper();
    let token = localStorage.getItem('token');

    let expirationDate = jwtHelper.getTokenExpirationDate(token);
    let isExpired = jwtHelper.isTokenExpired(token);

    console.log("Expiration: " , expirationDate);
    console.log("IsExpired: " , isExpired);

  }
  }

  
  Task 3 - Render Admin & Login only if the user is logged in:
  Again we can use the authService directly in the template because we have it in the component constructor.
  <li *ngIf="authService.isLoggedIn()"><a routerLink="/admin">Admin</a></li>

Task 4 - Fixing Errors:
So we get a couple errors in the front end, because we haven't decoded the token, or returned true or false in the Service.
    jwtHelper.decodeToken(token);

    let expirationDate = jwtHelper.getTokenExpirationDate(token);
    let isExpired = jwtHelper.isTokenExpired(token);

    return !isExpired;


Task 5 - The Simple Way:
So now that we have an idea on how the JWT tokens work, there is actually a simple built in method for checking isLoggedIn.
This method does all the things we just did including:
-Getting Token from Storage.
-Decodeing
-Checking expirationDate
-Return True/False

return tokenNotExpired();

Task 6 - Finish Showing/Hiding Components:
So just some simple IF blocks to render our various links if the user logged in or not.
  <li *ngIf="authService.isLoggedIn()"><a routerLink="/admin">Admin</a></li>
  <li *ngIf="!authService.isLoggedIn()"><a routerLink="/login">Login</a></li>
  <li *ngIf="authService.isLoggedIn()"><a (click)="authService.logout()">Logout</a></li>
</ul>


---Tutorial 9 - Showing/Hiding Elements based on User Role---
So we can take this application to the next level, and restrict certain UI elements based on role.
Luckily for us JWT tokens make this very easy, if we look at the properties inlucded in the JWT Payload we have Sub, name & admin.

Note:
The Current Token is configured to have a boolean for isAdmin, in the real world would generally return an array of roles assigned to the user.

Task 1 - Create Get CurrentUser Method:
Simple method, just get the token from localStorage & pass
  get currentUser()
  {
    let token = localStorage.getItem('token');
    if(!token) return null;

    return new JwtHelper().decodeToken(token);
  }


Task 2 - Add Additional Check for Admin == true:
So adding another check, if User is logged in and if the currentUser admin == true.
  <li *ngIf="authService.isLoggedIn() && authService.currentUser.admin"><a routerLink="/admin">Admin</a></li>

Task 3 - Generate & Use New Token:
On the JWT website we can edit the payload to make admin == false, then copy this encoded token into our fakeBackend.
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJCaWdNYWMiLCJuYW1lIjoiSm9obiBEb2UiLCJhZG1pbiI6ZmFsc2V9.9ncclmkWeNaPC2B-eqByxwMIHSmN8re595r8F_pekgA


Result:
Now we no longer have Admin access.


---Tutorial 10 - Getting the Current User---
This is probabaly one of the easier tutorials. Say we want to display the currently logged in user.
We are already returning the token data in the Get CurrentUser method, so in theory we can also access  the username?


Task 1 - Display AuthService.currentUser.name:
<p *ngIf="authService.isLoggedIn()">
  Welcome {{authService.currentUser.name}}
</p>