---Deployment---
---Tutorial 1 - Introduction---
So we've learned the essentials of Angular, but every application needs to be deploy at some point.
So thats the topic of this section:
-How to Optimize our applications for Deployment
-Build Deployable Packages
-Work with Different Environments
-Lint your code, to keep it clean & consistent
-Deploy your apps to Github, Firebase & Heroku.



---Tutorial 2 - Prepareing for Deployment---
So lets download the example attatched to this lecture, run npm install and ng serve to make sure it all works.


Method 1 - Copy & Paste Source Files:
So the easiest way to deploy an application is simple copy and paste the entire project onto a server, then run ng serve.
However there are several drawbacks with that approach.
-File Size - All the Files & classes in their raw form and quite big
-Large Bundles - We have a huge amount of bundles, that are not neccessary for our small application.


Optimization Techniques:
-Minification - Remove All Comments & Whitespace
//MyCommands
public class HomeComponent()
{
    onClick()
    {
        //Do Something
    }
}

Becomes...
public class HomeComponent(){onClick(){}}

-Uglfication - Renaming Components & Variables

Public class MyLongAssVariableName

Becomes...
public class HC

-Bundling:
Each bundle is a combination of multiple javascipt files. If we serve our application as its strctured, the client has to make hundreds of requests.
Instead we bundle, the client can get a large part of the applications code with 1 HTTP request, and it can serve other clients at the same time.

-Dead Code Elimination:
Removing Any and All unused code in the application, so any experiments we made in the code, should probabaly get rid of them.
This includes our Packages.json

-Ahead of Time Compilation(AOT):
Precompiling Angular Components and their Templates, we're going to talk about this more in the next section.

Command:
So the good news is that we can do all this with a single command in the Angular CLI.
ng build -prod


In Summary:
-Minification
-Uglfication
-Bundling
-Dead Code Elimination
-Ahead of Time Compilation (AOT)


---Tutorial 3 - JIT vs AOT Compilation---
Every Angular application includes a compilation, but we haven't seen it because it happens behind the scenes.
With traditional compilation like with C++ we have C++ code that gets translated into machine code. With Angular however its JavaScript code that gets
compiled to.... JavaScript code again : )

Example - JIT:
Say we have a HomePage with {{title}}, if we serve the page do we see {{title}}? Of course not.
There is a compilation step where angular compiler goes through our Tree of copmonents, reads the templates and translated this to something it needs.
Something like...

var div = document.createElement('div');
var h1 = document.createElement('h1');
div.appendChild(h1);

This is what we call Just In Time Compilation, as in the values are compiled just in time for us to use them!
This is perfectly fine for local development, but terrible for production. Every time a user lands on the application, they trigger the JIT compilation.
This wouldn't work so well if there were multiple users on at the same time : )
-Inefficent for production
-Happens for Every user
-More Components, slower.
-We Also have to ship angular with our application.


Example - AOT Compilation:
-Faster Startup
-Don't need to Include Angular, Smaller Bundle Size
-Catch Template Errors Earlier(Bugs found at runtime no longer a thing)
-Better Security(Hiding some of implmentation detail, harder for injection attacks)


---Tutorial 4 - Angular Compiler---
If we look in the package.json we can see     "@angular/compiler-cli": "^4.0.0".
From the Node_modules folder we can interact with the compiler.


Task 1 - Compile Project:
The .bin contains the binaries we need to compile.
node_modules/.bin/ngc


Result:
So now we have a load of files created by the complier, files like.

-Home Component Style:
home.component.css.shim.ngstyle.ts
If we take a look we can see its looking to collect all the styles associated with the component like so
export const styles:any[] = ['']; (Its empty coz we don't have any styles)

-Home Component Factory:
home.component.ngfactory.ts
This is what a Minified, uglified version of our component that gets sent to the browser. This is not designed to be Human readable, its just a the smallest version
of the compoent, that gets transpiled from TypeScript to JavaScript to then be served to the user.
  return i1.ɵvid(0,[(_l()(),i1.ɵeld(0,0,(null as any),(null as any),6,'div',[['style',
      'text-align:center']],(null as any),(null as any),(null as any),(null as any),


Compile Time Checking Example:
If we go into the HomeComponent and change {{title2}} we should see some compile time checking.
 
Result:
Property 'title2' does not exist on type 'HomeComponent'. So just to see the advantages of AOT compilation, we catch the errors earlier.

Morale of the Story:
-node_modules/.bin/ngc to run the Compiler.
-Compilation produced a Shim NGStyle & Factory, which are Minified versions of our components.
-Compile time checking is awesome
-This is one of the steps taken by the Angular CLI when we build for production.


---Tutorial 5 - Building Applications with Angular CLI---
So lets start by removing any of the compiler files we created in the previous lecture.


Task 1 - ng build:
So to demonstrate the difference between a normal build & production build, lets try a normal.
ng build

If we look in the resulting index.html we get this script tag which doesn't exist in our source index.html. This points to a distributed bundle with all the javascript...
<body>
  <app-root></app-root>
<script type="text/javascript" src="inline.bundle.js"></script><script type="text/javascript" src="polyfills.bundle.js"></script><script type="text/javascript" src="styles.bundle.js"></script><script type="text/javascript" src="vendor.bundle.js"></script><script type="text/javascript" src="main.bundle.js"></script></body>
</html>

-Inline.bundle.js & inline.bundle.js.map we have 2 files for in the inline styles, one is the bundled version and the map is for mapping the bundled version
to classes & components in your application, which makes it easier for debugging.

Important Note:
-No Minification
-No Uglification
-No Removal of DeadCode
-no Ahead of Time Compilation(AOT)


Task 2 - ng build prod:
So what happens if we try the production version... After looking at the resulting files we can see some improvements
ng build --prod

Important Note:
-Minification
-Uglification
-Removal of DeadCode
-Ahead of Time Compilation(AOT)

Note:
See that each filename gets a random hash after it, this is to stop browser caching. Becase the file name is always different,
we can be sure we have the latest version of the files on production.
But the files we now have can be copy and pasted, FTP'd onto a server or intergrated in a CI/CD workflow.


---Tutorial 6 - Environment---
In Real development projects we often have multiple environments including Development, Test & Production.

In SRC < Environment we have environment.ts & environment.prod.ts, we can change the configuration of out environments here.
Including change the URL, maybe adding a banner for each environment, our target different API's depending on the environment.

Task 1 - Add Some Environment Properties:
We can add a backgroundcolour for production & testing.
Red = Production
Blue = testing

export const environment = {
  production: false,
  navBarBackgroundColor: 'red'
};

Task 2 - Take Config Value into Component:

Task 3 - Use Style Binding to Display:
<nav
[style.backgroundColor]="backgroundColor"
class="navbar navbar-default">


Task 4 - Serve Production Build:
ng serve --prod is the same as ng serve --environment=prod

Result:
Now we can see the values from our Config are taken depending on how we build the application.

Morale of the Story:
-Create Variables in environment Config.
-Use them in Components with environment.propertyName;
-Use Style Binding the change the NavBar depending on the value in config.
-Build your config with ng serve --environment=prod or just ng serve.
-Can also run ng build prod to produce .dist


---Tutorial 7 - Adding a Custom Environment---
So before we just used the out of the box environments, what if we want to create our own for Staging or Testing?

Task 1 - Create environment.test.ts:
Copy & Paste the production config, just rename the file, set production to false & change color.

Task 2 - Register new file with Angular-cli.json:
      "environments": {
        "dev": "environments/environment.ts",
        "prod": "environments/environment.prod.ts",
        "test": "environments/environment.test.ts"


Task 3 - Serve:
ng serve --environment=test


Note:
Hot Module Replacement only works in development mode, so if we make any changes it will not be reflected in the application until we Restart the server.


---Tutorial 8 - Linting with Angular---
A Linter is basically a program that can be configured with various rules, then it performs a static analysis of your code using these rules.
This is very important when working with teams, that everyone has a consistent approach for coding, things like
-Double v Single quotes.
-Terminating javascipt lines with ;
-Variable names etc.

A popular tool in the TypeScript world is TSLint, which comes packaged with angular projects.
If we take a look in package.json we can see "tslint": "~5.3.2", also we have in the root folder tslint.json, this is the file which contains all our rules.


Task 1 - Run Lint:
Using the angular CLI we can kick off the linting process which will perform analysis on our code using the rules in tslint.json
Command - ng lint

Kinds of Errors:
-Trailing Whitespace - Not so important, just some whitespace.
-Identifier 'id' is never reassigned. (This is actually useful, we could use constant instead of let if the value doesn't change.)


Task 2 - Automatically Fix Linting Issues:
So as part of the linting process, there is actually a mechanism for Automatically fixing the errors raised in linting.
Command - ng lint --fix
This fixed most of the issues previously raised except one which needs manual intervention, the angular convention of using the app-component selector.
We took a design choice to remove the app- prefix, so lets leave that in.


Morale of the Story:
-Check lint Version in package.json.
-Configuration for Linting is in tslint.json
-ng lint - Runs Linting process
-ng lint --fix - Runs Linting Process & Fixes errors.
-Should run lintint before every commit to make sure your code is consistent.


---Tutorial 9 - Linting in VSCode---
So the command line tool is nice and all, but there is a TSLint extenion for VS Code which gives us intellisense for linting issues.

Task 1 - Install TSLint Extention
In the VSCode Extensions Tab, search & install TSLint.

Result:
Now we get Syntax Highlighting for common linting issues. We can solve each of these issues manually, or using this trick.
-CTRL + SHIFT + P - Open Command Pallete
-Select TsLint: Fix All auto-fixable problems.


---Tutorial 10 - Other Deployment Options---
So earlier we looked at the Angular CLI build/deployment tools. There are some cool alternatives.

-Github Pages - No Backend(Only hosts HTML, CSS & JavaScript), however you can use 3rd party APIs
-Firebase - Is a Google provided Cloud platform, which provides a Fast, Scaleable & realtime database. It also provides a library for interfacing with the Double
so we don't have to write all that API  code ourself, which cuts down on time dramatically.
-Heroku - Custom Cloud Hosting to build our entire application. 
-Azure - More Sophisticated but more complex


---Tutorial 11 - Deploying to Github Pages---
So the application we currently have is a perfect candidate for Github Pages, because we don't have a backend or alternativly we consume the GitHub one,
we can deploy to Github Pages.

Task 1 - Create GitHub Repository & Upload:
-Create Empty Github Repository
-Move Project into its own folder
-git init
-git add .
-git commit -m "my first commit"
-git add remote origin "link from github"
-git push origin master
-Now our code should be hosted on Github.

Task 2 - Install GithubPages Globally:
In order to deploy to Pages, we need this ghpages package.
-npm install -g angular-cli-ghpages

Task 3 - Build & Deploy:
So make sure to build the link to our Github Page correctly here.
https://username.github.io/repository
https://grizzle2101.github.io/followers-app/

Run the Following Commands, to Build then Deploy our application to Github Pages:
-ng build --prod --base-href="https://grizzle2101.github.io/followers-app/"
-ngh --no-silent

Result:
Now if we visit the link, we can see our deployed application! https://grizzle2101.github.io/followers-app/


Task 3 - The Simple Way:
Of course there is going to be an easier way to do this, without having to type in all the commands manually.
We can create & combine commands into our package.json, like this we can perform both operations in 1.
"deploy:gh": "ng build --prod --base-href='https://grizzle2101.github.io/followers-app/' && ngh"

To use this command:
npm run deploy:gh