---Building Real Time Apps with Firebase---
---Tutorial 1 - Introduction---
So far our focus has been purely on the front end, but most or all applications need a backend.
Building a backend from scratch requires a tottally different set of tools & frameworks, that are really beyond the scope of this tutorial.
We could also use something like Firebase for building Web & Mobile backends. By the end of this section we should be able to do CRUD operations.
-Create Objects
-Read Objects
-Update Objects
-Delete Objects

---Tutorial 2 - What is Firebase?---
Architecture:
In a traditional application we have the Client, built in Angular.
The Backend built in Node.js or ASP.Net, which communicated with the front end with HTTP Services.
The Data is often persisted in a database like SQL Server, MongoDB or Raven

The process of building all this is very time consuming, and thats where firebase shines.

Firebase Benefits:
-Fast, Scaleable & Real-time database in the cloud.
-Authentication
-Cloud Messaging
-Storage
-Analytics
-Supports Multiple Platforms - IOS, Android, JavaScript & C++
-Firebase provides libraries to for accessing data in all the above languages, So its a pinch to develop for multiple platforms with the same backend!


---Tutorial 3 - Your First Firebase Application---

Task 1 - Create Application:
Head on over to firebase & create a project named FirebaseDemo
https://console.firebase.google.com/


---Tutorial 4 - Working with Firebase Database---
So lets get to know some of the Firebase functions.

Databases:
Databases are where we are going to store the Application data. There are Relational & NoSQL databases also known as document databases.
Relational - Tables, Relationship, Schema
NoSQL - NoSchema, No Tables & Columns, Trees of Nodes(key value pairs), Example MongoDB.
So just a heads up Firebase Databaes are NoSQL Databases.

Task 1 - Create a Realtime DB:
-Click Create in Databae Tab.
-Click + and Create a node called Courses.
-Add some child elementsto Courses eg course1 & course2
-Create a complex child object inside course3.
-This should demonstrate the differences between Relational Databases & NoSQL. Notice we create nodes & child elements, but there are NO Rules or relations between the child elements.
Some can be simple strings and other complex objects, this is a bit different to the traditional databases.
-Our values can be key value pairs, or complex objects.
-This is really quick get up and running, not is not optimized for reporting. So if you need reports & complex joins NoSQL probabaly isn't the best idea.
Unless you want to create a job that takes the data from our NoSQL database and imports it to a traditional Relational DB for reporting.

Morale of the Story:
NoSQL Databases use a node like structure for representing data as KeyValuePairs or even more complex nested objects.
