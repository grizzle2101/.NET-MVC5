---Section 14 - Animations---
---Tutorial 1 - Introduction---
Animations are getting a lot more common in modern applications, so in this section we're going to be able to add animations to your angular applications.

In this section:
-Understand the structure of an Animation
-Animate various elements
-Create reuseable animations
-Use new animation functions in Angular 4.3
-Write Clean Animation Code


---Tutorial 2 - Examples of Animations---
First lets take a look at the kind of animations we're going to build in this section.
We have a to-do list, the Title slides down from the top and each element in the list will load fade in using this animation.

-Slide In
-Fade In
-Straggered Amimation
-Change Colour & Slide Out
-Text Box Expand & Content Fade In


---Tutorial 3 - Different Ways to Create Animations---
There are two primary ways to create Animations, CSS & JavaScript
-CSS:
With CSS we have Transition & Animation properties we can use to animate DOM elements.
We can create custom CSS classes like so, and your browser will begin to apply these animations to your DOM elements.
If you've been working with CSS for a while you've probably come across animate.css, google Animate.css to see how easy it is to apply some cool animatons.

.stretch {
    animation-name: stretch;
    animation-duration: 1.5s;
}

Cons for CSS:
We certainly can use just CSS for animations but there are a few drawbacks.
-Limited Control over animation
-Suitable for Simple, one-shot animations


-JavaScript
For JavaScript however we have much more control, and may more libraries for Animations.
-JQuery
-GSAP
-Zepto
-Web Animations API (Recommended & supported natively in Chrome, Firefox & IE)

What does the code look like?
Get  Reference to an element, then call the animate method.
var element = document.querySelector('#myElement');
element.animate(...);

What about Angular?
Angular has a module built on-top of the Web Animations API called @angular/animations.
So instead of us working directly with the API, we use the abstractions provided by Angular.
This makes our code much more tidy, and easier to Unit test and port to another platform. So if we move to IOS or Android
we can use the native animations in that system without much effort.

Take Home:
-Use CSS for Simple Animations
-For More Flexible Animations, we use JavaScript and the Web Animations API.
-In Angular we use @angular/animations which is built ontop of the Web Animations API.
-By using @Angular/animation abstractions, we can use the Animations natively on other platforms, meaning code once, supported on all OS's.



---Tutorial 4 - Angular Animations:---
So lets get started with some Angular Animations. The Angular Animations Module includes some important methods,

Animation Helper Functions:
-trigger()
-transition()
-state()
-animate()
-etc

On a basic level animations are just a transitions from state1 to state2, like this example.
State 1                 >       transition                >      State 2
Background-Color: Red                                               Background-color: Blue

But what other States can we have for a DOM Element?
-Void
-Default(*)
-Custom

-Void State:
The Void state is for an object BEFORE or AFTER being placed in the DOM. To in a To-Do list, we create the Object, then place it into the DOM.
So the state of the List Item is VOID until it is placed in the DOM. The same happens if we remove an item from the list, we return the state to VOID.
This is how we can do transitions for newly created & deleted items.

-Default(*):
The Default state is when it is active in the DOM. So using the previous example, when the List Item exists inside the DOM it is in its Default state.

-Custom:
Custom isn't used very often but there are scenarios for this. Say we have a collapseable panel, the content inside the container is there,
it is just hidden using the HTML hidden state. So if we want to animate the hidden content we beed to use a Custom State.

Sample Implmentation:
So lets say we want to apply some animations to each item in a To-Do list.

Task 1 - Create a Components Metadata:
-Animation Property Takes Array.
-In the array we create a Trigger, which has a corresponding Implmentation (States & Transtions on trigger)
-Notice trigger, state & transition are the Angular Animations helpers we mentioned earlier.
@Component({
    animations: [
        trigger:('fadeIn', [
            state(...)
            transition(...)
        ])
    ]
})


Task 2 - Apply Animation on Element:
So now that we have the Animation completed, we can apply it onto our HTML using this custom notation.
-@fadeIn
-Now we can apply this on each item in our to-do list.
<div @fadein></div>


---Tutorial 5 - Importing Animations Module & Polyfill---
So lets get going with the setup and installation of everthing we need for this section.

-Task 1 - Download Sample Solution:
-Unzip & add to Course Work
-NPM install
-ng serve


-Task 2 - Imports:
Import the package, then add it to our imports statement.
   imports: [
    BrowserModule,
    BrowserAnimationsModule

Now this import is all we need for Chrome, Firefox & Opera. However to support the other browsers,
we need the Polyfill package.

**Polyfill allows us to run modern JavaScript features in older browsers**

-Task 3 - Enable Polyfill:
Open up the polyfill.ts file in the root directory, and uncomment the line for polyfill.

/** IE10 and IE11 requires the following to support `@angular/animation`. */
import 'web-animations-js';  // Run `npm install --save web-animations-js`.

Then use NPM to install the package:
-npm install --save web-animations-js


Congratulations, now we have everything installed and ready to go!



---Tutorial 6 - Implementing a Fade-In Animation---
So now that we have everything installed, we can go about implmenting the basics.
The steps as mentioned are declare an Animation in Component MetaData, (this is how angular compiles
animations what our desired component.), use the selector in the template, then use the Trigger, Style,
Transition & animate helpers. 


Task 1 - Add Animation to the Component MetaData:
So lets start by adding in the section for Animation & the Trigger.
-trigger('nameofSelector, [AdditionalProperties to be applied on selected item]')

@Component({
  selector: 'todos',
  templateUrl: './todos.component.html',
  styleUrls: ['./todos.component.css'],
  animations: [
    trigger('fade', []
    ])
  ]
})


Task 2 - Use the Selector:
So now that we have a selector in our Component lets use it.
Simple when we iterate over each item on the list, we want it to have our @fade animation.
-@fade

<button type="button"
      @fade
      *ngFor="let item of items"
      (click)="removeItem(item)"
      class="list-group-item"
      >{{ item }}</button>
</div> 

Task 3 - Flesh out Animation:
-trigger = HTML selector
-transition = Provide a Lambda from state void to *(Default)
State (State 1 void &  State 2 default) so from object creation to adding to DOM, onLoad basically.

Style & Animate are what happens after the idenfitied state change has happend.
-style = a style object to be applied at State 1.
-animate = time in MS, style to be applied after 2 seconds, at State 2.

@Component({
  selector: 'todos',
  templateUrl: './todos.component.html',
  styleUrls: ['./todos.component.css'],
  animations: [
    trigger('fade', [ //Create Fade Annotation
      transition('void => *', [ //On Change from Void to Default
        style({backgroundColor: 'yellow', opacity: 0}), //Styles to Apply
        animate(2000, style({backgroundColor: 'white', opacity: 1})) //Time & Style for Animated State
      ])
    ])
  ]
})

Note:
Angular is smart enough to know, the transition style is only temporary,
and so will undo the style back to its orginal state.
So we can remove this section where we set the colour back to white.

So in summary, in this sectio we've created a Fade-In function.


---Tutorial 7 - Implmenting FadeOut Animation---
So now that we have a good grasp on FadeIn, lets work on implementing fadeout.

Task 1 - Add Another Transition for FadeOut:
So after we define the Trigger, we can also provide another transition, except for the reverse activity.
Instead of void => * we do * => void, and then we have the deletion animation.

animations: [
    trigger('fade', [

      transition('void => *', [
        style({opacity: 0}), 
        animate(2000)
      ]),
      //Task 1 - Create New Animation
      transition('* => void', [
        animate(2000, style({opacity: 0}))
    ])
  ])]


Take Home:
Trigger allow multiple transtions between Void, Default & Custom State.


---Tutorial 8 - States---
So in our current Implmentation we have some duplication, rather than creating these styles twice,
we can define a state for void with these properties. That way we only declare the void style once.


Task 1 - Add State
animations: [
    trigger('fade', [
      //Task 1 - Add State
      state('void', style({opacity: 0})),

      transition('void => *', [
        animate(2000)
      ]),
      transition('* => void', [
        animate(2000)
    ])
  ])]
})

Take Home:
When working with styles, use a state to centralize all your style for a given state.


---Tutorial 9 - Transitions---
So we did some nice work with the FadeIn & FadeOut transitions.
We do have some duplication in our code again though. Transitions has additional arguments
to accomodate multiple state changes, we can use this to make our code more simple.

Task 1 - Combine 2 Transitions:
So by adding to the parameters we can accomodate both transitions in a single line.
transition('void => *, * => void', [ 

We can improve on this again by using bidirectional syntax.
      transition('void <=> *', [ 
        animate(2000)
      ])
  ])]


Task 2 - Using Aliases:
So this syntax for resprenting state is very common, so common that they have alias to make
this more human readable.
:enter and :leave basically just keywords for entering the DOM ie void to created in DOM, and from
DOM to deletion.


---Tutorial 10 - Creating Reuseable Triggers---
So now that we've got the Fade effect working, we're probably going to use this in other parameters
of the application, so how do we make this reuseable?


Task 1 - Extract Trigger to Function:
So we just create a variable to hold the trigger function & voila, reuseable function.
export let fade =  trigger('fade', [
    state('void', style({opacity: 0})),

    transition(':enter, :leave', [ 
      animate(2000)
    ])
])

Task 2 - Add Trigger into Animations:
Then to use the Trigger we simple add it like so.
  animations: [fade]


---Tutorial 11 - Excercise---
Build a Slide In Animation.


Task 1 - Create Slide Animation:
So again we need to create a reuseable trigger, we just need to change the style on change to be
transform: translateX then we can move the elements from left to right.
export let slide =  trigger('fade', [
    state('void', style({transform: 'translateX(-20px)'})),

    transition(':enter, :leave', [ 
      animate(1000)
    ])
]);


---Tutorial 12 - Solution---
So just to go over some of the improvments in Moshes code.
He created 2 slighly Different transitions, just so items being removed are quickly transitioned away.

Difference 1 - Seperate Transitions:
So just to make the user experience better, we want to quickly remove items from the List.
Therefore we create a seperate transition, instead of using States like we did before.
export let slide =  trigger('fade', [
    //OnCreation
    transition(':enter', [style({transform: 'translateX(-20px)'}), 
      animate(1000)
    ]),
    //OnLeave
    transition(':leave', [animate(500), style({transform: 'translateX(-100%)'})])
]);


Difference 2 - Removing the Chrome Border:
Another small styleing issue, elements moving in Chrome are given a border.
To remove this we simply override the style outline and voila.
button {outline: 0}


---Tutorial 13 - Easings---
So our SlideIn and SlideOut transitions move at a consistent speed.
What if we want to stagger the animation make it more life like?

Exploring Animate:
So if we look at the animate helper method, we actually have a few options besides just time in ms.
transition(':leave', [animate(500), style({transform: 'translateX(-100%)'})])

Task 1 - Delay the Transition:
We can insert time as a string in many differerent formats:
'0.5s'
'500ms'
There is a second component to this animate timer which is delay, we can add a delay for the animation.
transition(':leave', [animate('500ms 1s'), style({transform: 'translateX(-100%)'})])


Task 2 - Get Easings values:
So Easins are like a rate for the speed of the transition. By Default the easing is linear,
so we have the consistent speed behavior we see. However there are other options like:
-Ease In - Start Slowly & End Fast
-Ease Out - Start Fast & End Slowly
-Ease-In-Out - A Combination of the two.

So to create a custom Easing we have to implment a Cubic Bezier, basically a math function for
creating curves on a graph, prob should have paid more attention in math class.
Luckily for us we don't have to calculate any of this because someone already did
http://cubic-bezier.com/#.17,.67,.83,.67 Will give us some values to use.

We created a custom easing using the tool. we now have our values.
.17,.67,.56,.06


Task 3 - Add Custom Easing:
So we can simply add our values into a cubic-fezier function & voila.
    transition(':leave', [animate('500ms cubic-bezier(.17,.67,.56,.06)'), style({transform: 'translateX(-100%)'})])
]);

Take Home:
Easings are the rate in which the transition will be applied.
By default our accelration in linear, but we could use the out of the box Easings
-Ease-In
-Ease-Out
-Ease-In-Out
Or create our own cubic-bezier function and voila, cool animations!


---Tutorial 14 - KeyFrames---
So we've done a pretty good job so far with the animation, but we can do better.
We we checkout animate css, we can see their version of SlideOut left.
https://daneden.github.io/animate.css/


Animate CSS uses keyframes to make their transtions more attractive. Keyframes are a way to specifiy
multiple frames or stages for an animation. We can have some slide right, before sliding left.

Animate CSS Bounce Left Sample:
@keyframes bounceOutLeft {
  20% {
    opacity: 1;
    transform: translate3d(20px, 0, 0);
  }

  to {
    opacity: 0;
    transform: translate3d(-2000px, 0, 0);
  }
}

.bounceOutLeft {
  animation-name: bounceOutLeft;
}

Task 1 - Add Key Frames to Slide Effect:
So using Angular KeyFrames we can combine multiple styles for various stages in the animation.
KeyFrames([style1(), style2()])


TakeHome:
KeyFrames allow us to have multiple styles for a single transition.


---Tutorial 15 - Creating Re-useable Animations---
So we've made some nice animations, but if we want to reuse these styles on different things, nwe need to
make them more reuseable.

The Problem:
Because we have created entire triggers, for us to reuse the animation part we need to extract it.
export let slide =  trigger('slide', [
    //OnEnter
    transition(':enter', [style({transform: 'translateX(-20px)'}), 
    animate(1000)
  ]),

Task 1 - Extract Animation:
So some of our animations are quite complex, our BounceOut anmation has a few keyframes and multiple styles for each
of the keyframes in the animation. We can extract this to avoid lots of duplication.
-Create Exportable Function
-Notice naming convention somethingsomethingAnimation.
-Using animation method to create a Reuseable Animation.
-Place everything in the animate method inside the animation.

export let bounceOutLeftAnimation = animation(animate('0.5s ease-out', keyframes([
    style({
      //Rest of Animation Code.


Task 2 - Use Extrated Animation:
So now if we look at the Slide Trigger, we can use useAnimation & provide the extracted animation.

export let slide =  trigger('slide', [
    //OnEnter
    transition(':enter', [style({transform: 'translateX(-20px)'}), 
    animate(1000)
  ]),
  //Task 2 - Use Extracted Animation
  transition(':leave', useAnimation(bounceOutLeftAnimation))
]);



Task 3 - Customize Extracted Animation:
Now we finally get the additional benefits of being able to customize and reuse the animation.
      transition(':leave', [
        style({backgroundColor: 'red'}),
        animate(1000),
        useAnimation(bounceOutLeftAnimation)
      ])

Morale of the Story:
Extract the Animation part into the animation() function.
We can then reuse & customize this animation in other parts of the application.


---Tutorial 16 - Parameterizing Reuseable Animations---
The problem with our Fade effect is that we used states, and animations only work with transitions, not states.
So we need to refactor the Fade effect.

Task 1 - Refactor Fade Effect:
So again we want to make the fade affect reuseable, but animation() only takes transitions not state.
-Replace State with 2 transitions.

export let fade =  trigger('fade', [
    transition(':enter', [
        style({opacity: 0}),
        animate(2000)
    ]),
    transition(':leave', [ 
        animate(2000, style({opacity: 0}))
      ])
]);


Task 2 - Extract Fade Effect:
-Remember the Animation convention, this helps us differenciate Reuseable Animations & Reuseable Triggers.
export let fadeInAnimation = animation([
    style({opacity: 0}),
    animate(2000)]);


Task 3 - Extract FadeOut Animation
export let fadeOutAnimation = animation([
    animate(2000, style({opacity: 0}))]);


Result:
Our trigger is really simple and clean now, thats some nice code.
export let fade =  trigger('fade', [
    transition(':enter', [fadeInAnimation]),
    transition(':leave', [fadeOutAnimation])
]);


So now that we've extracted the Animations, how do we let the consumers of these animations do some customization?
The answer is Parameterizing of course.

Task 4 - Parameterize Animation:
So the Animation method actually contains a AnimationOptions object, which is what we use to take in extra parameters.
-Create AnimationOption object & insert default values.
-Consumer can override these values if needs be.


export let fadeInAnimation = animation([
    style({opacity: 0}),
    animate('{{duration}} {{easing}}')],
    //Add AnimationOptions
    {params: {
        duration: '2s',
        easing: 'ease-out'
    }
});

Task 5 - Use Paramerized Animations
So now if we take a look at the ToDo component, we can take fadeInAnimation as like, but also use the 
Animation Options object to customize it!
trigger('todoAnimation', [
      transition(':enter', useAnimation(fadeInAnimation, {
        params:{
          duration:'10s'
        }
      })),


Morale of the Story:
-Extract Transitions from Triggers so they can be reuse elsewhere.
-Declare a function using animation() and place all the transition code in there.
-Use this function in various triggers to avoid duplication & cetralize the code.
-Use AnimationOptions object to pass values into the animation, making it more customizeable.


---Tutorial 17 - Animation Callbacks---
So Animations have a few callback functions we can use to tell a animation has started or completed.
So where we have the Animation Annotation, we can bind to the output property of this event then
create some cool functionality on start or onStop.

Task 1 - Bind to Animation Event:
So where we apply the Animation in our template, we just property binding to bind to the event output property.
 <button type="button"
      @todoAnimation
      (@todoAnimation.start)="animationStarted($event)"
      (@todoAnimation.done)="animationDone($event)"
      *ngFor="let item of items"
Then we can create these methods in our component and do some cool shit, like making an API call to delete or add items.


Task 2 - Create Methods in Component:
  //Task 2 - Create Methods in Component:
  animationStarted($event) {
    console.log("Started: ", $event)
  }

  animationDone($event) {
    console.log("Done: ", $event)
  }

  Task 3 - Review $Events in Console:
  So if we look at the objects printed in the console, we can see the properties we could access.
  Properties like:
  fromState
  PhaseName
  toState
  totalTime
  triggerName
  All of these are very helpful for creating more complex animations and debugging. 


---Tutorial 18 - Querying Child Elements---
What if we want to apply a FadeIn animation for the title. How would we add 2 Trigger Annotations in the same 
template? Rather than creating another trigger specifically for this, what if we could add a trigger to the template
then apply it to any child elements inside?

Task 1 - Wrap Template in DIV:
So we're gonna apply the Trigger on the entire template wrapped in this DIV.
<div @todosAnimation>
<h1>Todos</h1>


How to Select a Child Element:
We use the Query Helper function to find certain elements inside the Template Container.
We can use CSS selectors to query elements in the Template. (should do a CSS refresher.)
query('h1')
.className
#id

We also have Pseudo-Selector Tokens:
query(":enter"), query(":leave") - When an Element is Entering or Leaving the container
query(":animating") - Mid Animation
query(":trigger") - When Triggered.
query("@*") - All Triggered items
query() - Container itself


Task 2 - Apply some Animations:
So now we just create the Trigger like before, except we query the container for the element we wish to animate.
animations: [
    trigger('todosAnimation', [
      transition(':enter', [
        query('h1', [
          style({transform: 'translateY(-20px)'}),
          animate(1000)
        ])
      ])


Result:
So now we can apply an Animation on a Container, then in the Component select which child elements to work on.
There is a bug now where the initial list elements are not fading in, only new ones are. This is a bug we will address
in the next section.


---Tutorial 19 - Animating Child Elements---
So we saw from the previous tutorial that the ToDo animation loads just fine, but the child elements in the list
don't seem to work anymore...

The Problem:
Because we have 2 Animations Annotations, the second trigger never gets executed.
<div @todosAnimation>
<h1>Todos</h1>

<input #itemInput
  class="form-control"
  (keyup.enter)="addItem(itemInput)">

<div *ngIf="items" class="list-group" >
  <button type="button"
      @todoAnimation


Solution:
For this we need to adapt our trigger to allow the child elements, we do this manually by using the 
Query method, then allowing the child elements to animate also.
Because our bootstrap items are buttons with the class list-group-item, we can use this CSS selector
or any other Pseudo selectors.

Task 1 - Query Pseudo Selector:
So from the previous lectures we talked about querying elements inside a section of the template.
using the :Trigger selector, we can select the @todoAnimation not to be confused with @todosAnimation we use on the
DIV.
But we use this to select our area, then use animate child which fixes our issue.
        query('@todoAnimation', animateChild())


Note:
By using animateChild() we are kicking the animations off in sequence, in the next lecture we will go over
running animations in paralell.


---Tutorial 20 - Running Paralell Animations---
So the problem with the current implmentation is that we are running multiple queries, and these are being ran in
sequence. To change this behavior we need to GROUP the queries. This ensures then run in paralell.

The Problem:
query('h1', [
          style({transform: 'translateY(-20px)'}),
          animate(1000)
        ]),
        query('@todoAnimation', animateChild())


Task 1 - Group Queries:
So Group takes in an array of queries, and makes sure they all run togther.
        group([
          query('h1', [
            style({transform: 'translateY(-20px)'}),
            animate(1000)
          ]),
          query('@todoAnimation', animateChild())


Task 2 - Group Animations Example:
This example perhaps makes it more clear, if we want to apply multiple animations at the same time.
Group provides that functionality, now watch it change colour and move at the same time!
        group([
          animate(1000, style({background: 'red'})),
          animate(2000, style({transform: 'translateY(50px)'}))
        ])

Morale of the Story:
Use Group([]) to run animations in paralell!


---Tutorial 21 - Staggering Animations---
So what if we were to implment staggered animation, one kicks off after the next.

Task 1 - Stagger:
So where we make the call to animateChild, we can point to another function which contains stagger before Animating
each item.
 query('@todoAnimation', stagger(200, animateChild()))


Note:
So the only reason we are doing animateChild() is because we have created a nested trigger.
In the real world stagger is used to call an entire trigger/transition, not just call the child elements like we have.
So lets write some good to make sense of this.

Task 2 - Staggering useAnimation:
      query('@todoAnimation', stagger(200, useAnimation(fadeInAnimation)))


Task 3 - Stagger Function:
So lets write a function for animating the List Items.
-Comment Out Trigger
-Comment out Animation Annotations
          query('.list-group-item', 
          stagger(200, [
            style({transform: 'translateX(-20px)'}),
            animate(1000)
          ]))


Result:
So now our list items slide in one after the other, pretty cool effects.
However when we add new items the effects are not applied. This is because all our code is contained inside the
todosAnimation onTransition :enter, so once the template comes into the DOM, all animations is done!
Explains why new items don't get triggered...



Task 4 - Final Version:
So because we staggered everything inside the Trigger & Transition, we need to revert back to using animate child.
Which kicks off new items animation and the leave transition so we get the best of both worlds.
      query('@todoAnimation', stagger(200, animateChild()))
          


Take Home:
If we want to implment a curtain like effect, use the stagger function & the steps to animate.
The stagger method is designed to only be used inside a query function.