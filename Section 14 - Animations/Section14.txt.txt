---Section 14 - Animations---
---Tutorial 1 - Introduction---
Animations are getting a lot more common in modern applications, so in this section we're going to be able to add animations to your angular applications.

In this section:
-Understand the structure of an Animation
-Animate various elements
-Create reuseable animations
-Use new animation functions in Angular 4.3
-Write Clean Animation Code


---Tutorial 2 - Examples of Animations---
First lets take a look at the kind of animations we're going to build in this section.
We have a to-do list, the Title slides down from the top and each element in the list will load fade in using this animation.

-Slide In
-Fade In
-Straggered Amimation
-Change Colour & Slide Out
-Text Box Expand & Content Fade In


---Tutorial 3 - Different Ways to Create Animations---
There are two primary ways to create Animations, CSS & JavaScript
-CSS:
With CSS we have Transition & Animation properties we can use to animate DOM elements.
We can create custom CSS classes like so, and your browser will begin to apply these animations to your DOM elements.
If you've been working with CSS for a while you've probably come across animate.css, google Animate.css to see how easy it is to apply some cool animatons.

.stretch {
    animation-name: stretch;
    animation-duration: 1.5s;
}

Cons for CSS:
We certainly can use just CSS for animations but there are a few drawbacks.
-Limited Control over animation
-Suitable for Simple, one-shot animations


-JavaScript
For JavaScript however we have much more control, and may more libraries for Animations.
-JQuery
-GSAP
-Zepto
-Web Animations API (Recommended & supported natively in Chrome, Firefox & IE)

What does the code look like?
Get  Reference to an element, then call the animate method.
var element = document.querySelector('#myElement');
element.animate(...);

What about Angular?
Angular has a module built on-top of the Web Animations API called @angular/animations.
So instead of us working directly with the API, we use the abstractions provided by Angular.
This makes our code much more tidy, and easier to Unit test and port to another platform. So if we move to IOS or Android
we can use the native animations in that system without much effort.

Take Home:
-Use CSS for Simple Animations
-For More Flexible Animations, we use JavaScript and the Web Animations API.
-In Angular we use @angular/animations which is built ontop of the Web Animations API.
-By using @Angular/animation abstractions, we can use the Animations natively on other platforms, meaning code once, supported on all OS's.



---Tutorial 4 - Angular Animations:---
So lets get started with some Angular Animations. The Angular Animations Module includes some important methods,

Animation Helper Functions:
-trigger()
-transition()
-state()
-animate()
-etc

On a basic level animations are just a transitions from state1 to state2, like this example.
State 1                 >       transition                >      State 2
Background-Color: Red                                               Background-color: Blue

But what other States can we have for a DOM Element?
-Void
-Default(*)
-Custom

-Void State:
The Void state is for an object BEFORE or AFTER being placed in the DOM. To in a To-Do list, we create the Object, then place it into the DOM.
So the state of the List Item is VOID until it is placed in the DOM. The same happens if we remove an item from the list, we return the state to VOID.
This is how we can do transitions for newly created & deleted items.

-Default(*):
The Default state is when it is active in the DOM. So using the previous example, when the List Item exists inside the DOM it is in its Default state.

-Custom:
Custom isn't used very often but there are scenarios for this. Say we have a collapseable panel, the content inside the container is there,
it is just hidden using the HTML hidden state. So if we want to animate the hidden content we beed to use a Custom State.

Sample Implmentation:
So lets say we want to apply some animations to each item in a To-Do list.

Task 1 - Create a Components Metadata:
-Animation Property Takes Array.
-In the array we create a Trigger, which has a corresponding Implmentation (States & Transtions on trigger)
-Notice trigger, state & transition are the Angular Animations helpers we mentioned earlier.
@Component({
    animations: [
        trigger:('fadeIn', [
            state(...)
            transition(...)
        ])
    ]
})


Task 2 - Apply Animation on Element:
So now that we have the Animation completed, we can apply it onto our HTML using this custom notation.
-@fadeIn
-Now we can apply this on each item in our to-do list.
<div @fadein></div>