----Section 15 - Angular Material----
---Tutorial 1 - Introduction---
In this section we're going to take a look at Angular Material, which is a collection of components
that give our application a modern look and feel.

In this section we're going go go over:
-Working with Various Components
    -Form Contol
    -Icons
    -Diaglog Boxes
    -Progress Spinners
    -ToolTips
-Use Prebuilt themes
-Crete a Custom theme
-Use Angular Typography
-Create Custom Typography


---Section 2 - What is Angular Material---
Angular Material is a library of high-quality UI components bulit with angular & typescript.

They have the benefits of being:
-Localized
-Clean & Simple api
-Well-tested
-Customizable
-Fast(minimal overhead)
-Well Documented

The Website:
https://material.angular.io/
Here we can see the Components in actions, really nice well designed forms with animations out of
the box, we can access all of this by using Angular Material.

BootStrap V Angular Material:
But Mosh, why do we need Material if we already have BootStrap? BootStrap is plain vanilla javascript,
so it has nothing to do with Anglar, and we cannot easily use them in our angular components.
We have to create custom directives or components to actually use the bootstrap features.

However material was written from the groud up for Angular & typescript, we can simply import
the module and begin using Angular Material. It also complies with the google design language across
Google plus & android where as bootstrap is off on its own.

Pros & Cons:
Angular Material:
-Still New(immature)
-Quality Standard
-Common api
-Easy to use

BootStrap:
-Very Mature - Has all the features we need.
-Forced to use 3rd party components.
-A lot of dependencies - Because of the 3rd parties, we have forced dependencies.

Take Home:
Angular Material is the new design library for google products, very new but reduces dependencies
on 3rd parties.


---Turorial 3 - Installing Angular Material---
So lets get this installed then, a little bit of setup required just like boostrap.

Task 1 - Create Project:
ng new material-demo

Task 2 - NPM Install Material:
cd into the material-demo directory and install.
npm install --save @angular/material @angular/cdk @angular/animations


Task 3 - Install Hammer:
Hammer is a JS library for gesture, controls its optional but may as well include it to make
your site more accessible.
npm install --save hammerjs


Task 4 - Select Theme:
In the prebuilt-themes we can take a look at the various out of the box themes, lets use indigo-ping.
Node Modules > @angular > material > prebuilt-themes


Task 5 - Apply theme:
The same we added the bootstrap styles, into our global style.css, we need use the prebuild-theme here.
@import "~@angular/material/prebuilt-themes/indigo-pink.css"

Task 6 - Import Browser Animtions Module:
In the App.module.ts we need to add animation support.
import {BrowserAnimationsModule } from '@angular/platform-browser/animations'

Also make sure to add it into the imports section.
BrowserAnimationsModule


Task 7 - Using Angular Material:
So just to make sure its all working correctly, lets try create a checkbox.
<md-checkbox>Subsribe to NewsLetter: </md-checkbox>


Error:
md-checknox is not a an Angular component, a common error because we are using a checkbox component,
that we have not yet added to the app.module.


How do we know where to find these Components?
Every Angular Material Component we wish to use, has its own instructions on where to find it.
https://material.angular.io/components/checkbox/api

The Answer is...
import {MatCheckboxModule} from '@angular/material/checkbox';


To Note:
So from the tutorial the library has changed a little, no longer is it md-checkbox but mat-checkbox.
All of the imports & usage must use the same name.

Take Home:
To use Angular Material in your application.
-NPM Install
-Add to Global style
-Import BrowserAnimationsModule
-Use Angular Material Component with the selector mat-checkbox
-Observe the slick new checkboxes.


---Tutorial 4 - CheckBoxes---
So lets get started looking under the hood at Angular Material checkboxes.

-Whats the difference between HTML & Material Checkbox?
The Material checkbox actually works in the same way as the HTML version, including
the same attributes like type, checked, value change event etc.

<mat-checkbox>Subscribe to NewsLetter:</mat-checkbox>
<input type="checkbox" checked="checked" value="" change="">

-Where to find these Attributes:
If we head over the website, we can see all the properties available in the component,
and in this section we're gonna go over a few of the most useful ones.
https://material.angular.io/components/checkbox/api


Task 1 - Using the Properties:
So now that we know about the properties lets try using it.
<mat-checkbox 
    value="2"
    checked="checked"
    >
    Subscribe to NewsLetter:</mat-checkbox>


Task 2 - Use Propery Binding:
Now that we can make the box checked by default, we can take it to the next level by
using a variable in the component to dynamically set isChecked. Say if we had a to do list,
and we want to pre check the done items, this is how it would work.

2 Way property binding:
<mat-checkbox 
    [value]="2"
    [checked]="isChecked"
    (change)="onChange($event)"
    >
    Subscribe to NewsLetter:</mat-checkbox>


export class AppComponent {
  title = 'material-demo';

  //Toggle Check Box.
  isChecked = true;

  //Display Event Obj
  onChange($event){
    console.log("Captured: ", $event);
  }


Task 3 - Dynamically Hide/Show Elements:
-Declare a template variable for use with NgIf
<mat-checkbox
    #showDetails
    [value]="2"
    [checked]="isChecked"
    (change)="onChange($event)"
    >Show Details:
</mat-checkbox>

-Use the Checked property to Show/Hide
<div *ngIf="showDetails.checked">Some details...</div>

Note:
In summary, we can still use Angular Material in the same way we interact with HTML,
except these are properties in the Components, not HTML.


---Tutorial 5 - RadioButtons---
So lets checkout the RadioButton, it works much the same as the CheckBox.
The Angular Material website has some great info on how to use their components.
https://material.angular.io/components/radio/overview


Task 1 - Create Radio Group:
Simply create a Radio Group & Radio Buttons with the mat-radio syntax.
<mat-radio-group>
    <mat-radio-button [value]="1">Male</mat-radio-button>
    <mat-radio-button [value]="2" [checked]="isChecked">Female</mat-radio-button>
</mat-radio-group>

Note:
Again we get the error, mat-radio-group now a known component, gotta add them imports!

Task 2 - Import the RadioButtonModules:
import {MatRadioModule} from '@angular/material/radio';

And the @NgModule > Imports Section:
    MatRadioModule


Task 3 - Set Default Value:
So rather than using the propery binding syntax & isChecked, RadioGroups have a nice
proprty for setting the default value in a radio group.
-set value at group level.

<mat-radio-group value="2">
    <mat-radio-button value="1">Male</mat-radio-button>
    <mat-radio-button value="2">Female</mat-radio-button>
</mat-radio-group>


---Tutorial 6 - Select---
So lets take a look at the select dropdowns compnent in Angular Material.

Task 1 - Import MatSelectModule:
Lets add the Import & @NgModule, Imports.
import { MatCheckboxModule, MatRadioModule, MatSelectModule } from '@angular/material';


Task 2 - Create a Option List in Component:
  colors = [
    {id: 1, name: 'Red'},
    {id: 2, name: 'Blue'},
    {id: 3, name: 'Green'}
  ];

Task 3 - Display Options in Native HTML
<select>
    <option 
    *ngFor="let color of colors" [value]="color.id">{{color.name}}</option>
</select>


Task 4 - Display Options in Angular Material:
<mat-form-field>
    <mat-select placeholder="Pick a Color">
        <mat-option *ngFor="let color of colors" [value]="color.id">{{color.name}}</mat-option>
    </mat-select>
</mat-form-field>



Task 5 - Select Default Color:
Lets select the NgModel, then bind to a value color in our component.
    <mat-select [(ngModel)]="color">
        <mat-option *ngFor="let color of colors" [value]="color.id">{{color.name}}</mat-option>
    </mat-select>

Don't Forget:
To use NgModel, we need to import the FormsModule.

Result:
We have a sweet looking Dropdown, much better than the stock HTML one.


---Tutorial 7 - Input---
So lets take a look at the Angular Material Input field, ir provides some really nice
functionality out of the box. As always lets checkout the documentation.
https://material.angular.io/components/input/api


Task 1 - Import Input Module:
Make sure to add the Import & @NgModule > Imports section also.
import {MatInputModule} from '@angular/material/input';


Task 2 - Use Material Input:
Now if we look at the example on the website, everything is within a container.
This is because there can be lots of additional functionality added to Input Fields,
like hints, error messages etc.

<form class="example-form">
  <mat-form-field class="example-full-width">
    <input matInput placeholder="Username">
    <mat-hint>Must be a Unique UserName</mat-hint>
    <span matPrefix>work.</span>
    <span matSuffix>@domain.com</span>
  </mat-form-field>
</form>


Task 3 - Add Validation:
So adding an area for validtion is a breeze.
-Make UserName Required.
-Create Error Box
    <mat-error>
      UserName Field is Required!
    </mat-error>


Task 4 - Add Form Control:
If we remember the template driven forms section, we know we need ngModel & name so Angular
can create a form control object. That is why we can't get our validation to work currently.

<mat-form-field class="example-full-width">
    <input
      ngModel
      name="username"
      matInput
      placeholder="Username" 
      required>


Morale of the Story:
Validation works the exact same way as before, instead of using HTML markup we are using
properties in the Angular Material components. We can still do Template or Reactive validation.


---Tutorial 8 - Text Areas---
So carrying on from Input fields, much of the same applies for TextAreas. Lets go
through a quick example now.

Task 1 - Create Traditional TextArea:
<textarea rows="2"></textarea>


Task 2 - Create Angular Material TextArea:
So to create a simple TextArea its quite easy!
<mat-form-field class="example-full-width">
    <textarea matInput placeholder="Leave a comment"></textarea>
  </mat-form-field>


Task 3 - Auto Adjust Size:
By using the matTextareaAutosize we can configure our Text Area to autosize, which
saves us having to do all the vanilla javascript & JQuery ourselves.
    <textarea
    matTextareaAutosize
    matInput 
    placeholder="Leave a comment"></textarea>