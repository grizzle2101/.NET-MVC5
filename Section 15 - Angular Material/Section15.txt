----Section 15 - Angular Material----
---Tutorial 1 - Introduction---
In this section we're going to take a look at Angular Material, which is a collection of components
that give our application a modern look and feel.

In this section we're going go go over:
-Working with Various Components
    -Form Contol
    -Icons
    -Diaglog Boxes
    -Progress Spinners
    -ToolTips
-Use Prebuilt themes
-Crete a Custom theme
-Use Angular Typography
-Create Custom Typography


---Section 2 - What is Angular Material---
Angular Material is a library of high-quality UI components bulit with angular & typescript.

They have the benefits of being:
-Localized
-Clean & Simple api
-Well-tested
-Customizable
-Fast(minimal overhead)
-Well Documented

The Website:
https://material.angular.io/
Here we can see the Components in actions, really nice well designed forms with animations out of
the box, we can access all of this by using Angular Material.

BootStrap V Angular Material:
But Mosh, why do we need Material if we already have BootStrap? BootStrap is plain vanilla javascript,
so it has nothing to do with Anglar, and we cannot easily use them in our angular components.
We have to create custom directives or components to actually use the bootstrap features.

However material was written from the groud up for Angular & typescript, we can simply import
the module and begin using Angular Material. It also complies with the google design language across
Google plus & android where as bootstrap is off on its own.

Pros & Cons:
Angular Material:
-Still New(immature)
-Quality Standard
-Common api
-Easy to use

BootStrap:
-Very Mature - Has all the features we need.
-Forced to use 3rd party components.
-A lot of dependencies - Because of the 3rd parties, we have forced dependencies.

Take Home:
Angular Material is the new design library for google products, very new but reduces dependencies
on 3rd parties.


---Turorial 3 - Installing Angular Material---
So lets get this installed then, a little bit of setup required just like boostrap.

Task 1 - Create Project:
ng new material-demo

Task 2 - NPM Install Material:
cd into the material-demo directory and install.
npm install --save @angular/material @angular/cdk @angular/animations


Task 3 - Install Hammer:
Hammer is a JS library for gesture, controls its optional but may as well include it to make
your site more accessible.
npm install --save hammerjs


Task 4 - Select Theme:
In the prebuilt-themes we can take a look at the various out of the box themes, lets use indigo-ping.
Node Modules > @angular > material > prebuilt-themes


Task 5 - Apply theme:
The same we added the bootstrap styles, into our global style.css, we need use the prebuild-theme here.
@import "~@angular/material/prebuilt-themes/indigo-pink.css"

Task 6 - Import Browser Animtions Module:
In the App.module.ts we need to add animation support.
import {BrowserAnimationsModule } from '@angular/platform-browser/animations'

Also make sure to add it into the imports section.
BrowserAnimationsModule


Task 7 - Using Angular Material:
So just to make sure its all working correctly, lets try create a checkbox.
<md-checkbox>Subsribe to NewsLetter: </md-checkbox>


Error:
md-checknox is not a an Angular component, a common error because we are using a checkbox component,
that we have not yet added to the app.module.


How do we know where to find these Components?
Every Angular Material Component we wish to use, has its own instructions on where to find it.
https://material.angular.io/components/checkbox/api

The Answer is...
import {MatCheckboxModule} from '@angular/material/checkbox';


To Note:
So from the tutorial the library has changed a little, no longer is it md-checkbox but mat-checkbox.
All of the imports & usage must use the same name.

Take Home:
To use Angular Material in your application.
-NPM Install
-Add to Global style
-Import BrowserAnimationsModule
-Use Angular Material Component with the selector mat-checkbox
-Observe the slick new checkboxes.


---Tutorial 4 - CheckBoxes---
So lets get started looking under the hood at Angular Material checkboxes.

-Whats the difference between HTML & Material Checkbox?
The Material checkbox actually works in the same way as the HTML version, including
the same attributes like type, checked, value change event etc.

<mat-checkbox>Subscribe to NewsLetter:</mat-checkbox>
<input type="checkbox" checked="checked" value="" change="">

-Where to find these Attributes:
If we head over the website, we can see all the properties available in the component,
and in this section we're gonna go over a few of the most useful ones.
https://material.angular.io/components/checkbox/api


Task 1 - Using the Properties:
So now that we know about the properties lets try using it.
<mat-checkbox 
    value="2"
    checked="checked"
    >
    Subscribe to NewsLetter:</mat-checkbox>


Task 2 - Use Propery Binding:
Now that we can make the box checked by default, we can take it to the next level by
using a variable in the component to dynamically set isChecked. Say if we had a to do list,
and we want to pre check the done items, this is how it would work.

2 Way property binding:
<mat-checkbox 
    [value]="2"
    [checked]="isChecked"
    (change)="onChange($event)"
    >
    Subscribe to NewsLetter:</mat-checkbox>


export class AppComponent {
  title = 'material-demo';

  //Toggle Check Box.
  isChecked = true;

  //Display Event Obj
  onChange($event){
    console.log("Captured: ", $event);
  }


Task 3 - Dynamically Hide/Show Elements:
-Declare a template variable for use with NgIf
<mat-checkbox
    #showDetails
    [value]="2"
    [checked]="isChecked"
    (change)="onChange($event)"
    >Show Details:
</mat-checkbox>

-Use the Checked property to Show/Hide
<div *ngIf="showDetails.checked">Some details...</div>

Note:
In summary, we can still use Angular Material in the same way we interact with HTML,
except these are properties in the Components, not HTML.


---Tutorial 5 - RadioButtons---
So lets checkout the RadioButton, it works much the same as the CheckBox.
The Angular Material website has some great info on how to use their components.
https://material.angular.io/components/radio/overview


Task 1 - Create Radio Group:
Simply create a Radio Group & Radio Buttons with the mat-radio syntax.
<mat-radio-group>
    <mat-radio-button [value]="1">Male</mat-radio-button>
    <mat-radio-button [value]="2" [checked]="isChecked">Female</mat-radio-button>
</mat-radio-group>

Note:
Again we get the error, mat-radio-group now a known component, gotta add them imports!

Task 2 - Import the RadioButtonModules:
import {MatRadioModule} from '@angular/material/radio';

And the @NgModule > Imports Section:
    MatRadioModule


Task 3 - Set Default Value:
So rather than using the propery binding syntax & isChecked, RadioGroups have a nice
proprty for setting the default value in a radio group.
-set value at group level.

<mat-radio-group value="2">
    <mat-radio-button value="1">Male</mat-radio-button>
    <mat-radio-button value="2">Female</mat-radio-button>
</mat-radio-group>


---Tutorial 6 - Select---
So lets take a look at the select dropdowns compnent in Angular Material.

Task 1 - Import MatSelectModule:
Lets add the Import & @NgModule, Imports.
import { MatCheckboxModule, MatRadioModule, MatSelectModule } from '@angular/material';


Task 2 - Create a Option List in Component:
  colors = [
    {id: 1, name: 'Red'},
    {id: 2, name: 'Blue'},
    {id: 3, name: 'Green'}
  ];

Task 3 - Display Options in Native HTML
<select>
    <option 
    *ngFor="let color of colors" [value]="color.id">{{color.name}}</option>
</select>


Task 4 - Display Options in Angular Material:
<mat-form-field>
    <mat-select placeholder="Pick a Color">
        <mat-option *ngFor="let color of colors" [value]="color.id">{{color.name}}</mat-option>
    </mat-select>
</mat-form-field>



Task 5 - Select Default Color:
Lets select the NgModel, then bind to a value color in our component.
    <mat-select [(ngModel)]="color">
        <mat-option *ngFor="let color of colors" [value]="color.id">{{color.name}}</mat-option>
    </mat-select>

Don't Forget:
To use NgModel, we need to import the FormsModule.

Result:
We have a sweet looking Dropdown, much better than the stock HTML one.


---Tutorial 7 - Input---
So lets take a look at the Angular Material Input field, ir provides some really nice
functionality out of the box. As always lets checkout the documentation.
https://material.angular.io/components/input/api


Task 1 - Import Input Module:
Make sure to add the Import & @NgModule > Imports section also.
import {MatInputModule} from '@angular/material/input';


Task 2 - Use Material Input:
Now if we look at the example on the website, everything is within a container.
This is because there can be lots of additional functionality added to Input Fields,
like hints, error messages etc.

<form class="example-form">
  <mat-form-field class="example-full-width">
    <input matInput placeholder="Username">
    <mat-hint>Must be a Unique UserName</mat-hint>
    <span matPrefix>work.</span>
    <span matSuffix>@domain.com</span>
  </mat-form-field>
</form>


Task 3 - Add Validation:
So adding an area for validtion is a breeze.
-Make UserName Required.
-Create Error Box
    <mat-error>
      UserName Field is Required!
    </mat-error>


Task 4 - Add Form Control:
If we remember the template driven forms section, we know we need ngModel & name so Angular
can create a form control object. That is why we can't get our validation to work currently.

<mat-form-field class="example-full-width">
    <input
      ngModel
      name="username"
      matInput
      placeholder="Username" 
      required>


Morale of the Story:
Validation works the exact same way as before, instead of using HTML markup we are using
properties in the Angular Material components. We can still do Template or Reactive validation.


---Tutorial 8 - Text Areas---
So carrying on from Input fields, much of the same applies for TextAreas. Lets go
through a quick example now.

Task 1 - Create Traditional TextArea:
<textarea rows="2"></textarea>


Task 2 - Create Angular Material TextArea:
So to create a simple TextArea its quite easy!
<mat-form-field class="example-full-width">
    <textarea matInput placeholder="Leave a comment"></textarea>
  </mat-form-field>


Task 3 - Auto Adjust Size:
By using the matTextareaAutosize we can configure our Text Area to autosize, which
saves us having to do all the vanilla javascript & JQuery ourselves.
    <textarea
    matTextareaAutosize
    matInput 
    placeholder="Leave a comment"></textarea>


---Tutorial 9 - Date Pickers---
Lets take a look at the DatePicker Component.


Task 1 - Import DataPicker Module:
Add the Import & @NgModule Import too.
import {MatDatepickerModule} from '@angular/material/datepicker';

Note:
Had to include MatDatepickerModule & MatNativeDateModule, and also providers: [MatDatepickerModule], because the new DatePicker
is designed to have any date implmentations, hence we need to do more setup.


Task 2 - Start Using Date Picker:
At first this looks very different to the previous examples, but its actually quite easy.
Lets break it down...
-Create the Input Object = matInput
-Create the DatePicker Object & assign to template variable = mat-datepicker
-Bind DatePicker to Input Field = [matDatepicker]="birthdate"
-Include datapicker toggle button = mat-datepicker-toggle (the Calendar icon)

<mat-form-field>
    <input 
    type="text"
    matInput //Add input
    [matDatepicker]="birthdate" //Link Input Field to the DatePicker
    placeholder="Enter your BirthDate">
    <mat-datepicker-toggle matSuffix [for]="birthdate"></mat-datepicker-toggle>
    <mat-datepicker #birthdate></mat-datepicker> //Add DatePicker to Variable
</mat-form-field>

Task 3 - Resize DatePicker:
So the default datepicker we have won't really fit on mobiles, so lets change this.
We just enable touchUi to true & voila full screen date picker!
    <mat-datepicker #birthdate touchUi="true"></mat-datepicker>

Task 4 - Limit Date Selection:
So in many business applications we would want to limit the possible years a user can select.
This is very simple with the Angular Material DatePicker.

-Set a Min & Max date in our component.
export class AppModule {
  minDate = new Date(2017, 1, 1);
  maxDate = new Date(2018, 1, 1);
 }

 -Use Min & Max HTML Attributes & Bind to values in Component:
     <input 
    type="text"
    [min]="minDate"
    [max]="maxDate"
    matInput

Task 5 - Open Calendar by Default:
So if we click anywhere in the input, we want to open to DatePicker. This is done by using
the focus property on an Input, but then focusing on birhtdate.open.
    (focus)="birthdate.open()" 

Morale of the Story:
There are still a few bugs with the DatePicker, but it provides some nice features like
-limit the range of dates.
-Focus DatePicker on select
-Enable TouchUi version
And it all looks better than anything we could do with stock input fields.


---Tutorial 10 - Icons---
In Angular Material, just like we BootStrap we have a load of beautiful icons for us to use.
Icons for Carts, Users, Expand Collapse and a whole host of others.


Task 1 - Add the Icon Styles:
Add this link into the global styles.
@import "https://fonts.googleapis.com/icon?family=Material+Icons";


Task 2 - Import in App Module:
Make sure to add the MatIconModule & @NgModule Imports.
import { MatIconModule } from '@angular/material';


Task 3 - Use Icon:
Simply use the Selector mat-icon, then name the icon you wish to use.
<mat-icon>add_alert</mat-icon>

Note:
There are 2 ways to change the color, we can write our own CSS or use a Theme.
We will be going over creating a theme in a later tutorial, so for now lets do CSS.

Task 4 - Change Color:
mat-icon {
    color: purple;
}

Take Home:
So now we can see that using Angular Material, is much cleaner than using bootstrap
glyphicons.


---Tutorial 11 - Buttons---
Lets take a look at working with Buttons.

Task 1 - Import Buttons Module:
Make sure to add the MatIcoMatButtonModulenModule & @NgModule Imports.
import { MatButtonModule } from '@angular/material';


Task 2 - Create Basic HTML Button:
Really simple button, looks a bit shit though.
<button>Button 1</button>

Task 3 - Create Angular Material Button:
Now in Angular Material there are a variety of styles
-mat-button
    <button mat-button>Button 2</button>
-mat-raised-button
    <button color="primary" mat-raised-button>Primary</button> 

Personally mat-raised-button looks a lot better, as we can see the outline easily.
Now just as with Bootstrap, when applying color there are 3 types, Accent, Primary
& warn.

Task 4 - Display Primary, Accent & Warn themed Buttons:
-3 Options for Color: Note that these are all based on our theme.
<button color="primary" mat-raised-button>Primary</button> 
<button color="accent" mat-raised-button>Accent</button> 
<button color="warn" mat-raised-button>warn</button> 


Note:
So what if we don't like the style used in our theme, we have 2 options.
Create css or at the theme level, but we will go over this in a later section.

Task 5 - Add Fab Button:
Fab buttons, Floatable Action Button is a container for things like checkboxes.
Makes Icons really standout.
<button color="primary" mat-fab><mat-icon>check</mat-icon></button> 

Note:
In a Previous tutorial we set the icon colour to purple, so explains why it looked weird!
mat-icon {
    color: purple;
}

Take Home:
-Never override style with CSS, as it will affect style for kinds of things in your app.
-Angular Material Uses Themes, make sure to encapsulate styles inside them.


---Tutorial 12 - Chips---
Chips are like buttons, but are commonly used as filters.
Where you have a set of filters or Tags like C#, Java, DevOps, clicking these Chips
would alter the list of courses you have.

Task 1 - Import Chips Module:
As always don't forget your imports & @NgModule > Import.
import { MatChipsModule } from '@angular/material';

Task 2 - Create Categories List:
-Create a simple list, we're going to use this later in the chips.
export class AppComponent {
  categories = [
    {name: 'Beginner'},
    {name: 'Intermediate'},
    {name: 'Advanced'}
  ];
}


Task 3 - Use Chips:
Okay so we have to write a little bit of code to get this working.
-Iterate over the categories with NgFor.
-Click Event to switch the Selected State.
-Highlight the Selected Item
-Display the Category.name

<mat-chip-list>
  <mat-chip 
    *ngFor="let category of categories"
    color="accent"
    (click)="category.selected = !category.selected"
    [selected]="category.selected">
    {{category.name}}
  </mat-chip>
</mat-chip-list>


Task 4 - Single Selection Only:
Okay thats some nice work, but what if the boss asks for only a single selected value?

<mat-chip 
    *ngFor="let category of categories"
    color="accent"
    (click)="selectCategory(category)"
    [selected]="category.selected">
    {{category.name}}
  </mat-chip>


So now what we want to do is implment the logic for unticking everything else.
-Deselect Other Items
-Exclude out selected item from that process.
  selectCategory(category: any)
  {
    this.categories
    .filter(c => c != category)
    .forEach(c => c['selected'] = false);
    category.selected = !category.selected;
  }

Note:
When using this Lambda C has no knowledge of c.selected, have to use [] brackets
to indiciate this comes at runtime.

Take Home:
Chips are like buttons, but are commonly used for filters.


---Tutorial 13 - Progress Spinners---
In many applications you've seen the progress spinner, in this section we're going to implment it.


Task 1 - Import Progress Spinner Module:
As always import & @NgModule > Import.
import { MatProgressSpinnerModule} from '@angular/material';


Task 2 - Use Progress Spinner:
Before we implement this its important to know there are 2 modes.
Determinate	- Standard progress indicator, fills from 0% to 100%
Indeterminate - Indicates that something is happening without conveying a discrete progress

Code:
This will give us a simple 20% loaded progress spinner.
<mat-progress-spinner mode="determinate" value="20"></mat-progress-spinner>


Task 3 - Simulate Progress:
So we're gonna create a simple function that increments  the progress every 20ms.
export class AppComponent {
  progress = 0;
  timer;

  constructor() {
    this.timer = setInterval(() =>{
      this.progress++;
      if(this.progress == 100) clearInterval(this.timer)
    }, 20);
  }

Task 4 - Bind Progess Spinnger to progress in Component:
<mat-progress-spinner mode="determinate" [value]="progress"></mat-progress-spinner>


Task 5 - Indeterminate Progress:
For API's we can't tell how long they're gonna take, so we use Inderterminate progress
so it keeps spinning until it completes.

<mat-progress-spinner mode="indeterminate"></mat-progress-spinner>


Task 6 - Simulate a API Service:
Now obviously this should all be encapsulated inside a service, but its not part of this section.
In the real world we would be setting the course list and doing all that, but for simplicity
we are just toggleing the isLoading flag.

  isLoading = false;
  constructor()
  {
    this.isLoading = true;
    this.getCourses()
    .subscribe(x => this.isLoading = false);
  }

  getCourses()
  {
    return timer(2000);
  }


Task 7 - Use IsLoading in Progress Spinner:
Really simple now, we just NgIf to show & hide the component
<mat-progress-spinner 
*ngIf="isLoading"
mode="indeterminate"></mat-progress-spinner>


Take Home:
There are 2 modes for Progress Spinnger Inderminate(will spin over & over) or determinate
where you have a percentage from 0 to 100 of completion.
-Use variables in the component to progress the spinner, or hide the spinner on completion.



---Tutorial 14 - ToolTips---
In this lecture we're going to go over adding ToolTips to our application.


Task 1 - Import ToolTip Module:
As always import the Module & @NgModule > Imports
import { MatTooltipModule } from '@angular/material';



Task 2 - Use ToolTip:
<span matTooltip="Here is my tooltip!">Some Text</span>

Task 3 - Adjust ToolTip:
There is a small problem with our tooltip because we have no padding, the tooltip is partially
blocked. Luckily Angular Material lets us totally customize it.

Take Home:
Using the ToolTip is very simple, all we have to do is use MatTooltip directive.