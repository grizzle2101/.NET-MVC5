---Tutorial 1 - Introduction---
So in this section we're going to learn how to write automated tests for our Angular 2
apps. So if you're a beginer or expert, its helpful to go over this section.

What we'll cover in this section:
-Introduction to Automated testing
-Different Types of tests
-How to write tests
-Code Coverage 
-Practical Excercises


---Tutorial 2 - What is Automated Testing:---
Automated testing is the practice or writing code, to test our code, and writing
them in an automated fashion.

To effectively demonstrate this, lets create a scenario. We have a function that checks
for X or Y, then gives you the different result.

function Calculate(input) {
    if(x) retrn...;
    else if (y) return ...;
}

Manual Tests:
Using traditional manual tests, we have to build & deploy the applicaion then manually
fill out the form that uses this calculation.
This takes far too much time, and has to be repeated to catch regression bugs, and as
our application grows this quickly becomes unmangeable.

Automated Test:
We could write 2 test cases for the X & Y scenarios then voila, we don't have
all the headaches of deploying & manually testing, we can do it all from within out IDE.

//Test Case 1
var result = Calculate(x):
assert.That(result, expected)

//Test Case 2
var result = Calculate(y):

assert.That(result, expected)

The Opinionated Developer:
Why is it our Job to write tests? Why should we be writing Production code and
the Test code? Because mr joe blog, the cost of manual testing.

-To Document the Application:
As an application grows and shrinks, as does the team. The developers that built
these featues are long gone, and so too is any documentation on how it should work.
Do we just give up on these features? We need to maintain business value.

-Ballooning Regression:
As the application grows, so too does the effort & combinations required to test, this
can lead to a balooning workload for everyone in the team.
So to reduce the burden on manual testing & document the functionality it is nice to have
a suite of automated tests.

-Catch Bugs BEFORE Releasing:
Fairly self explanitory, lets catch bugs before building & deploying code.
The code you wrote works on your local, you go home for a beer but get a call from
the boss saying you broke some important functionality? Wouldn't it be nice
to have automated that...


Every scenario is different, some say a developer has to write tests for everything, some
say automated testing is useless so why bother.
Be pragmatic! If you are working on a budget, maybe tests are not the best use of your
time. However if you're working on a mission critical piece of functionality,
probabaly nice to have a few tests to cover your back!


---Tutotial 3 - Types of Tests---
So at a high level, there are 3 types of tests.
-Unit Tests
-Integration Tests
-End to End Tests


-Unit Tests:-
Tests a Component in Isolation, without any external resouces eg file system,
database, API Endpoints.
In Angular specifically that means testing a component, without its template or any
other resources.
So if our component uses a Service or Router, we're going to give it a fake instance
or Mock, do we test the component in isolation.

-Easiest to write
-Super Fast
-Don't give much confidence on entire application health

Example:
So we have a vote button that increments each time it is called.
The component has a single property & a single method.
export class VoteComponent {
    totalVotes: number;

    upVote() {
        this.totalVotes++;
    }
}

Template:
{{totalVotes}}
<button (click)="upVote()"> Up </button>


Testing in Isolation:
So to this test VoteComponent, we forget about the component altogther and just
check that upVote will increment the number correctly.
If there are wiring issues between the component & template, we don't catch those until
runtime, this is where Integration tests come into play.


-Integration Tests:-
Test a component with External resources eg FileSystem, database or API Endpoints.
Again this is the generic definition, in the Angular world this means we test
a component along with its template.
So taking the above example, we need to compile the application & write some setup
code to manage modules, dependency injection & so on. Again we get more confidence in
the application, but we still don't have the big picture of a full process, which is
where End to End tests come in.


-End to End Tests:-
End to End tests the entire application as a whole.
The entire end to end test might look something like we navigate to the application, login, click onto a particular page, fill out a form
then verify the results.
-More Confidence
-Very Slow
-Very Brittle
 A simple HTML change can break this application.


In Summary:
So we should focus our time on Unit & Integration tests, and use E2E tests to verify
key processes work, because they are fragile & slow.
-Unit Tests
-Integration Tests
-End to End Tests


---Tutorial 4 - Unit Testing Fundamentals---
Tests are first class citizens! This means we apply all the same principles we apply in everday
development.
Clean Coding practices like
-Small functions
-Proper Naming
-Single Responsability

We have includes a new project testing-demo, each section corresponds to a tutorial,
and will get increasingly difficult.
So to get this started use the following commands:
-npm install
-ng test
Builds the application & runs the built in test runner karma.


Our First Function:
In Computer.ts we have our first class to be tested.

export function compute(number) {
  if (number < 0)
    return 0; 

  return number + 1;
}


Task 1 - Create Test File:
Create a file in the 01 - fundamentals folder where computer.ts is located.
Make sure to follow the specific naming convention.
-compute.spec.ts
The Karma test runner looks for files with that extensions, and runs them accordingly.



Task 2 - Write a Test:
The test framework packaged with angular is Jasmine, this provides some nice methods
for Setting up and doing the AAA, Arrange, Act & Assert statements needed.
There are some language specifics that are new like
-describe() - A test Suit
-it() - Spec(A Test Case)

Describe takes 2 parameters, the name of the Item under test eg 'compute' function.
and a Pointer to a function for the test itself. eg the test code.
It() is a test case, so somethine like IsGreaterThanX, IsLessThanY, make sure
the name for the test is clear and explains its intention.
describe('compute', () => {
    it('test name', () => {
        
    })
})


Note:
Ran into a few problems with the testing-demo folder provided, needed to update the
package.json

  "devDependencies": {
    "@ngtools/webpack": "1.3.0",



Task 3 - Define the Tests:
So after looking at compute function we can see 2 possible outcomes, a negative number
and a positive number. So these are the first 2 cases we should write.

describe('compute', () => {
    it('Should return 0 if input is negative.', () => {
        const result = compute(-1);
        expect(result).toBe(0);
    })

    //Test Case 2:
    it('Should increment 1 if input is whole number.', () => {
        const result = compute(1);
        expect(result).toBe(2);
    })
})



Important Notes:
We use the Jasmine API to write the statements including how we assert things.
expect(result).toBe(0);

Expect has many more built in methods like IsLessThan, Is, Greater than etc, that we will
be using the upcoming tutorials.


---Tutorial 5 - Working with Strings & Arrays---
So this section is quite self explanitory, how to validate or Assert strings & arrays.


Test 1 - Strings:
In Example one we have a component that Greets, by taking the name as input then adds the name to the
greeting.

describe('greet', () => {
    it('Input is displayed in Message', () => {
        //Arrange

        //Act
        const result = greet('Ben');

        //Assert
        expect(result).toContain('Ben');
    })
})

Note:
Make sure to make these tests as robust as possible, by checking only for the existence of 'Ben'.
We don't want the test to fail if somone adds a comma or exclamation mark, its not important.

Test 2 - Arrays:
So in thie example we have a component which returns a list of currencies. Again we don't want to get
caught up in the ordering, incase we decide to do it alpabetically one day.

describe('getCurrencies', () => {
    it('Validate currencies are returned', () => {
        //Arrange

        //Act
        const result = getCurrencies();

        //Assert
        expect(result).toContain('USD');
        expect(result).toContain('AUD');
        expect(result).toContain('EUR');
    })
})



---Tutorial 6 - Setup & TearDown---
Okay from this point on we're going to be testing Angular components, so it will follow a certain
pattern/convention on how we work.
Take a look at section 3 voteComponent, we have a component which has  Upvote & Downvote methods, 
and modifies a internal value of voteCount. This is called the state change pattern.


Task 1 - Create Tests:
So testing the Upvote & Downvote functions are quite easy, but we have some duplicate code.
We should be be duplicating the Component creation, but we also have to make sure the value is setup
to avoid tests interfereing with each other...

describe('VoteComponent', () => {
  it('Should increment totalVotes when UpVoted', () => {
    //Arrange
    let component = new VoteComponent();

    //Act
    var result = component.upVote();
    
    //Assert
    expect(result).toBe(1);

  });

  it('Should decrement totalVotes when DownVoted', () => {
    //Arrange
    let component = new VoteComponent();

    //Act
    var result = component.downVote();
    
    //Assert
    expect(result).toBe(-1);

  });
});


Solution:
In C# & NUnit we had Setup to make sure to object creation is managed properly, and with Jasmine
we have the BeforeEach function.


Task 2 - Setup & Teardown:
So to solve this problem, we use beforeEach, this will create VoteComponent before each test.
We can then remove the Arrange part of each test, and the value of totalVotes is reset after
each test, so the tests don't interfere with each other.


describe('VoteComponent', () => {
  let component: VoteComponent;

  //Setup
  beforeEach(() => {
    component = new VoteComponent();
  });

  afterEach(() => {
  });



---Tutorial 7 - Working with Forms---
So in this section we're going to work with a very common pattern, Form Builders.
If we open section 4 we can see it creates a form group, with 2 form objects, which angular uses
to render the template form, so what exactly do we need to test?

Test 1 - We have Form Control objects 'Name' & 'Email'.
Test 2 - The Validators do what we think they do.

Task 1 - Create the Setup:
So just like before we create the beforeEach & instansiate TodoFormComponent. However this
Form component has a dependency on FormBuilder, so we have to provide this in our setup.

import { TodoFormComponent } from './todo-form.component'; 
import { FormBuilder } from '@angular/forms';

describe('TodoFormComponent', () => {
  var component: TodoFormComponent; 

  beforeEach(() => {
    component = new TodoFormComponent(new FormBuilder());
  });




-Task 2 - Write Tests:
Test Case 1 - Should create 2 form control objecs Name & Email:
-So in this scenario we are not Acting, we just want to know on creation of the component,
do we have 2 form control objects, name & email.
-We have to check the form contains name or email, we can do this with ToBeTruthy or toBe(true).

  it('Should create 2 form control objects', () => {

    //Assert
    expect(component.form.contains('name')).toBeTruthy(); //Expect Name in Form
    expect(component.form.contains('email')).toBe(true); //Expect Email in Form
  });


Test Case 2 - Checking the Validators:
So that we have the from control objects, we need to maniuplate them to make sure the Validators
work as designed.
-component.form.get('name') gets us the form control object.
-setValue sets the value, just like we would do in the UI.
-verify the form is invalid as a result of our action.

  it('Should make the form control name Required', () => {

    //Arrange
    //Get Form Control Object
    let control = component.form.get('name');

    //Act
    control.setValue('');

    //Assert
    expect(control.valid).toBeFalsy();
  });
});


Take Home:
-Use (component.form.contains('name')) to make sure form control objects exist.
-To Test a validator get the form control object, set the value to someting invalid then assert
 expect(control.valid).toBeFalsy();



 ---Turorial 8 - Working with Event Emittes---
In this section we're going to look at testing events are raised, and passes the correct data.
So in folder 5 - Event Emitter we have another voting component, except this one has an event emitter.
Once the user clicks vote, the vote event is raised and the total votes is passed.


Test Case 1 - Event is Raised & Passes Data:
So testing an Event requires a bit more setup, we need to subscribe to the VoteChanged event, and get
the totalVotes from it.
Now when we Act by triggering UpVote, we subsribe & get the data required. To Assert we just need
to check the total votes are 1 and voila.

  it('Should Raise VoteChanged event when UpVote is triggered', () => {
    //Arrange
    //Subscribe to Event & Get Votes
    let totalVotes = null;
    component.voteChanged.subscribe(tv => totalVotes = tv);

    //Act
    component.upVote();

    //Assert
    expect(totalVotes).toBe(1);
  });
});


---Tutorial 9 - Working with Spies---
Okay so in this section we're going to look at a component that uses a service to make
calls to the backend. Lets take a look at folder 06 - services and get cracking.

Taking a look at the code:
So in the ToDo service we have a few methods, NgOnInit to initalize the list, and Add & Delete for
maniuplating that list data. For this section though we're to focus on NgOnInit.

import { TodoService } from './todo.service'

export class TodosComponent { 
  todos: any[] = [];
  message; 

  constructor(private service: TodoService) {}

  ngOnInit() { 
    this.service.getTodos().subscribe(t => this.todos = t);
  }


  Working with NgOnInit:
  So we can see that NgOnInit is a service that gets the items then populated the todos array.
  We cannot use the service, as then we are reliant on the backend, which makes this an Integration
  test.
  We need to create a mock implmentation of this service, and make sure we populate the Todos accordingly.


Test Code:
-Initialize TodoService
-Initialize Component & Pass Service
-SpyOn is a jasmine function that allows the overriding of methods. This is how we will create
our Mock service.
-Our HTTP service returns an observeable, so our mock should follow the same signature. Return an
array as Observeable.
-Create an Array to give Mock Service
-Act, trigger the NgOnInit method.
-Assert the contents of our MockServide & Component todos are the same, this means the component
works at passing data to our todo list.


  describe('TodosComponent', () => {
  let component: TodosComponent;
  let service: TodoService;

  beforeEach(() => {
    service = new TodoService(null);
    component = new TodosComponent(service);
  });

  //Test Case 1:
  it('Should set Todos to items returned from Server', () => {
    //Arrange
    let todos = [1, 2, 3];
    spyOn(service, 'getTodos').and.callFake(() => {
      return Observable.from([todos]);
    });

    //Act
    component.ngOnInit();

    //Assert
    expect(component.todos).toBe(todos);
  });
});


Note:
We could return the list of Todos exactly like the real service does, but we shouldn't.
It pollutes our test code and doesn't provide any value. So work with simple values, we only
care that they get set in NgOnInit.

spyOn(service, 'getTodos').and.callFake(() => {
      return Observable.from([[
        {id: 1, title: 'One'},
        {id: 2, title: 'Two'},
        {id: 3, title: 'Three'},
      ]]);
    });


---Tutorial 10 - Interaction Testing---
In the last lecture we focused on the NgOnInit method, now lets focus on the Add
& Delete methods.


Add Method:
So the Add method is responsible for creating a ToDo item, calling the service & sending
new ToDo item, then in the event that completed updating the DOM list or display an error.
There are 3 test scenarios:
-ToDo is sent to Service
-After Add, the DOM is Updated.
-Failing the Add, an Error is returned.

  add() { 
    var newTodo = { title: '... ' };
    this.service.add(newTodo).subscribe(
      t => this.todos.push(t),
      err => this.message = err);
  }


Scenario 1 - Verify it makes Server Call:
So far scnenario 1 we just need to ensure that when we use add(), it calls the
add method in our service.
For the Mock we return empty, as we don't care about returning data.

  it('Should Sent Correct ToDo item to Server', () => {
    //Arrange
    let spy = spyOn(service, 'add').and.callFake(t => {
      return Observable.empty();
    });

    //Act
    component.add();

    //Assert
    expect(spy).toHaveBeenCalled();
  });


Scenario 2 - Verify it adds the Item returned from server, into DOM:
-Setup Mock to Return Array of 1 value.
-Verify a single item has been added to the ToDo list.

    it('Should Add Item returned from Server into the Todo List.', () => {
      //Arrange
      let todo = {id: 1};
      let spy = spyOn(service, 'add').and.returnValue(Observable.from([todo]));

      //Act
      component.add();
  
      //Assert
      
      expect(component.todos.length).toBe(1);
    });


Note:
Previously we did use CallFake, but if only return an Array, we can remove the function
in favour of returnValue, much cleaner!

      let spy = spyOn(service, 'add').and.callFake(t => {
        return Observable.from([todo]);
      });



Scenario 3 - Verify on Failure, we put that error in the Message property:
-So rather than return an Observeable Array, we return an Observeable error.
-We then verify the message in our component is the same Error.
     it('Should update the message property on failure from the service.', () => {
      //Arrange
      let error = 'error from the server';
      let spy = spyOn(service, 'add').and.returnValue(Observable.throw(error));

      //Act
      component.add();
  
      //Assert
      expect(component.message).toBe(error);
    });



---Tutorial 11 - Working with Confirmation Boxes:---
So finally we get to look at the last method in ToDos component, the delete function.
-Verify a Confirmation Box is raised.
-Verify Delete calls the delete method in our service.

  delete(id) {
    if (confirm('Are you sure?'))
      this.service.delete(id).subscribe();
  } 


Scenario 1 - Should Call Delete if user confirms:
This scenario requires a little more mocking, because we don't want to open
a window dialog, so we need to intercept this.
-Intercept window confirm
-Intercept Service
-Act, component.delete(todo)
-Assert same todo item was passed to mock using toHaveBeenCalledWith

      it('Should call the server to delete a todo item if user confirms', () => {
      //Arrange
      let todo = 1;
      spyOn(window, 'confirm').and.returnValue(true);
      let spy = spyOn(service, 'delete').and.returnValue(Observable.empty);

      //Act
      component.delete(todo)

      //Assert
      expect(spy).toHaveBeenCalledWith(todo);
    });


Scenario 2 - If User Cancel, should not Delete:
We can copy the setup from scenaro 1, however we need to change the window spy to 
return false.
-spyOn(window, 'confirm').and.returnValue(false);
-Assert expect(spy).not.toHaveBeenCalled();

    it('Should NOT call the server to delete a todo item if user cancels', () => {
      //Arrange
      let todo = 1;
      spyOn(window, 'confirm').and.returnValue(false);
      let spy = spyOn(service, 'delete').and.returnValue(Observable.empty);

      //Act
      component.delete(todo)

      //Assert
      expect(spy).not.toHaveBeenCalled();
    });


Take Home:
To work with Confirmation boxes, we intercept window component, confirm and return true
or false.
spyOn(window, 'confirm').and.returnValue(false);


---Tutorial 12 - Limitations of Unit Tests---
So in the section we looked at various patterns you're likely to come across, lets
do a quick recap.
-State Changes
-Forms
-Events(Ouput properties)
-Services

And they were fairly easy to unit test, however there are some limitations.
-Routers 
-Template Bindings - We cannot ensure wiring between template & component.

For both of these problems, it is because they require an Angular environment, where
Angular will compile template or routes, manage devDependencies etc, this is very
difficult to mock. We will cover more of this in the integration testing section.
