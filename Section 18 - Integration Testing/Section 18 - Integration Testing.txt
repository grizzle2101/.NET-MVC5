---Section 18 - Integration Testing---
---Tutorial 1 - Introduction:---
In the last section we learned how to unit test your Angular Components in isolation.
Unit tests are great for testing the logic of our components, but they have limitations
they cannot test the integration of a component with its template.
That is where Integration tests come into play.

In this section:
-Testing Templates
-Testing Navigation
-Testing Directives
-Dealing with Asynchronous operations.



---Tutorial 2 - The Setup Code---
So download the attached zip of the project to be tested & lets take a look at the setup.
As always to a npm install then ng build & test.


Note:
Had to remove the NavBarComponent as it is not included in solution for some reason.


Setting up Integration Test:
So for the component under test we normally new up the component in the beforeEach section.
Integration tests are a bit different, we need to let Angular create these components.

Task 1 - Setup TestBed:
So because we don't just create TypeScript Objects, instead we need angular compiled Objects
our setup is a little different.
Just like using NgModule, we have to setup the declarations.

import {TestBed, ComponentFixture} from '@angular/core/testing';

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [VoterComponent]
    });



Task 2 - Use TestBed:
So we now have access to the TestBed, we need to create a component & pass VoterComponent.
This is a wrapper on VoterComponent that gives us access to the compile time properties.
So the template and everything else, for real integration tests.

    TestBed.createComponent(VoterComponent);


Task 3 - Setup Component & Fixture:
Now that we have the TestBed setup, we can use them in our tests.

//Declare Variables
describe('VoterComponent', () => {
  let component: VoterComponent;
  let fixture: ComponentFixture<VoterComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [VoterComponent]
    });
    //Set Values:
    fixture = TestBed.createComponent(VoterComponent);
    component = fixture.componentInstance;
  });


Additional Fixtures Elements:
So now that we have access to the Fixture, we can begin to see some of the cool features.

fixture.nativeElement - Returns Root DOM element for component eg the compiled HTML.
fixture.debugElement - Allows us to Debug the Native DOM.


Take Home:
ComponentFixture is a wrapper on a component, through this we can access the component
instance, the nativeElement(compiled HTML DOM) and debug it.
We can also do the change tracking manually(seeing objects added & removed), and even
get the injected dependencies in the component.
This will come very useful for writing integration tests. In the next section we'll look
at how to auto generate this test code.


---Tutorial 3 - Generating the Setup Code:---
Okay so now that we know what the setup code looks like, we can use Angular to generate
this for us.

Task 1 - Generate Boiler Plate Code:
ng generate component greeter


Result:
So we can see the auto generated code looks very similar to our code, but with a few
differences.
-2 beforeEach blocks
-Compile Components gets the HTML template, this file system read can take a while
which is why it is done Asynchronously, see async keyword & imports.

describe('GreeterComponent', () => {
  let component: GreeterComponent;
  let fixture: ComponentFixture<GreeterComponent>;

  //Configure Testing Mdoule
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ GreeterComponent ]
    })
    .compileComponents(); //Compile Command gets the Components,
  }));

  //Create Component
  beforeEach(() => {
    fixture = TestBed.createComponent(GreeterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });


Async Wrapper:
Async is a angular utility for running functions Asynchronously, create a function
and point it to a code block to run and it does all the heavy lifting.


Note:
Compile components is not neccessary is most applications as Webpack does this for us.
Webpack is the default builder for Angular, and will bundle the components natively,
so if you're using Webpack, its already done for us.



Task 2 - Combine beforeEach:
So because we using webpack, we can Combine both before blocks into one & now our
code looks very like the original...
So we can keep the complex setup, or simplify if needs be.

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ GreeterComponent ]
    });

    fixture = TestBed.createComponent(GreeterComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });



---Tutorial 4 - Testing Property and Class Bindings---
So to get started writing our first intregration test, lets take a look at 1 - voter.
If we take a look at the voter component we will get a better idea of the things we 
should test.
-Class Bindings
-Property Bindings
-Style Bindings
-Event Bindings

Test 1 - Total Votes is Rendered Properly
Test 2 - If Upvoted, want to see the Style being applied
Test 3 - If I Upvote, should see the upvote method being called.


Test 1 - Total Votes is rendered properly:
So through the component, we can access the vote count & manipulate it.
To verify the value, we need to access the fixture & access to the root DOM element.
-Set otherVotes & myVote
-Query the fixture.debugElement for the Rendered Vote-Count CSS class.
-Because this is a Debug element(A wrapper on Native HTML/JavaScript) we need to 
 Access the HTML attribute to get the value.
-Expect the count to be 21.

  it('Should render total votes', () => {
    component.othersVote = 20;
    component.myVote = 1;

    let de = fixture.debugElement.query(By.css('.vote-count'))
    let el: HTMLElement = de.nativeElement;

    expect(el.innerText).toContain(21);
  });
});

Note:
We can use By.css or By.Directive if you have custom directives.
 fixture.debugElement.query(By.Directive(VoterComponent))



Test is Broken:
So we ran the test and appeared to get no value for VoteCount, what gives?
In the production envioronment Angular applies its change detection alghorithm, but
in this test mode it does not, so we have to manually turn that on.

fixture.detectChanges();


Test 2 - Pressing Vote Highlights Button:
So for the second test we just have to set myVote to 1, detect detectChanges
then ensure the highlighted style is applied.
-Check the rendered CSS class that should be applied eg .glyphicon-menu-up
-Access the debugElement for HTML properties for 'highlighted' and verify its true.

  it('Should Highlight the UpVote button if upvoted.', () => {
    component.myVote = 1;
    fixture.detectChanges();

    let de = fixture.debugElement.query(By.css('.glyphicon-menu-up'));

    expect(de.classes['highlighted']).toBeTruthy();
  });

Thats a wrap for the introduction to interaction tests, in the next tutorial we will
go over test 3, verifying when clicked it triggers the correct method.



---Tutorial 5 - Testing Event Bindings---
So now we want to write a test for the Event Binding we have on upVote.
We need to find the button in the DOM, click it and verrify the value of totalVotes is 1.

The Code:
So if we look at upVote we can see that it has some logic.
-Check if we voted already, else increment & emit event.

  upVote() {
    if (this.myVote == 1)
        return;

    this.myVote++;

    this.vote.emit({ myVote: this.myVote });
  }

Test 3 - Event Binding:
We previously created 3 unit tests for the internal logic in UpVote, so for the integration
we only want to check the Integration between the Button and our upVote method.

So by now the integration tests are starting follow a similar pattern.
We could expect the value in the Template to change, but we've already done that
so it would redundant.

-Select the Vote Button.
-Trigger Event Handler on button.
  As parameters, pass the event name eg click and any additional data as the 2nd param.
-Expect the totalVotes to be increments & voila.

  it('Should increment VoteCount if clicked', () => {
    let button = fixture.debugElement.query(By.css('.glypicon-menu-up'));

    //Pass the EventName & Additional Data, null as not needed for click.
    button.triggerEventHandler('click', null); 

    expect(component.totalVotes).toBe(1);
  });


How to Structure Unit & Integrations Tests:
This depends on the person, you can add Unit & Integration tests in the same spec file
generated by the CLI, but it is often cleaner so leave the generated spec file for
integration tests, then create something like voter.unit.spec.ts specifically
for unit tests.



---Tutorial 6 - Providing dependencies---
Sp now lets take a look at working with components that need dependencies.
Lets take a look at section 2 - todos, we can see the todo component injects the ToDo service
in via its constructor. In Unit tests we would just create the component, and pass
an instance of the service, in integration tests however we can't do this.


Task 1 - Add Todo Service Dependency:
So for use to configure Dependency injection, we need to add TodoService into providers.
-Import TodoService
-Add TodoService into providers;

 beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ TodosComponent ],
      providers: [TodoService]
    })
    .compileComponents();
  }));

  
  Problem:
  So after adding the TodoService we get an error No provider for HTTP, this is because
  our TodoService also has a depedency in Angular/http.

  Task 2 - Add HttpModule:
  In the imports section of our dependency injection setup, add HttpModule and voila test
  works no problem.
  
   beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [HttpModule],
      declarations: [ TodosComponent ],
      providers: [TodoService]
    })
    .compileComponents();
  }));




---Tutorial 7 - Getting the Dependencies---
So to back to TodosComponent and take a look at ngOnInit, we can see a few problems.
We wrote a unit test to make sure the Todos gets populated, but ngOnInit is an Angular
lifecycle hook, so we need to test the integration.


So to test this we need to a reference to our depedency the TodoService, and use a spy
to change the implementation of todos method.



Adding a Dependency:
Option 1 - Module Level:
So in order for access to access dependencies for testing purposes, we can add
the service to the providers array in app.module.
This App.Module will create a singleton of the service, to be shared with all
of the component that requires it.


  providers: [TodoService],
  bootstrap: [AppComponent]
})
export class AppModule { }

Usage:
Now to use the dependency we use TestBed.get method, but this only works with
dependencies listed in the App.module

  it('Should load todos from the server', () => {
    let service = TestBed.get(TodoService);
  });

 

Option 2 - Comopnent Level:
Another approach is to add the dependency into the Component metadata directly.
This means every component has its own instance to work with, however if we have multiple
instance of VoterComponent this is going to get out of control.

@Component({
  providers: [TodoService],
  selector: 'app-voter',
  templateUrl: './voter.component.html',
  styleUrls: ['./voter.component.css']
})
export class VoterComponent {
  @Input() othersVote = 0;
  @Input() myVote = 0;


Usage:
Now to access the dependencies in the component, we use the fixture.
 fixture.debugElement.injector.get(TodoService);

Note:
If you have multiple instances of this compoonent, you will also have multiple service
dependencies, so you really need a strong reason to do things this way.
In General the Module level is the best approach, just remember you're dealing with a
singleton.



The Test:
Now that we know how to get a reference to the service we can write the test.
-Get service from TestBed @ module level.
-SpyOn service, to mock the service.
-expect the value to be initalized to 3 onInit.

  it('Should load todos from the server', () => {
    let service = TestBed.get(TodoService);

    spyOn(service, 'getTodos').and.returnValue(Observable.from([1, 2, 3]));
    
    expect(component.todos.length).toBe(3);
  });
  

Problem:
The test fails because of out beforeEach setup blocks. We run fixture.detectChanges
which sets the service before we get a change to pass our mock.
Remove detectChanges from the Setup & move to the test itself.

  beforeEach(() => {
    fixture = TestBed.createComponent(TodosComponent);
    component = fixture.componentInstance;
    //fixture.detectChanges();
  });

Final Cleanup:
To make the test more clear, we can declare an array of values that we pass to the service
spy, then assert that the component.todos are initialized with ngOnInit and they match!

  it('Should load todos from the server', () => {
    let todoList = [1, 2, 3];
    let service = TestBed.get(TodoService);

    spyOn(service, 'getTodos').and.returnValue(Observable.from([todoList]));
    fixture.detectChanges();

    expect(component.todos).toBe(todoList);
  });


---Tutorial 8 - Providing Stubs---
So now to increase the difficulty a bit, we've going to test a component that uses a 
router for navigation.

The Code:
There are 2 ways to test this...
-An Interaction test to see the navigate method is called with the right data.
We also need another test to ensure the route is valid.

  save() { 
    this.router.navigate(['users']);
  }


Alternative Test:
Some developers will write an integration test to check the URL and make sure
the route is correct. This uses the actual Angular Route object, and so we are not
testing our code anymore but testing the Angular Framework itself.
And in general we do not test 3rd party libraries or language constructs.


Getting Started:
Before we write any code, if we run the tests we can see the error 'No provider for 
router'. So lets get started with sorting out the dependencies.

Option 1 - Use Real Router:
Again we could use a real router dependency, but as mentioned it can lead to many headaches.


Option 2 - Use a Fake Router:
A common strategy when using real dependencies becomes tricky is to create a stub,
or fake implementation.

Task 1 - Create a RouterStub:
If we look at the component under test, we can see the methods it needs from
the Router class, we can create dummy versions of this that do nothing.

class RouterStub {
  navigate(params) {

  }
}


Task 2 - Replace Depency with Stub:
      providers: [
        {provide: Router, useClass: RouterStub},



Task 3 - Activated Route Stub:
So if we take a look at the UserDetailsComponent we can see how it uses Activated Route
then we know what exactly we need to mock out.
-this.route.params subscribe - is a Generic Observable
-So we just mock this property as params, and voila we have a stub.

class ActivatedRouteStub {
  params: Observable<any>;
}

Now just like before, we need to tell Angular to replace the real ActivatedRoute with
our stub/dummy version.

      providers: [
        {provide: Router, useClass: RouterStub},
        {provide: ActivatedRoute, useClass: ActivatedRouteStub}
      ]


Test Fail:
So the test is failing saying our data is undefined, that is because we habe not set
the value in our stub.

class ActivatedRouteStub {
  params: Observable<any> = Observable.empty();
}

Take Home:
Testing the UserDetailsComponent requires some more overhead because it works
with routing. We have to create Stubs or dummy implementations of its dependencies
eg Router & ActivatedRoute.
Once we mock the methods required for UserDetailsComponent we use Angular providers
provide & useClass, to inject our stubs instead of the normal dependencies.

Now that we have the complex dependencies sorted out we can begin to write test.



---Tutorial 9 - Testing the Navigation---
So now that everything is setup, lets get the navigation.



Task 1 - Write a Test to Ensure we are reriected onSave:
-Get Router object from TestBed.
-Spy on the Navigate method in the Router Object(the Stub)
-Act, trigger Save.
-Assert that the spy was called, and with the 'users' route param.

  it('Should redirect User to the Users page after saving', () => {
    //Arrange
    let router = TestBed.get(Router);
    let spy = spyOn(router, 'navigate');

    //Act
    component.save();

    //Assert
    expect(spy).toHaveBeenCalledWith(['users']); //Users Page
  });

How to Ensure our test Works:
Its important to make sure we're testing the right thing, so comment out
this.router.navigate and fingers crossed the test fails.
This is how we know we're testing the right thing.



Task 2 - Write a Test to make sure the Route Exists:
So to test the route is valid, we have to take a look at app.routes.ts to see the
array of valid routes.

export const routes = [
  { path: 'users/:id', component: UserDetailsComponent },
  { path: 'users', component: UsersComponent },
  { path: 'todos', component: TodosComponent },
  { path: '', component: HomeComponent },
];

We can write a set of simple unit tests to make certain routes are valid.
A good practice is to have a app.routes.spec.ts to contain a test for every
route we plan on implmenting.
Make sure to organize them alphabetically so its easy to check for certain routes.

describe('routes', () => {
    it('should contain a route for /users', () => {
        expect(routes).toContain({path: 'users', component: UsersComponent})
    });
})

Again to make sure we're testing the right thing, comment out the users route
and make sure it fails.


Take Home:
Writing these sorts of tests is very useful to stop a critical bug from being released.
Imagine a breaking a save feature because you removed or put a typo in one of the routes.
All of this can be ran in a matter of seconds, so hopefully is shows you the value
of automated testing.