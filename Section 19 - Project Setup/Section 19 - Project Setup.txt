---Section 19 - Project Setup---
---Tutorial 1 - Introduction---
So in the next few sections we're going to build a ecommerce store for buying and selling
organic products using Angular, Firebase & BootStrap 4.
The site is going to be fully featured with:
-Product Selection
-Tabs of categories eg bread, juices etc.
-Shopping Cart(order management, billing & shipping form)
-Login with Authentication & Authorization(JWT)
-Admin Interface for product management
    -CRUD for products
    -DataTable w Search, Sorting & Pagination
    -Upload product & images



---Tutorial 2 - Source Code---
Lets take a look at the project source code in github.
https://github.com/mosh-hamedani/organic-shop

Note:
The project was setup with Moshs firebase account which has since been deleted.
We need to change the environment.ts to match our Firebase account.
-Upgraded Angular version to Angular/CLI
-Changed config to match my firebase
-Probabaly is some database migrations to run to get the neccessary setup.


---Tutorial 3 - Challenge---
Setup the basic project to reinforce some of the earlier learning concepts.

-Create new Application
-Add BootStrap to application
-Create a Navigation Bar with 2 links, Shopping Cart & Username dropdown
-Shopping cart brings us to the shoping cart page.
-Username is a dropdown with my orders, manage orders, manage products & log out
    -hint lookup ng-BootStrap 3rd party library for building
-deploy application to Firebase


---Tutorial 4 - Creating a New Project---

Task 1 - Create Project:
-ng new oshop
ng serve - make sure it runs.


Task 2 - Setup Firebase:
Login to Firebase, create new project oshop
https://console.firebase.google.com/


-On the Website click Add Firebase to your web app
Gives us the following Code.
<script src="https://www.gstatic.com/firebasejs/5.7.0/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyBFZMLt3-XkOtFIBs0uSnBMpuqmfwQtg6Y",
    authDomain: "oshop-73f57.firebaseapp.com",
    databaseURL: "https://oshop-73f57.firebaseio.com",
    projectId: "oshop-73f57",
    storageBucket: "oshop-73f57.appspot.com",
    messagingSenderId: "148438516618"
  };
  firebase.initializeApp(config);
</script>


-Add Credentials to environment.ts
We just need to create a config object called firebase and add the config here.
-Do the same for environment.prod.ts
export const environment = {
  production: false,
  firebase: {
    apiKey: "AIzaSyBFZMLt3-XkOtFIBs0uSnBMpuqmfwQtg6Y",
    authDomain: "oshop-73f57.firebaseapp.com",
    databaseURL: "https://oshop-73f57.firebaseio.com",
    projectId: "oshop-73f57",
    storageBucket: "oshop-73f57.appspot.com",
    messagingSenderId: "148438516618"
  }
};


Task 3 - Installing Node Packages:
-Install firebase and angularfire2
npm i --save firebase@4.2.0 angularfire2@4.0.0-rc.1


Task 4 - Setup App.module:
-Add the various Modules into the Imports section in app.module.
-import environment so we can use the firebase configuration object.

import {environment} from './../environments/environment';
import {AngularFireModule} from 'angularfire2';
import {AngularFireDatabaseModule} from 'angularfire2/database';
import {AngularFireAuthModule} from 'angularfire2/auth';


  imports: [
    BrowserModule,
    AngularFireModule.initializeApp(environment.firebase),
    AngularFireDatabaseModule,
    AngularFireAuthModule
  ],


Note:
Had a few issues with the compatability between RXJS and the firebase module we imported.
So i downgraded RXJS in packagage.json, did a NPM Install then added
(window as any).global = window; into polyfil.ts, application is now running.
Should be much easier when we work with the newsest versions.


---Tutorial 5 - Installing BootStrap 4---

Task 1 - Install BootStrap:
npm i --save bootstrap

Task 2 - Import Styles:
@import '~bootstrap/dist/css/bootstrap.css';

Task 3 - Add BootStrap NavBar:
Lets get started by adding a nice boostrap template.
-View the Source & copy into app.component.html
https://getbootstrap.com/docs/4.1/examples/starter-template/

-Fix the Body styling with some padding in style.css
body {padding-top: 100px;}

-Change from Dark Theme to Light Theme.
<nav class="navbar navbar-expand-md navbar-light bg-light fixed-top">



---Tutorial 6 - Extracting NavBar Component:---
Currently we have all code in the app.component.hthml, we should really extract this
to its own component.

Task 1 - Extract NavBar:
-Generate the NavBar component
ng g c bs-navbar

-Copy the NavBar part into its own template
-use the selector bs-NavBar in app.component.html







---Tutorial 7 - Defining the Routes---


Task 1 - Generate Components:
So we need to generate the various pages that are going to make up the application.
Public Area:
-home
-products
-shopping-cart
-check-out
-order-success
-my-orders
-login

Admin Interface:
-admin/admin-products
-admin/admin-orders


Task 2 - Register Routes:
-Import RouterModule
import {RouterModule} from '@angular/router';

-Create the various routes
-In a later section we will extract these to their own file.
    RouterModule.forRoot([
      {path:'', component: HomeComponent},
      {path:'products', component: ProductsComponent},
      {path:'shopping-cart', component: ShoppingCartComponent},
      {path:'check-out', component: CheckOutComponent},
      {path:'order-success', component: OrderSuccessComponent},
      {path:'login', component: LoginComponent},
      {path:'admin/products', component: AdminProductsComponent},
      {path:'admin/orders', component: AdminOrdersComponent}
  ])


Task 3 - Create Router Outlet:
-Before we can add routes, we need a router outlet.

<main role="main" class="container">
  <router-outlet></router-outlet>
</main><!-- /.container -->


Task 4 - Rework NavBar with some links:
So lets make sure the navigation is working by adding some links.

    <ul class="navbar-nav mr-auto">
      <li class="nav-item active">
        <a class="nav-link" routerLink="/">Home <span class="sr-only">(current)</span></a>
      </li>
      <li class="nav-item">
        <a class="nav-link" routerLink="/shopping-cart">Shopping Cart</a>
      </li>
      <li class=


Note:
Versioning Fix, to deal with the many compatability issues with RXJS, Angular & Firebase, I downgraded
to the exact version Mosh is using at the time of recording, before running this project run

npm install @angular/cli@1.2.4 -g



---Tutorial 8 - Adding a Dropdown Menu---

Task 1 - Rework HTML:
So lets begin by cleaning up the HTML.
-Remove links to example.com



Note:
If we add the class show to the bootstrap menu we can trigger the dropdown.
<li class="nav-item dropdown show">
<div class="dropdown-menu show" aria-labelledby="dropdown01">

So we want to dynamically add the class 'show' into our boostrap class, then this
will allow the dropdown menu to work.
However Bootstrap by default uses JQuery to make these animations works, and the whole
reason we use Angular is to simplify DOM control, so we need another solution.
There are 2 ways to go about this, either we create a custom directive to do this
action for us, or we use an existing libraru like ngbootstrap.


Task 2 - Install ngbootstrap:
So Angular has its own library for working with bootstrap. May require some messing,
as the versions of Bootstrap and ng-boostrap are quite far behind.
-npm install --save @ng-bootstrap/ng-bootstrap
Used a earlier version, builds w Warnings.
-npm install --save @ng-bootstrap/ng-bootstrap@2.0.0
-Add ngbootstrap into app.module.

  imports: [
    BrowserModule,
    AngularFireModule.initializeApp(environment.firebase),
    AngularFireDatabaseModule,
    AngularFireAuthModule,
    NgbModule.forRoot(),


Task 3 - Use NgbModule:
So now that we have it installed, we can use the directives to dynamically serve
the dropdown menu.
-ngbDropdown - Container for the Menu
-ngbDropdownToggle - The Link the toggles the Menu.
-ngbDropdownMenu - the Menu Items
      <li ngbDropdown  class="nav-item dropdown">
        <a ngbDropdownToggle class="nav-link dropdown-toggle" href="#" id="dropdown01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Dropdown</a>
        <div ngbDropdownMenu class="dropdown-menu" aria-labelledby="dropdown01">


Result:
We have a working dropdown menu!


---Tutorial 9 - Cleaning up the NavBar:---
So finally we're going to personalize the Menu to the application.

Task 1 - Rework Menu:
-Username placeholder - To be generated from Login Details & JWT.
-MyOrders
-Admin links
  -Manage Products
  -Manage Orders
-Log Out
-Remove Search form
-Rename NavBar

      <li ngbDropdown  class="nav-item dropdown">
        <a ngbDropdownToggle class="nav-link dropdown-toggle" href="#" id="dropdown01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Username</a>
        <div ngbDropdownMenu class="dropdown-menu" aria-labelledby="dropdown01">
          <a class="dropdown-item" routerLink="my/orders">My Orders</a>
          <a class="dropdown-item" routerLink="admin/orders">Manage Orders</a>
          <a class="dropdown-item" routerLink="admin/products">Manage Products</a>
          <a class="dropdown-item">Log Out</a>
        </div>
      </li>
    </ul>


---Tutorial 10 - Fixing a Few Minor Issues:---
So lets just fix the remaining issues we can see with the application so far.

Problem 1:
Earlier on we added a Route to the Dropdown of #, this causes a few problems if we 
navigate to a page, then look for options in the dropdown, we are automatically
routed to #. Not a great user experience.

Solution:
Remove This.
 <a ngbDropdownToggle class="nav-link dropdown-toggle" href="#"


Problem 2:
So when we click on the Dropdown, id actually like to be clickable.

Solutions:
Add some CSS.
.dropdown-toggle {
    cursor: pointer;
}


Problem 3:
Our Store name should redirect to root.

Solution:
Just at a routerlink to the website root. We also don't need the Home link now as we
have this link,=.
 <a class="navbar-brand" routerLink="/">OShop</a>


 Problem 4:
 We don't have a route to my/orders

Solution:
Add the correct route.
 {path:'my/orders', component: MyOrdersComponent}

We're finally finished with the seutp, lets go deploy this to firebase.