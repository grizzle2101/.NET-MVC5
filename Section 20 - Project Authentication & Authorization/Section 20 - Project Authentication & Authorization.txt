---Section 20 - Project: Authentication & Authorization---
---Tutorial 1 - Introduction:---
In this section we're going to implment the login page, using Google OAuth.
We then need to store this information & show/hide the various routes/pages.


---Tutorial 2 - Implementing Google Login:---


Task 1 - Setup Authentication on Firebase:
So we have the Authentication Tab which has a section for Authentication providers,
Email password & Google.
-Enable Google Authentication


Task 2 - Add Login Link:
        <li class="nav-item">
          <a class="nav-link" routerLink="/login">Login</a>
        </li>


Task 3 - Setup Login Page:
-Add Button
<button
  (click)="login()"
  class="btn btn-primary">
  Login with Google
</button>


-Add OnClick Event:
At the time of recording firebase AngularFire has limited support for Authentication,
so in some cases we're going to work directly with firebase objects.
-Import all Firebase objects(will rework later)
-Take in AngularFireAuth via constructor
-Finally use Auth.signInWithRedirect and pass the Google provider.(will refactor this
design later, we should using dependency injection here.)

import * as firebase from 'firebase';
  constructor(private afAuth: AngularFireAuth) {}

  login()
  {
    this.afAuth.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider());
  }

Note:
firebase.auth contains many more providers we will support futher down the line.



---Tutorial 3 - Implementing the Logout:---
So now that Login is working, we need to Logout.

Task 1 - Rework HTML:
-Add OnClick Event to Logout.
      <a class="dropdown-item" (click)="logout()">Log Out</a>


Task 2 - Implment Logout in Component:

  logout() {
    this.afAuth.auth.signOut();
  }


Problem:
Although the method works, we get no response to know if it actually worked or not.
 

Solution:
We have the AuthState Observeable in AFAuth, we can subscrbe to this and display the 
current state to make sure we've logged out successfully.

  constructor(private afAuth: AngularFireAuth) { 
    afAuth.authState.subscribe( x => console.log("Status: ", x));
  }



---Tutorial 4 - Displaying the Current User:---
So now that we have data coming back from the firebase OAuth service, we can show/hide
and display the users details.


Task 1 - Add User Variable:
So we know from the last lecture we can subscrbe to the authState and get the user.
Lets assign that to a variable.

  user: firebase.User;

  constructor(private afAuth: AngularFireAuth) { 
    afAuth.authState.subscribe( user => this.user = user);
  }


Task 2 - Hide/Show Elements:
Now what we have acces the User details, we can show/hide elements.
-Show Login if we have not already logged in.
-Only show dropdown menu if logged in.
-Finally if logged in, use the displayName

        <li *ngIf="!user" class="nav-item">
          <a class="nav-link" routerLink="/login">Login</a>
        </li>
        <li ngbDropdown *ngIf="user" class="nav-item dropdown">
          <a ngbDropdownToggle class="nav-link dropdown-toggle" id="dropdown01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            {{user.displayName}}
          </a>



---Tutorial 5 - Using the Asnc Pipe:---
So there is a problem with the current implmention of AuthService. We should ALWAYS
unsubscribe from an Observable.
We have 2 methods for going about this, we can implment onDestroy then unsubscribe.
OR the better option to use the Async Pipe.


Task 1 - Rework Component:
Set User to Observable, to use the Aysnc pipe we need to make the user$ an observable.
  user$: Observable<firebase.User>

  constructor(private afAuth: AngularFireAuth) { 
    this.user$ = afAuth.authState;
  }

Task 2 - Use Async Pipe:
Now that user$ is an Observable, we can set a template variable as the async value.
-If there is no value, we set it to anonymousUser which renders the Login tab.

         <!--Only Render Login if Anonymous User-->
        <ng-template #anonymousUser>
            <li class="nav-item">
              <a class="nav-link" routerLink="/login">Login</a>
            </li>
        </ng-template>

        <!--Get User Data Async-->
        <li ngbDropdown *ngIf="user$ | async as user; else anonymousUser" class="nav-item dropdown">
          <a ngbDropdownToggle class="nav-link dropdown-toggle" id="dropdown01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            {{user.displayName}}
          </a>


---Tutorial 6 - Extracting a Service:---
So by now you've noticed the coupling in our NavBar Authentication, we should seperate the Authentication
into its own service. We would do this for 2 main reasons
-Testability
-Seperation of Concerns


The components themselves should not be responsible for Login & Logout, this should be a call to an
external service, that hides the implmentation from our components. Today we're using,
tomorrow we could be using soemthing else, lets encapsulate Authentication so we only have one place
to change this.


Task 1 - Generate a New Service:
ng g s auth



Task 2 - Add Reference in Providers:
Don't forget dependency injection.
  providers: [
    AuthService
  ],



Task 3 - Extract Service:
So we need to extract Login & Logout, then use this AuthService class in our components.

export class AuthService {
  constructor(private afAuth: AngularFireAuth) { }

  login() {
    this.afAuth.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider());
  }

  logout() {
    console.log("Logging Out...");
    this.afAuth.auth.signOut();
  }
}

Task 4 - Expose AuthState Observeable:
So in the NavBar constructor we use the AuthState to show/hide elements. We need to expose an Observeable
in our AuthService, so this functionality still works.
Variables used in Templates should be public. AOT compilation requires it.

  constructor(public afAuth: AngularFireAuth) {
        this.user$ = afAuth.authState;
  }

Note:
By Using Observable<firebase.user> we are leaking the implmentation detail to the outside world.
A seasoned programmer would say this is a bad practive, and we should be wrapping this to a public
friendly class like a DTO.


Last Step:
Finally now we've extracted the service, clean up all the unneccessary imports in NavBar & Login.



---Tutorial 7 - Protecting Routes:---
So we have a mix of pages, that require protection. Some should be viewable annoymously,
where as others need to be logged in as users, others as Admin.


Task 1 - Generate AuthGuard:
-Generate Service:
ng g s auth-guard

-Add Service into Providers:
  providers: [
    AuthService,
    AuthGuard
  ],


Task 2 - Implment AuthGuard:
-Get Authentication State
-Get Router
-Implement canActivate
-If we have User allow access, else redirect.

export class AuthGuard {
  constructor(private auth: AuthService, private router: Router) {}

  canActivate() {
    return this.auth.user$.subscribe(user => {
      if(user) return true;

      this.router.navigate(['/login']);
      return false;
    });
  }
}


Task 3 - Add AuthGuard to Route:
Now that we have the AuthGuard setup, we can add this to the various routes.
-Protect a route with property canActivate: [AuthGuard]

    RouterModule.forRoot([
      {path:'', component: HomeComponent},
      {path:'my/orders', component: MyOrdersComponent, canActivate: [AuthGuard]},
      {path:'products', component: ProductsComponent},
      {path:'shopping-cart', component: ShoppingCartComponent},
      {path:'check-out', component: CheckOutComponent, canActivate: [AuthGuard]},
      {path:'order-success', component: OrderSuccessComponent, canActivate: [AuthGuard]},
      {path:'login', component: LoginComponent},
      {path:'admin/products', component: AdminProductsComponent, canActivate: [AuthGuard]},
      {path:'admin/orders', component: AdminOrdersComponent, canActivate: [AuthGuard]},
  ])


In the next section we'll look at redirecting after a successful login. Later we will also
look at checking for various roles eg User & Admin.


---Tutorial 8 - Redirect the Users after login:---
Okay now that we have the RouteGuard working, we need to fix a couple things.

Scenario 1 - On Login:
If we've logged in, we should not get directed back to Homepage.

Scenario 2 - Page needs Authorization:
When we go to page that requires Authorization we are redirected to Login, but we 
never get redirect back to the original page.

TaskList:
So to summarize this section we need to:
-Add ReturnURL when forced to Login.
-Save this Return URL in localStorage.
-Navigate to Return URL once Authenticated.

BugFix:
There was a problem from the previous section, with my lack of understanding on RXJS &
Observables, I was working with the User Observable, when AuthGuard needs a Boolean
to grant access to pages, so pages wouldn't Authenticate correctly.

 canActivate() {
    return this.auth.user$.pipe(map(user => {
      if(user) { return true };
      this.router.navigate(['/login']);
      console.log("No User, Redirecting");
      return false;
    }));
  }


Task 1 - Add Return URL:
We need to add a Return URL to Router Navigate.
 if(user) { return true };
      this.router.navigate(['/login']);
      return false;

Result:
So now we can see the Additional Query Params in our URL.
http://localhost:4200/login?returnUrl=%2Fcheck-out



Task 2 - Save Return URL:
Before sending the User to Google, lets save the returnURl using the
ActivatedRoute snapshot details.
-queryParamMap.get('returnUrl')
-localStorage.setItem('returnUrl', returnUrl);

  login() {
    let returnUrl = this.route.snapshot.queryParamMap.get('returnUrl') || '/';
    localStorage.setItem('returnUrl', returnUrl);
    this.afAuth.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider());
  }

Task 3 - Check User Authetnication @ AppComponent:
So now that we have the setup, on initialization of the project, we need to check
if we have a User, then if we do check the returnURL.

  constructor(private auth: AuthService, router: Router) {
    auth.user$.subscribe(user => {
      if(user) {
        let returnUrl = localStorage.getItem('returnUrl');
        console.log('Getting Value from Storage: ', returnUrl);
        router.navigateByUrl(returnUrl);
      }
    })
  }


Note:
This approach seems to be a bit messy because at the time of recording Google did not
send the ReturnURL back when you Authenticated, but this is no longer the case.
And the Firebase Authentication Promise object does not work, should be able to add
.THEN to the the Firebase Authentication, and redirect there. No need to store or 
add anything into app component.

this.afAuth.auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider());


BugFix:
Could not navigate to any other page expcept returnURL, need to remove from storage,
and add this check to app component.
if(user && returnUrl != null) {
        router.navigateByUrl(returnUrl);
        localStorage.clear();
      }


---Tutorial 9 - Storing Users in Database:---
Okay so we've implmented Authentication, now lets implment Authorization. By that I mean checking
a users permissions like Admin or User.
Firebase does not provide Authorization, it only stores them as Authenticated users, for this
we need to store a role in the database.


Task 1 - Create Firebase Service:
For better seperation of concerns, everything to do with Firebase should be encapsulated in a service.
-ng g s user
-register Service as provider


Task 2 - Implement Save:
In the newly generated Service, inject the AngularFireDatabase and implement Save.
Firebase makes it really easy to update data using db object.

export class UserService {
  //Inject Angular Database
  constructor(private db: AngularFireDatabase) { }

  //Mosh Way
  Save(user: firebase.User) {
    this.db.object('/users' + user.uid).update({
      name: user.displayName,
      email: user.email
    });
  }


Task 3 - Use Service:
So in the AppComponent where we check if the User is valid, we can call userService.save().

constructor(private auth: AuthService, router: Router, private userService: UserService) {
    auth.user$.subscribe(user => {
      let returnUrl = localStorage.getItem('returnUrl');
      console.log('Getting Value from Storage: ', returnUrl);

      if(user && returnUrl != null) {
        //Saving User
        userService.Save(user);
        
        router.navigateByUrl(returnUrl);
        localStorage.clear();
      }
    })


Note:
This implmentation is a bit off, we are going to Save the User into the Database each time they login.
This is because we don't not have a registration mechanism at the moment, it is all done through google.
We may later implment a registation page, which would be a better place for this.

If is also possible they update their details on the OAuth provider, and this way we are sure
to get the most up to date value each time.

Few small errors with my databse, make sure to disable security.



---Tutorial 10 - Defining the Roles:---
So now that we have users, we want to give them 1 or more roles.
There are several different approaches to this problem, we will go over the pros and cons for each.


Method 1 - IsAdmin Property:
We could add another column in our Users table like 'isAdmin'.

Problem:
This does not scale well, as we have more roles like 'isStoreManager' we have to keep updating the
database. Managing all this will not be simple.


Method 2 - Create a Roles Node/Table:
We could create another node/table to store the various roles for a given user.
This approach is much more scaleable, for each role we create a new table/node
and then we're ready to go.

roles
    -Admins
        -UniqueId1 : true
    -StoreManagers
        --UniqueId1 : true


Method 3 - Operations:
In some complex domains we might have checks for isAdmin & isStoreManager, but this might not scale
when we have lots of opertions we want to resstrict. In that case it could be better to store
this as operations, then the Action & users authorized to run that action.
operations
    -Create-Products
        -UniqueId1 : true


Which is Best?
In software engineering there is no BEST solution, as each of these has trade offs. The more flexible
we make it the less time we spend delivering value to the customer.
For the purpose of this application, we only need an AdminRole, so appracoh 1 the isAdmin property
is best for us.


Task 1 - Add IsAdmin Property in Firebase:
Add Value to existing user (me)
isAdmin : true


Note:
In the future we would write a script to seed the database with the initial User & Admins.
For now lets do it manually and move on to the next section protecting admin routes.