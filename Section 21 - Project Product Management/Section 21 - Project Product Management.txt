---Section 21 - Project: Product Management---
---Tutorial 1 - Introduction:---
In this section we're going to build out the Proudct Managment Page, for doing CRUD
operations on the Product catalog, as well as searching, sorting, pagination & limit
results(part of Angular 4 DataTable)


Assignment 1 - Product Table:
The Structure of the Table should be as follows.
NO  -   Title   -   Price   -   Edit
1       Orange      $2          Edit


Assignment 2 - Edit Page:
On clicking Edit on a particular item, the user is directed to a page with
the detailed product information.
-Title
-Price
-Category
-Image URL
-Save & Delete Buttons
-Preview Card for the Item Details & Image.


---Tutorial 2 - Building a BootStrap Form:---

Task 1 - Create Admin Product Form:
ng g c admin/product-form


Task 2 - Create Link to Product Form:
<a routerLink="/admin/products/new" class="btn btn-primary">New Product</a>

Task 3 - Create Route for New Page:
 {path:'admin/products/new', component: ProductFormComponent, canActivate: [AuthGuard, AdminAuthGuard]},


Test:
Make sure the Navigation to this page works as designed.


Task 4 - Create BootStrap Form:
Create the Basic BootStrap form with the Various Data Title, Price, Category & ImageUrl.

  <div class="form-group">
    <label for="category">Category</label>
    <select id="category"class="form-control">
      <option value=""></option>
    </select>
  </div>

  <div class="form-group">
      <label for="imageUrl">Image URL</label>
      <input id="imageUrl" type="text" class="form-control">
  </div>

  <button class="btn btn-primary">Save</button>
</form>


Task 5 - Prefix Price:
With BootStrap forms its possible to add a Prefix so we know we're always dealing with
dollars.

    <div class="form-group">
      <label for="price">Price</label>
      <div class="input-group-prepend">
        <span class="input-group-text">$</span>
        <input id="price" type="number" class="form-control">
      </div>
    </div>

Note:
BootStrap has changed since recording, had to improvise.

Result:
We now have a basic bootstrap form for adding new products, and the navigation setup
for admins to access it.



---Tutorial 3 - Populating Categories DropDown List:---
So now that we have the form setup, we need to populate the Categories dropdown.
We have 2 ways to go about this, the first being adding a node in Firebase, populate
and read.
Another solution is to create a page for admins to add/remove categories. Again this
depends on the needs of the customer, but in this case the list of Categories is fairly
stable and unlikely to change, so adding a page might be overkill, lets still with Firebase.

Top Tip:
Focus on what is mandatory for your first version, remeber your job is to bring value
to the customer.


Task 1 - Populate Categories in Firebase:
Foreach category we want a identifer and a name. But to make this Search Engine
friendly, we want to use the category name.
-In Firebase create categories node like so
-The first value being the URL & lookup, the innervalue being what is displayed.

-categories
    -bread
        -Bread

-Do the same setup for fruits, dairy, vegetables & seasonings


Note:
With this approach, we can easily add new features like featured, by adding this property
to a node, we can display trending ones on our homepage.



Task 2 - Create a Service:
Anytime we want to work with the backend, we want to create a service.
-ng g s category
-register as provider in AppModule
-Create getCategories

export class CategoryService {

  constructor(private db: AngularFireDatabase) { }

  getCategories() {
    return this.db.list('/categories');
  }
}


Task 3 - Use Category Service:
In out ProductFormComponent we can use the Category service & expose the Observeable
to our template.

export class ProductFormComponent implements OnInit {
  categories$;

  constructor(categoryService: CategoryService) {
    this.categories$ = categoryService.getCategories();
   }

  ngOnInit() {}
}


Task 4 - Unwrap Observeable in Template:
Using the Async Operator we can unwrap Observeable and display the categories data.

  <div class="form-group">
    <label for="category">Category</label>
    <select id="category"class="form-control">
      <option value=""></option>
      <option *ngFor="let c of categories$ | async" [value]="c.name">{{c.name}}</option>
    </select>
  </div>

Note:
To use Async pipe, must use valuesChanges in either the Service or Component, its
implmentation has changed a lot since.

Result:
We should now have the Categories being displayed in the Product Page.


Task 5 - Order Alpabetically:
The Categories data is not being returned alphabetically, so we need to order the data
in our service.
-pass second parameter to db.list to order by.
-for a complete list of orderings, see the AngularFire documentation.
  getCategories(): AngularFireList<any> {
    return this.db.list('/categories', x => x.orderByChild('name'));
  }


---Tutorial 4 - Saving Product to Database:---
So now the Form is complete lets get working on saving to the database. Lets assume for
now that the data is correct, we'll work on validation later.


Task 1 - Create Form/FormControl Objects
We have to create a form control object for each input element.
-add ngModel & name to create form control object.

 <input ngModel name="title" id="title" type="text" class="form-control">
-Do this for each of the inputs in our form.
-Add ngSubmit to Form, bind to save method in Component.
-add a Template variable f for the form data.

<form #f="ngform" (ngSubmit)="save(f.value)">

Task 2 - Import Forms Module:
Now that we're using ngModel, we need to import the FormsModule.
  imports: [
    BrowserModule,
    FormsModule,

Task 3 - Create ProductService:
-ng g s product
-register as provider
-Implement CreateProduct
-use push to add items to the products node

export class ProductService {
  constructor(private db: AngularFireDatabase) { }

  createProduct(product) {
    this.db.list('/products').push(product);
  }
}


Task 4 - Implment Save:
We now just use the service & pass our form object & voila.
  save(product) {
    console.log("Product: ", product);
    this.productService.createProduct(product);
  }


Result:
We can now save products in the Database.



---Tutorial 5 - Implmenting Validation:---
So we want to add a mix of generic & custom validation to our form, lets start
by making all fields required.


Task 1 - Add Required Validation to Input:
Lets do this ssing the Template Driven method, eg HTML 5 validation.
Lets start by adding a Template variable to store ngModel.
 
 <input #title="ngModel" name="title" id="title" type="text" class="form-control" required>

-Add Required
-add Template variable for form control object.
-Add Alert box with validation error.
-Hide Alert box until form control object in use.

    <div class="alert alert-danger" *ngIf="title.touched && title.invalid">
      Title is Required!
    </div>

    <div class="form-group">
      <label for="title">Title</label>
      <input #title="ngModel" ngModel name="title" id="title" type="text" class="form-control" required>
    </div>


In the next lecture we're going to add some more complex validation.



---Tutorial 6 - Adding Custom Validation:---
So we have 2 custom validations we want to make, the first being price is a positive
whole number, and the 2nd being that the ImageURl format is valid.
As mentioned before at the time of recording angular does not support url validation, so
we're going to use a another library called ng2-validation

Task 1 - Install ng2-validation:
-npm i ng2-validation --save
-add in AppModule
import {CustomFormsModule} from 'ng2-validation';

-Add in Imports
  imports: [
    BrowserModule,
    FormsModule,
    CustomFormsModule,




We can now use the MIN method with property binding, and set it to 0.
id="price" type="number" class="form-control" required [min]="0"


Task 3 - Extend Alert Box:
Now that we have multiple errors, we need to extend the alert box.

    <div class="alert alert-danger" *ngIf="price.touched && price.invalid">
      <div *ngIf="price.errors.required">Price is Required!</div>
      <div *ngIf="price.errors.min">Price should be 0 or Higher!</div>
    </div>


Task 4 - Implment URL Validation:
Finally we get to use the NG2-Validtion directives and see what it can do.
-url Directive for validating URLs

id="imageUrl" type="text" class="form-control" required url>

-Again Extend the Alert Box:
    <div class="alert alert-danger" *ngIf="imageUrl.touched && imageUrl.invalid">
        <div *ngIf="imageUrl.errors.required"> Image URL is Required!</div>
        <div *ngIf="imageUrl.errors.url">That Image URL is NOT valid!</div>  
    </div>


So in summary we didn't really have to create the Custom Validators for scratch,
instead used built in directives from ng2-validtion to validate urls, pretty cool!


---Tutorial 7 - Adding a BootStrap Card:---
In this section we're going to break up the New Product form and add a bootstrap card
to preview the products before submitting.


Task 1 - Divide Product Page:
With BootStrap everything is divided into a grid totalling 12 columns, this is why MD 6
is half the page.
We can put all the form markup in one half, then our bootstrap card in the other half.

<div class="row">
  <div class="col-md-6">
  </div>


Task 2 - Add BootStrap Card:
So if we checkout https://getbootstrap.com/docs/4.0/components/card/
We can steal the markup here for rendering a nice card.

  <div class="col-md-6">
      <div class="card">
          <img class="card-img-top" src="..." alt="Card image cap">
          <div class="card-body">
            <h5 class="card-title">Card title</h5>
            <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
            <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
          </div>
        </div>
  </div>


Task 3 - Inject Template Variables:
So now we can inject the ngModel template variables we declared earlier.
-Apply USD currency using currency:'USD':true
-true meaning display $

  <div class="col-md-6">
      <div class="card">
          <img class="card-img-top" [src]="imageUrl.value">
          <div class="card-body">
            <h5 class="card-title">{{title.value}}</h5>
            <p class="card-text">{{price.value | currency:'USD':true}}</p>
          </div>
        </div>
  </div>


Task 4 - Redirect On Save:
So now that we can create the Object, we need to redirect once the deed is done.
-router.navigate
  save(product) {
    console.log("Product: ", product);
    this.productService.createProduct(product);
    this.router.navigate(['admin/products']);
  }

In this next section we'll continue on from here and build on the Product List page.