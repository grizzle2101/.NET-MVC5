---Section 21 - Project: Product Management---
---Tutorial 1 - Introduction:---
In this section we're going to build out the Proudct Managment Page, for doing CRUD
operations on the Product catalog, as well as searching, sorting, pagination & limit
results(part of Angular 4 DataTable)


Assignment 1 - Product Table:
The Structure of the Table should be as follows.
NO  -   Title   -   Price   -   Edit
1       Orange      $2          Edit


Assignment 2 - Edit Page:
On clicking Edit on a particular item, the user is directed to a page with
the detailed product information.
-Title
-Price
-Category
-Image URL
-Save & Delete Buttons
-Preview Card for the Item Details & Image.


---Tutorial 2 - Building a BootStrap Form:---

Task 1 - Create Admin Product Form:
ng g c admin/product-form


Task 2 - Create Link to Product Form:
<a routerLink="/admin/products/new" class="btn btn-primary">New Product</a>

Task 3 - Create Route for New Page:
 {path:'admin/products/new', component: ProductFormComponent, canActivate: [AuthGuard, AdminAuthGuard]},


Test:
Make sure the Navigation to this page works as designed.


Task 4 - Create BootStrap Form:
Create the Basic BootStrap form with the Various Data Title, Price, Category & ImageUrl.

  <div class="form-group">
    <label for="category">Category</label>
    <select id="category"class="form-control">
      <option value=""></option>
    </select>
  </div>

  <div class="form-group">
      <label for="imageUrl">Image URL</label>
      <input id="imageUrl" type="text" class="form-control">
  </div>

  <button class="btn btn-primary">Save</button>
</form>


Task 5 - Prefix Price:
With BootStrap forms its possible to add a Prefix so we know we're always dealing with
dollars.

    <div class="form-group">
      <label for="price">Price</label>
      <div class="input-group-prepend">
        <span class="input-group-text">$</span>
        <input id="price" type="number" class="form-control">
      </div>
    </div>

Note:
BootStrap has changed since recording, had to improvise.

Result:
We now have a basic bootstrap form for adding new products, and the navigation setup
for admins to access it.



---Tutorial 3 - Populating Categories DropDown List:---
So now that we have the form setup, we need to populate the Categories dropdown.
We have 2 ways to go about this, the first being adding a node in Firebase, populate
and read.
Another solution is to create a page for admins to add/remove categories. Again this
depends on the needs of the customer, but in this case the list of Categories is fairly
stable and unlikely to change, so adding a page might be overkill, lets still with Firebase.

Top Tip:
Focus on what is mandatory for your first version, remeber your job is to bring value
to the customer.


Task 1 - Populate Categories in Firebase:
Foreach category we want a identifer and a name. But to make this Search Engine
friendly, we want to use the category name.
-In Firebase create categories node like so
-The first value being the URL & lookup, the innervalue being what is displayed.

-categories
    -bread
        -Bread

-Do the same setup for fruits, dairy, vegetables & seasonings


Note:
With this approach, we can easily add new features like featured, by adding this property
to a node, we can display trending ones on our homepage.



Task 2 - Create a Service:
Anytime we want to work with the backend, we want to create a service.
-ng g s category
-register as provider in AppModule
-Create getCategories

export class CategoryService {

  constructor(private db: AngularFireDatabase) { }

  getCategories() {
    return this.db.list('/categories');
  }
}


Task 3 - Use Category Service:
In out ProductFormComponent we can use the Category service & expose the Observeable
to our template.

export class ProductFormComponent implements OnInit {
  categories$;

  constructor(categoryService: CategoryService) {
    this.categories$ = categoryService.getCategories();
   }

  ngOnInit() {}
}


Task 4 - Unwrap Observeable in Template:
Using the Async Operator we can unwrap Observeable and display the categories data.

  <div class="form-group">
    <label for="category">Category</label>
    <select id="category"class="form-control">
      <option value=""></option>
      <option *ngFor="let c of categories$ | async" [value]="c.name">{{c.name}}</option>
    </select>
  </div>

Note:
To use Async pipe, must use valuesChanges in either the Service or Component, its
implmentation has changed a lot since.

Result:
We should now have the Categories being displayed in the Product Page.


Task 5 - Order Alpabetically:
The Categories data is not being returned alphabetically, so we need to order the data
in our service.
-pass second parameter to db.list to order by.
-for a complete list of orderings, see the AngularFire documentation.
  getCategories(): AngularFireList<any> {
    return this.db.list('/categories', x => x.orderByChild('name'));
  }


---Tutorial 4 - Saving Product to Database:---
So now the Form is complete lets get working on saving to the database. Lets assume for
now that the data is correct, we'll work on validation later.


Task 1 - Create Form/FormControl Objects
We have to create a form control object for each input element.
-add ngModel & name to create form control object.

 <input ngModel name="title" id="title" type="text" class="form-control">
-Do this for each of the inputs in our form.
-Add ngSubmit to Form, bind to save method in Component.
-add a Template variable f for the form data.

<form #f="ngform" (ngSubmit)="save(f.value)">

Task 2 - Import Forms Module:
Now that we're using ngModel, we need to import the FormsModule.
  imports: [
    BrowserModule,
    FormsModule,

Task 3 - Create ProductService:
-ng g s product
-register as provider
-Implement CreateProduct
-use push to add items to the products node

export class ProductService {
  constructor(private db: AngularFireDatabase) { }

  createProduct(product) {
    this.db.list('/products').push(product);
  }
}


Task 4 - Implment Save:
We now just use the service & pass our form object & voila.
  save(product) {
    console.log("Product: ", product);
    this.productService.createProduct(product);
  }


Result:
We can now save products in the Database.



---Tutorial 5 - Implmenting Validation:---
So we want to add a mix of generic & custom validation to our form, lets start
by making all fields required.


Task 1 - Add Required Validation to Input:
Lets do this ssing the Template Driven method, eg HTML 5 validation.
Lets start by adding a Template variable to store ngModel.
 
 <input #title="ngModel" name="title" id="title" type="text" class="form-control" required>

-Add Required
-add Template variable for form control object.
-Add Alert box with validation error.
-Hide Alert box until form control object in use.

    <div class="alert alert-danger" *ngIf="title.touched && title.invalid">
      Title is Required!
    </div>

    <div class="form-group">
      <label for="title">Title</label>
      <input #title="ngModel" ngModel name="title" id="title" type="text" class="form-control" required>
    </div>


In the next lecture we're going to add some more complex validation.



---Tutorial 6 - Adding Custom Validation:---
So we have 2 custom validations we want to make, the first being price is a positive
whole number, and the 2nd being that the ImageURl format is valid.
As mentioned before at the time of recording angular does not support url validation, so
we're going to use a another library called ng2-validation

Task 1 - Install ng2-validation:
-npm i ng2-validation --save
-add in AppModule
import {CustomFormsModule} from 'ng2-validation';

-Add in Imports
  imports: [
    BrowserModule,
    FormsModule,
    CustomFormsModule,




We can now use the MIN method with property binding, and set it to 0.
id="price" type="number" class="form-control" required [min]="0"


Task 3 - Extend Alert Box:
Now that we have multiple errors, we need to extend the alert box.

    <div class="alert alert-danger" *ngIf="price.touched && price.invalid">
      <div *ngIf="price.errors.required">Price is Required!</div>
      <div *ngIf="price.errors.min">Price should be 0 or Higher!</div>
    </div>


Task 4 - Implment URL Validation:
Finally we get to use the NG2-Validtion directives and see what it can do.
-url Directive for validating URLs

id="imageUrl" type="text" class="form-control" required url>

-Again Extend the Alert Box:
    <div class="alert alert-danger" *ngIf="imageUrl.touched && imageUrl.invalid">
        <div *ngIf="imageUrl.errors.required"> Image URL is Required!</div>
        <div *ngIf="imageUrl.errors.url">That Image URL is NOT valid!</div>  
    </div>


So in summary we didn't really have to create the Custom Validators for scratch,
instead used built in directives from ng2-validtion to validate urls, pretty cool!


---Tutorial 7 - Adding a BootStrap Card:---
In this section we're going to break up the New Product form and add a bootstrap card
to preview the products before submitting.


Task 1 - Divide Product Page:
With BootStrap everything is divided into a grid totalling 12 columns, this is why MD 6
is half the page.
We can put all the form markup in one half, then our bootstrap card in the other half.

<div class="row">
  <div class="col-md-6">
  </div>


Task 2 - Add BootStrap Card:
So if we checkout https://getbootstrap.com/docs/4.0/components/card/
We can steal the markup here for rendering a nice card.

  <div class="col-md-6">
      <div class="card">
          <img class="card-img-top" src="..." alt="Card image cap">
          <div class="card-body">
            <h5 class="card-title">Card title</h5>
            <p class="card-text">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>
            <p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>
          </div>
        </div>
  </div>


Task 3 - Inject Template Variables:
So now we can inject the ngModel template variables we declared earlier.
-Apply USD currency using currency:'USD':true
-true meaning display $

  <div class="col-md-6">
      <div class="card">
          <img class="card-img-top" [src]="imageUrl.value">
          <div class="card-body">
            <h5 class="card-title">{{title.value}}</h5>
            <p class="card-text">{{price.value | currency:'USD':true}}</p>
          </div>
        </div>
  </div>


Task 4 - Redirect On Save:
So now that we can create the Object, we need to redirect once the deed is done.
-router.navigate
  save(product) {
    console.log("Product: ", product);
    this.productService.createProduct(product);
    this.router.navigate(['admin/products']);
  }

In this next section we'll continue on from here and build on the Product List page.



---Tutorial 8 - Rendering the List of Products:---
Now that we can create products, we want a page for an Admin to Add/Edit or remove
products from the website.


Task 1 - Add GetProducts to ProductService:
Simply get the DB list & return.

  getProducts() {
    return this.db.list('/products');
  }


Task 2 - Add Service to Component:
export class AdminProductsComponent implements OnInit {
  products$;

  constructor(private productService: ProductService) { 
    this.products$ = this.productService.getProducts().valueChanges();
  }


Task 3 - Create Table & render Products:
For the most part this is self explanitory, just rendering the details in table.
The edit link however is a bit difference, we need to dynamically create a route using
the items key in Firebase.
We use property binding to bind the routerLink to the link + the key of the item.
-<a [routerLink]="['/admin/products/', p.$key]">Edit</a>

<table class="table">
  <thead>
      <tr>
        <th>Title</th>
        <th>Price</th>
        <th></th>
      </tr>
  </thead>
  <tbody>
    <tr *ngFor="let p of products$ | async">
      <td>{{p.title}}</td>
      <td>{{p.price}}</td>
      <td>
        <a [routerLink]="['/admin/products/', p.$key]">Edit</a>
      </td>
    </tr>
  </tbody>
</table>

In the next section we'll look at rendering this Edit page.


---Tutorial 9 - Editing a Product:---
Okay so now the next thing to work on is that edit button.

Blocking Problem:
Firebase does not expose the $KEY property anymore. Need to figure out a way to access
in the product list.

Fix:
Had to write a method to track object, map key & payload and rework template
to use new values.

  getProducts() {
    return this.db.list('/products').snapshotChanges().pipe(
      map(products => products.map(p => ({key: p.key, data: p.payload.toJSON()}))));
  }

Task 1 - Add a Route:
-Remember to get from MOST specific to least, so we don't always trigger products.
{path:'admin/products/new', component: ProductFormComponent, canActivate: [AuthGuard, AdminAuthGuard]},
{path:'admin/products/:id', component: ProductFormComponent, canActivate: [AuthGuard, AdminAuthGuard]},
{path:'admin/products', component: AdminProductsComponent, canActivate: [AuthGuard, AdminAuthGuard]},
    
Make sure we're sending the correct UniqueID so the product key.
<a [routerLink]="['/admin/products/', p.key]">Edit</a>


Task 2 - Get Single Product:
  getProduct(key) {
    return this.db.list('/products/' + key);
  }


Task 3 - Read Route Parameter & Load Product:

    let id = this.route.snapshot.paramMap.get('id');
    if(id) {
      this.productService.getProduct(id).valueChanges()
      .pipe(take(1)).subscribe(x => this.product = x[0]);
    };
   }
Note:
So now that we have the Proudct being loaded, we need a way to unsubscribe.

Method 1 - OnDestroy:
One way to make sure we unsubscribe is by implmenting OnDestroy, then makeing
sure to terminate the connection.

Method 2 - Take Operator:
In RXJS we have a TAKE operation, which allows us to take the value, and let RXJS
handle the termination. If we only need a value once, use take operator to make subscring
and unsubscribing easier.

Single Result Problem:
Using Product/ID we somehow lose the properties we need to bind to.
So no title price etc which are vital...

Fix:
 this.productService.getProduct(id).valueChanges().pipe(take(1)).subscribe(x => this.product = x[0]);

Task 4 - Add Proudct to Template:
Now we need to preload our product data into the form, we do this by using property binding.
We bind ngModel to product.title and we leave the validation as is, as it uses the #title
template variable.
-do this for each input field in the form.

          <div class="alert alert-danger" *ngIf="title.touched && title.invalid">
            Title is Required!
          </div>
          
          <!--Task 4 - Bind Data to Template:-->
          <div class="form-group">
            <label for="title">Title</label>
            <input #title="ngModel" [(ngModel)]="product.title" name="title" id="title" type="text" class="form-control" required>
          </div>


Task 5 - ImageUrl Fix:
So if we click onto edit, we can see an error failure @ localhost:4200/null.
This is because before we can get the data from Firebase, Angular is attempting
to render the imageUrl which is of course not valid.
A quick fix is to add a ngIf onto the img src.

      <div class="card">
          <img class="card-img-top" [src]="imageUrl.value" *ngIf="product.imageUrl">


In the next section we'll look at updating any existing product we edit.


---Tutorial 10 - Update Product:---
So now that we have the edit details up, you've realized that clicking save makes a duplicate.
We need to implment another method to update, rather than create a whole new entry.


Task 1 - Create Update Method:
We need the Key & product to update an existing product.

  update(productID, product) {
    return this.db.object('/products/' + productID).update(product);
  }


Task 2 - Check ID & Update:
So we need a way to differenciate between new products & edited ones, lucky we have the ID from the
route, can check that before updating.

  save(product: Product) {
    if(this.id) this.productService.update(this.id, product);
    else this.productService.createProduct(product);
    this.router.navigate(['admin/products']);
  }


  Result:
  We can now Edit & create new products.



---Tutorial 11 - Update Product:---
Task 1 - Create Button:
Create the Delete button, then bind to method in component.
-Note Change button type, so it does not trigger form submit.
          <button class="btn btn-primary">Save</button>
          <button type="button" (click)="delete()" class="btn btn-danger">Delete</button>


Task 2 - Implement Remove Method:
-Use product/key to find the node, then simply use Remove.
  remove(key) {
    if(confirm('Sure you want to Delete Product?')) {
      this.db.list('/products/' + key).remove().then(_ => console.log('Deleted...', key));
    }


Task 3 - Implment Delete:
-Prompt User with Popup.
-remove w ID from RouteParams
-navigate to Products

  delete() {
    if(!confirm('Sure you want to Delete this Product?')) return;
    this.productService.remove(this.id);
    this.router.navigate(['admin/products']);
  }


Note:
Problem with the last attempt was putting the delete button inside the form, it triggered
the form to submit so it looked like nothing was getting removed. All G now.



---Tutorial 12 - Searching for a Product:---
So now that we have worked out CRUD operations for the product list, lets work on implementing Search.

Task 1 - Add SearchBox:
<input
#query
(keyup)="filter(query.value)"
type="text" class="form-control" placeholder="search">

Note Client V Server Side Filtering:
Where are 2 types of Filtering, client side & server side. For this application, we are dealing with a
small amount of products, so filtering on the client should be suitable.

Note Unsubscribing:
There are several methods for unsubscribing, in this scenario we want to synchronize the data across
any windows, so we will only subscrine when the component itself is terminate using ngOnDestroy.

Task 2 - Rework Admin Prodcts:
-Change Products from Observeable to Array.
-Populate ProductList in the constructor
-Refactor Template to use Product Array Data.

export class AdminProductsComponent implements OnDestroy {
  products: any[];
  filteredList:  any[] = [];
  subscription: Subscription;

  constructor(private productService: ProductService) {
    this.productService.getProducts().subscribe(products => this.filteredList = this.products = products);
  }


Task 3 - Implment Filter Method:
If we have a QueryString filter Products & Assign or Set to Full productlist.
This works very well as if we empty the bar, it resets to the full list.

 filter(query: string) {
   this.filteredList = (query) ?
   this.products.filter(p => p.data.title.toLowerCase().includes(query.toLowerCase())) : 
   this.products;
  }

Now we have a working search box, the next sections will be for clean up & refactoring.


---Tutorial 13 - Extracting an Interface:---
So just like in the Authentication section we made an AppUser object to define an Application user,
we should create a Product model to desdine the shape & properties.
Because Firebae does not expose the keys anymore I had to create a more complex object, Product node
contains the key and Product which we return from getAllProducts.


Task 1 - Create Interfaces:
export class ProductNode {
  key: string;
  product: Product;
}

export interface Product {
  title: string;
  price: number;
  category: string;
  imageURL: string;
}


Task 2 - Light Refactoring:
-Rework ProductService to return new Object type.
-Change how the properites are accessed in the component & templates.

  getAllProducts() {
    return this.db.list('/products').snapshotChanges().pipe(
      map(products => products.map(function(res) {
        var product = new ProductNode();
        product.key = res.key;
        product.product = res.payload.toJSON() as Product;
        return product;
      })));
  }


---Tutorial 14 - Adding a Data Table:---
So we did a good job implmenting our Search box, but there are some 3rd party libraries that can do
much more, like Searching, Ordering, Limit items per page & paginated data.


Optional Task - Import JSON:
Rather than creating the amount of products needed, we can use a feature in Firebase & import moshes.


Task 1 - Install Angular Data Table:
-npm i angular-4-data-table
-import in App.Module


Task 2 - Add Data Table:
We use the data-table directive & voila we can 
<data-table>
</data-table>

Note:
For a complete List of input properties & demo files, checkout github.
https://github.com/ggmod/angular-2-data-table/blob/master/src/components/table.component.ts
In the next section we're going to work on customizing the Data Table.


---Tutorial 15 - Configuring Data Table:---
This is going to take a different direction as the DataTable Mosh is using does is deprecated, using
Angular Material tutorial instead.


Task 1 - Install Material:
-npm install --save hammerjs
-npm install --save @angular/material @angular/animations @angular/cdk
Steps Listed Here.
https://appdividend.com/2018/11/07/angular-material-table-tutorial-example/

Task 2 - Setup MaterialModule:
Rather than polute our App.Module with all the Angular Material Shite, we can encapsulate it all
in material.module.ts
-Inject material.module.ts into app.module.ts

Task 3 - Pagination:
Updating Material.module.ts
MatPaginatorModule

-Add to Imports in Material.Module
-Add MatPaginatorModule into component:
  We need to Instansiate the Paginator & pass to datasource.paginator:
  @ViewChild(MatPaginator) paginator: MatPaginator;
  this.dataSource.paginator = this.paginator;

-Add MatPaginatorModule into Template
  <mat-paginator [pageSizeOptions]="[5, 10, 15]" showFirstLastButtons></mat-paginator>


Task 4 - Adding Sorting:
-Add to Imports in Material.Module
-Add MatSort into component
  @ViewChild(MatPaMatSortginator) sort: MatSort;
  this.dataSource.sort = this.sort
-Add MatSort into Template
  mat-sort-header


Task 5 - Adapt to use Products:
-Replace Periodic Element with Product Json.
-Refactor Table bindings to work with Product data.
-Replace Product Data with Product Service:
 Problem here, I figured out, had to assign the DataSource in the Constructor Subscribe method.
 Moved all DataSource crap into the NgOnInit.

-Refactor Filter:
Search query was not being used, append dataSource = filteredList now the dataSource products Changes like
it should.


Result:
Things we're done very different to Mosh, but the same results are achieved.
We have a Products List with Searching, Sorting, Pagingation & result limiting.


---Tutorial 19 - Cleaning Up Product Form:---
So lets do some final touches on the Product form before finshing up this section.

Item List:
-Preview Card Should only appear if there is Data.
-Confirmation PopUp should be one click.


Task 1 - Hide Preview Card:
<div *ngIf="product.title" class="card">

Task 2 - Confirmation Popup:
Remove confirm from Service.
  remove(key) {
      this.db.list('/products/' + key).remove().then(_ => console.log('Deleted...', key));
  }

Task 3 - Last Minute Cleanup:
Remove all unneccessary HTML.


Finally we are done with this section, we now Create, Delete, Edit as well as manage our product catalog.
In the next section we will start work on the Non-admin section of the site.