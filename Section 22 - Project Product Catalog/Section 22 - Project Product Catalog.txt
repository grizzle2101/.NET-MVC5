---Section 22 - Project: Product Catalog:---
---Tutorial 1 - Introduction:---
In this section we're going to take the application to the next level, building out the homepage
with categories & products for users to purchase.
We're going to using the Angular Cart Component to display the products like Amazon or Ebay.



---Tutorial 2 - Displaying All the Products:---
So in this section we're going to get all the products and display them in the Angular Cart.
This shouldn't be too hard, as we already have the ProductService up and running, we just need
to add the products into the Angular Cart & voila.


Task 1 - Setup Products Component:
Create Product Observeable & Populate from ProductService.

export class ProductsComponent {
  products$;

  constructor(productService: ProductService) { 
    this.products$ = productService.getAllProducts();
  }
}


Task 2 - Add BootStrap Card & Add Produt Data:
<div
  *ngFor="let p of products$ | async"
  class="card" style="width: 15rem;">
  <img class="card-img-top" src="{{p.product.imageUrl}}">
  <div class="card-body">
    <h5 class="card-title">{{p.product.title}}</h5>
    <p class="card-text">{{p.product.price | currency:'USD':true}}</p>
    <a href="#" class="btn btn-primary">Add to Cart</a>
  </div>
</div>


Task 3 - Redirect Home to ProductComponent:
{path:'', component: ProductsComponent},


Task 4 - Place Card Inside Grid:
So the Product List is working, but its one item per row, we want at least 2.
-Place Container & extend loop to get index.
-Use Index to dynamically render line breaks.
-every 2nd item, use line break

<div class="row">
  <ng-container *ngFor="let p of products$ | async; let i = index">
    <div class="card" style="width: 15rem;">
      <img class="card-img-top" src="{{p.product.imageUrl}}">
      <div class="card-body">
        <h5 class="card-title">{{p.product.title}}</h5>
        <p class="card-text">{{p.product.price | currency:'USD':true}}</p>
        <a href="#" class="btn btn-primary">Add to Cart</a>
      </div>
    </div>
    <div *ngIf="(i + 1) % 2 == 0" class="w-100"></div>
  </ng-container>
</div>



---Tutorial 3 - Displaying the Categories:---
So now we want to get the Categories listed on the right side, fairly easy.

Task 1 - Setup Category Service:
Just like we did for product service, we want to create a categories Observeable & in the constructor
populate from the CategoriesService.

export class ProductsComponent {
  products$;
  categories$;

  constructor(productService: ProductService, categoryService: CategoryService) { 
    this.products$ = productService.getAllProducts();
    this.categories$ = categoryService.getCategories().valueChanges();
  }
}



Task 2 - Add Categories Markup:
Remember in BootStrap layouts 12 is the full screen.
If we put the entire page into a grid of 2 rows one being 3 and the other being 9 we should have a nice
grid layout.

<div class="row">
  <div class="col-3">
    Categories:
    <ul class="list-group">
      <li *ngFor="let c of categories$ | async;" class="list-group-item">
        {{c.name}}
      </li>
    </ul>
  </div>
  <div class="col">
    <div class="row">



--Tutorial 4 - Filtering Products by Category:---
So now we want to add filtering by category, this can be done easily enough.

Note:
Had to rework Category Service to return key & data.

Task 1 - Add Router Links Categories Markup:
To make the Categoris clickable we have to change the list to divs and anchors.
We also added routerLink and bound query params to the category key, which we will use in the filtering.
-class active means highlight, we highlt if the category is clicked

<div class="row">
  <div class="col-3">
    Categories:
    <div class="list-group">
      <a 
      *ngFor="let c of categories$ | async;"
      routerLink="/"
      [queryParams]="{category: c.key}"
      class="list-group-item list-group-item-action"
      [class.active]="category === c.key"
      >
        {{c.category.name}}
      </a>
    </div>
  </div>


Result:
We now have the key inserted into the URL.
http://localhost:4200/?category=vegetables



Task 2 - Get RouterParams:
We need to get the value from the queryParamMap and store for use in filtering.
Note that we cannot use snapshot, these route values are dynamic so we need to subscribe to the
observeables.

export class ProductsComponent {
  products$;
  categories$;
  category: string;

  constructor(route: ActivatedRoute, productService: ProductService, categoryService: CategoryService) { 
    this.products$ = productService.getAllProducts();
    this.categories$ = categoryService.getAllCategories();

    //We Subscribe becase value is dynamic:
    route.queryParamMap.subscribe(params => {
      this.category = params.get('category');
    })


Task 3 - Implement Filtering:
So just like the Product search bar we created, we filter products that are equal to the selected
category.
      this.filteredProducts = (this.category) ? 
      this.products.filter(p => p.product.category === this.category) : this.products;
    })


Result:
We have some perfectly functioning production filtering. This works like a dream, we have a small
bug of the products not populating until a category is clicked, will deal with this in next section.