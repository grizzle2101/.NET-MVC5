---Section 22 - Project: Product Catalog:---
---Tutorial 1 - Introduction:---
In this section we're going to take the application to the next level, building out the homepage
with categories & products for users to purchase.
We're going to using the Angular Cart Component to display the products like Amazon or Ebay.



---Tutorial 2 - Displaying All the Products:---
So in this section we're going to get all the products and display them in the Angular Cart.
This shouldn't be too hard, as we already have the ProductService up and running, we just need
to add the products into the Angular Cart & voila.


Task 1 - Setup Products Component:
Create Product Observeable & Populate from ProductService.

export class ProductsComponent {
  products$;

  constructor(productService: ProductService) { 
    this.products$ = productService.getAllProducts();
  }
}


Task 2 - Add BootStrap Card & Add Produt Data:
<div
  *ngFor="let p of products$ | async"
  class="card" style="width: 15rem;">
  <img class="card-img-top" src="{{p.product.imageUrl}}">
  <div class="card-body">
    <h5 class="card-title">{{p.product.title}}</h5>
    <p class="card-text">{{p.product.price | currency:'USD':true}}</p>
    <a href="#" class="btn btn-primary">Add to Cart</a>
  </div>
</div>


Task 3 - Redirect Home to ProductComponent:
{path:'', component: ProductsComponent},


Task 4 - Place Card Inside Grid:
So the Product List is working, but its one item per row, we want at least 2.
-Place Container & extend loop to get index.
-Use Index to dynamically render line breaks.
-every 2nd item, use line break

<div class="row">
  <ng-container *ngFor="let p of products$ | async; let i = index">
    <div class="card" style="width: 15rem;">
      <img class="card-img-top" src="{{p.product.imageUrl}}">
      <div class="card-body">
        <h5 class="card-title">{{p.product.title}}</h5>
        <p class="card-text">{{p.product.price | currency:'USD':true}}</p>
        <a href="#" class="btn btn-primary">Add to Cart</a>
      </div>
    </div>
    <div *ngIf="(i + 1) % 2 == 0" class="w-100"></div>
  </ng-container>
</div>



---Tutorial 3 - Displaying the Categories:---
So now we want to get the Categories listed on the right side, fairly easy.

Task 1 - Setup Category Service:
Just like we did for product service, we want to create a categories Observeable & in the constructor
populate from the CategoriesService.

export class ProductsComponent {
  products$;
  categories$;

  constructor(productService: ProductService, categoryService: CategoryService) { 
    this.products$ = productService.getAllProducts();
    this.categories$ = categoryService.getCategories().valueChanges();
  }
}



Task 2 - Add Categories Markup:
Remember in BootStrap layouts 12 is the full screen.
If we put the entire page into a grid of 2 rows one being 3 and the other being 9 we should have a nice
grid layout.

<div class="row">
  <div class="col-3">
    Categories:
    <ul class="list-group">
      <li *ngFor="let c of categories$ | async;" class="list-group-item">
        {{c.name}}
      </li>
    </ul>
  </div>
  <div class="col">
    <div class="row">



--Tutorial 4 - Filtering Products by Category:---
So now we want to add filtering by category, this can be done easily enough.

Note:
Had to rework Category Service to return key & data.

Task 1 - Add Router Links Categories Markup:
To make the Categoris clickable we have to change the list to divs and anchors.
We also added routerLink and bound query params to the category key, which we will use in the filtering.
-class active means highlight, we highlt if the category is clicked

<div class="row">
  <div class="col-3">
    Categories:
    <div class="list-group">
      <a 
      *ngFor="let c of categories$ | async;"
      routerLink="/"
      [queryParams]="{category: c.key}"
      class="list-group-item list-group-item-action"
      [class.active]="category === c.key"
      >
        {{c.category.name}}
      </a>
    </div>
  </div>


Result:
We now have the key inserted into the URL.
http://localhost:4200/?category=vegetables



Task 2 - Get RouterParams:
We need to get the value from the queryParamMap and store for use in filtering.
Note that we cannot use snapshot, these route values are dynamic so we need to subscribe to the
observeables.

export class ProductsComponent {
  products$;
  categories$;
  category: string;

  constructor(route: ActivatedRoute, productService: ProductService, categoryService: CategoryService) { 
    this.products$ = productService.getAllProducts();
    this.categories$ = categoryService.getAllCategories();

    //We Subscribe becase value is dynamic:
    route.queryParamMap.subscribe(params => {
      this.category = params.get('category');
    })


Task 3 - Implement Filtering:
So just like the Product search bar we created, we filter products that are equal to the selected
category.
      this.filteredProducts = (this.category) ? 
      this.products.filter(p => p.product.category === this.category) : this.products;
    })


Result:
We have some perfectly functioning production filtering. This works like a dream, we have a small
bug of the products not populating until a category is clicked, will deal with this in next section.



---Tutorial 5 - Dealing with Multiple Asyncronous Operations:---
There is problem with the number of Asyncronous operations in our ProductComponent, we have the
queryParamMap and ProductService, and we don't know which one is going to complete first.

Because these Asyncronous actions are ongoing, at the time, we don't have a value to filter, so we
have an empty list. We need a way to make sure they all execute in sequence.


Task 1 - Combine Observeables:
So if we put everything inside a single Subscribe, we make sure this happens in sequence.

  constructor(route: ActivatedRoute, productService: ProductService, categoryService: CategoryService) {
    this.categories$ = categoryService.getAllCategories();

    productService.getAllProducts().subscribe(x => {
      this.products = x;

      //Get Query Param
      route.queryParamMap.subscribe(params => {
        this.category = params.get('category');

        //Filter Products
        this.filteredProducts = (this.category) ?
          this.products.filter(p => p.product.category === this.category) : this.products;
      });



Task 2 - Rework Observeavles into Switch Block:
This is a mess of nested Observeable, a nice way to clean this up would be with SwitchMap.

  constructor(route: ActivatedRoute, productService: ProductService, categoryService: CategoryService) {
    productService.getAllProducts()
    .pipe(switchMap(products => {
      products = products;
      return route.queryParamMap;
    }))
    .subscribe(params => {
      this.category = params.get('category');
      this.filteredProducts = (this.category) ?
      this.products.filter(p => p.product.category === this.category) :
      this.products;
    });
    this.categories$ = categoryService.getAllCategories();
  }


Task 3 - Add All Categories Link:
lets add a nice link to reset to an all products view.
-routerLink to /
-active class highlighting if none is selected

      <a
      class="list-group-item list-group-item-action"
      [class.active]="!category"
      routerLink="/">
      All Categories
      </a>


---Tutorial 6 - Refactoring - Extract ProductFilterComponent:---
Our products page is working, but we can clean it up hugely!
Our template has gotten out of control, and tried to do too much, we can create 2 seperate components
out of this.

Task 1 - Create ProductFilterComponent:
We want to encapsulate the Categories into a new component.
-ng g c products/product-filter


Task 2 - Extract Categories Markup:
<div class="list-group">
  <a class="list-group-item list-group-item-action" [class.active]="!category" routerLink="/">
    All Categories
  </a>
  <a *ngFor="let c of categories$ | async;" routerLink="/" [queryParams]="{category: c.key}" class="list-group-item list-group-item-action"
    [class.active]="category === c.key">
    {{c.category.name}}
  </a>
</div>

-Replace the missing Markup with the selector <product-filter>

Task 3 - Extract Categories Logic:
Now we need all the neccessary logic and data to render the categories.

export class ProductFilterComponent {
  categories$;

  constructor(categoryService: CategoryService) {
    this.categories$ = categoryService.getAllCategories();
   }
}


Task 4 - Fix Category Highlighting:
If we take an input property into the ProductFilter, we can pass the data from ProductComponent
to the ProductFilter to highlight the correct category.

  @Input('category') category;

Usage:
  <product-filter [category]="category"></product-filter>


Result:
The Categories section has beex extracted into its own component, now the main Product page & component
are much cleaner, and there is better seperation of concerns and testability.
In the next section we'll continue refactoring the Product Card.



---Tutorial 7 - Refactoring - Extracting ProductCardComponent:---


Task 1 - Create ProductCardComponent:
Now because the card is used in several places, we want to place this in the root directory.
-ng g c product-card


Task 2 - Extract Product Card:
<div class="card" style="width: 15rem;">
    <img class="card-img-top" src="{{p.product.imageUrl}}">
    <div class="card-body">
      <h5 class="card-title">{{p.product.title}}</h5>
      <p class="card-text">{{p.product.price | currency:'USD':true}}</p>
      <a href="#" class="btn btn-primary">Add to Cart</a>
    </div>
  </div>


Task 3 - Extract Product Card Logic:
In order to render the card, we need to take the product object in as a input property.

-Create Input property
Consumers of the Card should pass a product.
export class ProductCardComponent implements OnInit {
  @Input('product') product: Product;

-Modify Card Template
We now use the Input property in our Data Display.
<h5 class="card-title">{{product.title}}</h5>
<p class="card-text">{{product.price | currency:'USD':true}}</p>


-Modify Usage:
So where the product card are being used, need to make sure we're passing the right product object.
We need a product node, where as for the card we only need to product details itself.
<product-card [product]="p.product"></product-card>


Task 4 - Refactor Preview Card:
We can also rework the Product Card being used in the Admin interface.
  <div class="col-md-6">
    <product-card *ngIf="product.title" [product]="product"></product-card>
  </div>


Task 5 - Rework Card:
So after looking at how the preview card is used, we can see some additions we should
add to the Card Component.
-Only render Card if it has title.
-Only rednder image if its valid.
-Use containers to dictate size of card. eg col v col 6. we can remove hard coded style from card.
style="width: 15rem;"
-Add to Cart should be optional.

<div *ngIf="product.title" class="card">
    <img *ngIf="product.imageUrl" class="card-img-top" src="{{product.imageUrl}}" alt="{{product.title}}">
    <div class="card-body">
      <h5 class="card-title">{{product.title}}</h5>
      <p class="card-text">{{product.price | currency:'USD':true}}</p>
      <a *ngIf="showActions" href="#" class="btn btn-primary">Add to Cart</a>
    </div>
  </div>


Result:
So now our Card Component has been reworked for both usages, in a single Preview card and when
used to display the product list.