---Section 23 - Project - Shopping Cart:---
---Tutorial 1 - Introduction:---
In this section we're going to focus on building the shopping cart functionality. We want to be
able to select products, see them get added to the shopping cart.
We can then click into our shopping cart, edit our orders and also see the calcualtions to get
the total price, all this happens in real time and even if you open a new tab we need to see
the data persisted. Lets get going!


---Tutorial 2 - Creating a Shopping Cart:---
In order to get started the first thing we need to look at it is creating a new shopping cart
the first time a user selects Add to Cart. This process should be available to anyone that
uses the application, do they not need to be logged in.


Features:
-Do NOT need to be logged in.
-Adding to Cart creates a Shopping Cart node in firebase.
-This Shopping cart node should have DateCreated & the Products selected by the user.
-We want to persist this shopping cart without a logged in User, storing Shopping Cart ID
in local storage.



Task 1 - Add to Cart:
So in the current implementation we have anchor tags to redirect a user, we don't want that.

 <div class="card-footer">
      <button *ngIf="showActions"
      (click)="addToCart(product)"
      class="btn btn-primary btn-block">Add to Cart</button>
    </div>


  addToCart(product: Product) {
    let cardId = localStorage.getItem('cartID');
    if(!cardId) {
      this.cartService.create().then(result => {
        localStorage.setItem('cartID', result.key);

        //Add Product to Cart:
      });
    }


Task 2 - Create Shopping Cart Service:
Now before we can proceed we need to create the Shopping Cart service.
-ng g s shopping-cart
-add in providers section app.module
-Create Service Logic

export class ShoppingCartService {

  constructor(private db: AngularFireDatabase) { }

  create() {
    return this.db.list('/shopping-carts').push({
      dateCreate: new Date().getTime()
    });
  }
}


Task 3 - Configure Firebase Permissions:
We get an exception when trying to create the shopping-card node, access denied.
Make sure to have READ & Write for shopping cart, or globally as I currently.


Result:
Now when clicking AddToCart we have a brand new shopping cart node in Firebase.


---Tutorial 3 - Refactoring - Moving Responsability to the Service:---
There is a problem with our Product Card component, it is taking on too many responsabilities.
From data access to setting local storage, this should all be extracted out.



Task 1 - Extract Cart Logic from Card:
Lets move this out from the Card Component and into the CartService.

let cardId = localStorage.getItem('cartID');
    if(!cardId) {
      this.cartService.create().then(result => {
        localStorage.setItem('cartID', result.key);

        //Add Product to Cart:
      });
    }
    else {
      //Add Product to Cart
    }


Task 2 - Refactor using Async:
Rather than using .then, have having all this code happen inside, we can make it look linear
with the Async & await methods.

  addToCart(product: Product) {
    let cardId = localStorage.getItem('cartID');
    if(!cardId) {
      this.cartService.create().then(result => {
        localStorage.setItem('cartID', result.key);

        //Add Product to Cart:
      });

Becomes:
    if(!cartID) {
      let result = await this.create();
      localStorage.setItem('cartID', result.key);
      return this.getCart(result.key);
    }


End Result:
We Internally manage the shopping carts, and in the next section we can carry on with Adding
products into the cart we retrieve internally.

  private async getOrCreateCart() {
    let cartID = localStorage.getItem('cartID');
    if(!cartID) {
      let result = await this.create();
      localStorage.setItem('cartID', result.key);
      return this.getCart(result.key);
    }
    return this.getCart(cartID);
  }


Usage:
Now in the Card, we just add to service, and let the service worry about the implementation.
  addToCart(product: Product) {
    this.cartService.addToCart(product);
  }
}


---Tutorial 4 - Adding a Product to the Shopping Cart:---
Okay so now we have the Shopping Cart components in place, lets work on adding items our shopping cart in firebase.


Task 1 - Refactor Cart Service:
-We don't need CART Object, just an ID will do.
-Check if Cart Exists first, cleaner code.

  private async getOrCreateCart() {
    let cartID = localStorage.getItem('cartID');
    if(cartID) return cartID;

    let result = await this.create();
    localStorage.setItem('cartID', result.key);
    return result.key;
  }


Task 2 -Implement AddToCart:
-Need to find a way to Update
  async addToCart(product: ProductNode) {
    let cartId = await this.getOrCreateCart();
    let cartItems = this.db.list('/shopping-carts/' + cartId + '/items/') as AngularFireList<ShoppingCartItem>;

    cartItems.update(product.key, {product: product.product, quantity: 1});
  }



Task 3 - Implment Add to Cart in Component:
  //Task 3 - Add Call to Service in Component:
  addToCart(product: ProductNode) {
    console.log('Adding to cart...')
    this.cartService.addToCart(product);
  }


Additional Work:
As the Methods Mosh used to Access the Quantity field and then update have been removed this might take a while to figure out.
Need to check If this product node exsits, if it does then Add + 1 to the Quantity.
Sounds simple, but for some reason is not. In the next lecure Mosh will be refacoting so fingers crossed that fixes it.

  //Additional Methods for Adding Existing Item, need to be able to Get & Updat
  async getQuantity(cartId: number, key: string) {
    let quantity;
    this.db.list('/shopping-carts/' + cartId + '/items/' + key).valueChanges()
    .subscribe(x => {
     console.log('Quantity:', x[1]);
    });
  }


  private async itemExists(cartId, key) {
    let item = this.db.list('/shopping-carts/' + cartId + '/items/');
    item.stateChanges().subscribe(i => {
      if(i.key == key) return true;
    });
    return false;
  }



---Tutorial 5 - Refactor AddToCart:---
So in this section we're just gonna do a some nice refactoring to make things a lot more readable.

Task 1 - Extract getCartItems:
we make several calls to DB LIST CART ID KEY,
we can extract this so AddToCart does not care about the implementation of finding a cart.


Task 2 - Simplify IF ELSE:
Why do 2 seperate calls IF then update ELSE then set.
We can use update in both cases, but make it smarter.

  cartItems.update(product.key, {product: product.product, quantity: (this.quantity || 0) + 1});
   


Task 3 - Test: 
Delete your cart, make sure it all works from scratch again.

Note:
Still some issues with the order in which it gets the quantity from DB and uses in the update statement.
Even though places inside an Await and a then method.