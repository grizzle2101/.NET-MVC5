---Section 23 - Project - Shopping Cart:---
---Tutorial 1 - Introduction:---
In this section we're going to focus on building the shopping cart functionality. We want to be
able to select products, see them get added to the shopping cart.
We can then click into our shopping cart, edit our orders and also see the calcualtions to get
the total price, all this happens in real time and even if you open a new tab we need to see
the data persisted. Lets get going!


---Tutorial 2 - Creating a Shopping Cart:---
In order to get started the first thing we need to look at it is creating a new shopping cart
the first time a user selects Add to Cart. This process should be available to anyone that
uses the application, do they not need to be logged in.


Features:
-Do NOT need to be logged in.
-Adding to Cart creates a Shopping Cart node in firebase.
-This Shopping cart node should have DateCreated & the Products selected by the user.
-We want to persist this shopping cart without a logged in User, storing Shopping Cart ID
in local storage.



Task 1 - Add to Cart:
So in the current implementation we have anchor tags to redirect a user, we don't want that.

 <div class="card-footer">
      <button *ngIf="showActions"
      (click)="addToCart(product)"
      class="btn btn-primary btn-block">Add to Cart</button>
    </div>


  addToCart(product: Product) {
    let cardId = localStorage.getItem('cartID');
    if(!cardId) {
      this.cartService.create().then(result => {
        localStorage.setItem('cartID', result.key);

        //Add Product to Cart:
      });
    }


Task 2 - Create Shopping Cart Service:
Now before we can proceed we need to create the Shopping Cart service.
-ng g s shopping-cart
-add in providers section app.module
-Create Service Logic

export class ShoppingCartService {

  constructor(private db: AngularFireDatabase) { }

  create() {
    return this.db.list('/shopping-carts').push({
      dateCreate: new Date().getTime()
    });
  }
}


Task 3 - Configure Firebase Permissions:
We get an exception when trying to create the shopping-card node, access denied.
Make sure to have READ & Write for shopping cart, or globally as I currently.


Result:
Now when clicking AddToCart we have a brand new shopping cart node in Firebase.


---Tutorial 3 - Refactoring - Moving Responsability to the Service:---
There is a problem with our Product Card component, it is taking on too many responsabilities.
From data access to setting local storage, this should all be extracted out.



Task 1 - Extract Cart Logic from Card:
Lets move this out from the Card Component and into the CartService.

let cardId = localStorage.getItem('cartID');
    if(!cardId) {
      this.cartService.create().then(result => {
        localStorage.setItem('cartID', result.key);

        //Add Product to Cart:
      });
    }
    else {
      //Add Product to Cart
    }


Task 2 - Refactor using Async:
Rather than using .then, have having all this code happen inside, we can make it look linear
with the Async & await methods.

  addToCart(product: Product) {
    let cardId = localStorage.getItem('cartID');
    if(!cardId) {
      this.cartService.create().then(result => {
        localStorage.setItem('cartID', result.key);

        //Add Product to Cart:
      });

Becomes:
    if(!cartID) {
      let result = await this.create();
      localStorage.setItem('cartID', result.key);
      return this.getCart(result.key);
    }


End Result:
We Internally manage the shopping carts, and in the next section we can carry on with Adding
products into the cart we retrieve internally.

  private async getOrCreateCart() {
    let cartID = localStorage.getItem('cartID');
    if(!cartID) {
      let result = await this.create();
      localStorage.setItem('cartID', result.key);
      return this.getCart(result.key);
    }
    return this.getCart(cartID);
  }


Usage:
Now in the Card, we just add to service, and let the service worry about the implementation.
  addToCart(product: Product) {
    this.cartService.addToCart(product);
  }
}


---Tutorial 4 - Adding a Product to the Shopping Cart:---
Okay so now we have the Shopping Cart components in place, lets work on adding items our shopping cart in firebase.


Task 1 - Refactor Cart Service:
-We don't need CART Object, just an ID will do.
-Check if Cart Exists first, cleaner code.

  private async getOrCreateCart() {
    let cartID = localStorage.getItem('cartID');
    if(cartID) return cartID;

    let result = await this.create();
    localStorage.setItem('cartID', result.key);
    return result.key;
  }


Task 2 -Implement AddToCart:
-Need to find a way to Update
  async addToCart(product: ProductNode) {
    let cartId = await this.getOrCreateCart();
    let cartItems = this.db.list('/shopping-carts/' + cartId + '/items/') as AngularFireList<ShoppingCartItem>;

    cartItems.update(product.key, {product: product.product, quantity: 1});
  }



Task 3 - Implment Add to Cart in Component:
  //Task 3 - Add Call to Service in Component:
  addToCart(product: ProductNode) {
    console.log('Adding to cart...')
    this.cartService.addToCart(product);
  }


Additional Work:
As the Methods Mosh used to Access the Quantity field and then update have been removed this might take a while to figure out.
Need to check If this product node exsits, if it does then Add + 1 to the Quantity.
Sounds simple, but for some reason is not. In the next lecure Mosh will be refacoting so fingers crossed that fixes it.

  //Additional Methods for Adding Existing Item, need to be able to Get & Updat
  async getQuantity(cartId: number, key: string) {
    let quantity;
    this.db.list('/shopping-carts/' + cartId + '/items/' + key).valueChanges()
    .subscribe(x => {
     console.log('Quantity:', x[1]);
    });
  }


  private async itemExists(cartId, key) {
    let item = this.db.list('/shopping-carts/' + cartId + '/items/');
    item.stateChanges().subscribe(i => {
      if(i.key == key) return true;
    });
    return false;
  }



---Tutorial 5 - Refactor AddToCart:---
So in this section we're just gonna do a some nice refactoring to make things a lot more readable.

Task 1 - Extract getCartItems:
we make several calls to DB LIST CART ID KEY,
we can extract this so AddToCart does not care about the implementation of finding a cart.


Task 2 - Simplify IF ELSE:
Why do 2 seperate calls IF then update ELSE then set.
We can use update in both cases, but make it smarter.

  cartItems.update(product.key, {product: product.product, quantity: (this.quantity || 0) + 1});
   


Task 3 - Test: 
Delete your cart, make sure it all works from scratch again.

Note:
Still some issues with the order in which it gets the quantity from DB and uses in the update statement.
Even though places inside an Await and a then method.



---Tutorial 6 - Displaying the Quantity:---
In this section we're going to work on displaying the quantity on a product card. On load we should retrive the shopping cart
and pass the cart as in input property of the card. We can then render & update the quantity on the card itself, much cooler!


Task 1 - Add Input to ProductCardComponent:
-Add ShoppingCart Input property to the ProductCardComponent.

export class ProductCardComponent {
  @Input('product') productNode: ProductNode;
  @Input('show-actions') showActions: boolean = true;
  @Input('shopping-cart') shoppingCart: ShoppingCart;



Task 2 - Add Quantity to Product Card:
-We want to hide the entire footer unless the user specifies.
-We don't want to add the logic for retrieving quantity in the template, as it makes it hard to unit test & messy.

    <div *ngIf="showActions" class="card-footer">
      <button 
      (click)="addToCart(productNode)"
      class="btn btn-primary btn-block">Add to Cart</button>
      <div>{{getQuantity()}}</div>
    </div>



Task 3 - Pass ShoppingCart:
-GET CARTITEMS:-
-Before we can pass the Cart, we need to expose a method from the service to get a Cart.
-The Service should be smart enough to figure out its own CartID, does not need input from consumer.

  async getCartItems() {
    let cartId = await this.getOrCreateCart();
    return this.db.list('/shopping-carts/' + cartId) as AngularFireList<ShoppingCartItem>;
  }

-INJECT CART SERVICE:-
-Use in ProductsComponent:
-Add into the Component:
  constructor(private route: ActivatedRoute, private productService: ProductService, private shoppingCartService: ShoppingCartService) {


-PRODUCT COMPONENT, PASS TO CARD:--
-We need to await the result of the service, but the constructor cannot be ASYNC. A workaround however is using ngOnInit.
-We need to handle subscription, pass the values to this.cartItems, then implment onDestroy to unsubscribe.

  async ngOnInit() {
    this.subscription =  (await this.shoppingCartService.getCartItems()).valueChanges().subscribe(items => {
      console.log('FETCHED CARTIEMS:', items);
      this.cartItems = items;
    });
  }

  //-UnSubscribe
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }

-PASS FROM TEMPLATE:
-Pass the Cart to ProductCardComponent:
Now we pass the value from the ProductComponent, into the product card.
    <product-card [product]="p" [shopping-cart]="cart"></product-card>



Task 4 - Calculate Quantity in Component:
-NullCheck, ensure value is 0 as firebase may take a while.
-Retrive ProductNode from ShoppingCart
-If exists return else 0.

  getQuantity() {
    if(!this.shoppingCart) return 0;
    
    let item = this.shoppingCart.items[this.productNode.key];
    return item ? item.quantity: 0;
  }


Task 5 - Test:
Delete your shopping cart and try again....
All good!



---Tutorial 7 - Improving the Card Footer:---
In this section we're going to clean up the Product Card, add some nice buttons to increase/decrease the products in our cart.


Task 1 - CleanUp Card:
-Display Template UpdateQuantity if Quantity = 0.
-Add Button Toggle in Template
-Fix Styling issues
  -no-gutter - removes bootstrap margins.
  -Text Align Center

<div *ngIf="showActions" class="card-footer">
      <button *ngIf="getQuantity() === 0; else updateQuantity"
      (click)="addToCart(productNode)"
      class="btn btn-secondary btn-block">Add to Cart</button>
      <ng-template #updateQuantity>
        <div class="row no-gutters">
          <div class="col-2">
            <button class="btn btn-secondary btn-block">-</button>
          </div>
          <div class="col text-center">{{getQuantity()}}
          </div>
          <div class="col-2">
              <button class="btn btn-secondary btn-block">+</button>
            </div>
        </div>
      </ng-template>
    </div>



---Tutorial 8 - Implementing the Change Quantity Button:---
Now in this section we will implment the logic behind adding & subtracting items from the cart.


Task 1 - Handle Add Product:
-Update Template
          <div class="col-2">
              <button (click)="addToCart()" class="btn btn-secondary btn-block">+</button>
          </div>

-Remove Product Parameter, why pass a product object, when we already have access to one.
  addToCart() {
    console.log('Adding to cart...')
    this.cartService.addToCart(this.productNode);
  }


Task 2 - Implement Remove Product:
-Add Method call in template
          <div class="col-2">
            <button (click)="removeFromCart()" class="btn btn-secondary btn-block">-</button>
          </div>

-Add Method in Component

  removeFromCart(){
    console.log('Removing from cart...')
    this.cartService.removeFromCart(this.productNode);
  }


Task 3 - Implement RemoveFromCart in Service:
  async removeFromCart(product: ProductNode) {
    let cartId = await this.getOrCreateCart();
    let cartItems = await this.getCartItems();

    this.getQuantity(cartId, product).then(x => {
      console.log('USING VALUE', this.quantity);
      cartItems.update(product.key, {product: product.product, quantity: (this.quantity || 0) - 1});
    });
    

Task 4 - Refactor - Extract Common Logic:
So it works, but we have duplicated the same logic for adding & removing. It would make sense to extract this into a private method.
-Extract Duplicate code to new method.
  async updateItemQuantity(product: ProductNode, change: number) {
    let cartId = await this.getOrCreateCart();
    let cartItems = await this.getCartItems();

    this.getQuantity(cartId, product).then(x => {
      console.log('USING VALUE', this.quantity);
      cartItems.update(product.key, {product: product.product, quantity: (this.quantity || 0) + change});
    });
  }

-Usage
  async removeFromCart(product: ProductNode) {
    console.log('REMOVING PRODUCT:', product.product.title);
    this.updateItemQuantity(product, -1);
  }

Task 5 - Minor Styling Issue:
Again I think this is an issue with bootstrap, but items in the footer are not clickable.
-We want to make all items in the footer clickable.

.card-footer button {
    cursor: pointer;
}


---Tutorial 9 - Displaying ShoppingCartItems in NavBar:---
So in this section we want to add a NavBar item for Shopping cart and the count of items.


Task 1 - Rework NarBar:
-Subscribe to the cart, add the item.quantity field to a local variable the template can use.
-Set the value to 0 on start of the subscription.
-Don't need to Unsubscribe, as only 1 navbar exists.


  async ngOnInit() {
    this.authService.appUser$.subscribe(x => {this.appUser = x});

    let cart = await this.shoppingCartService.getCartItems();
    cart.valueChanges().subscribe(cart => {
      this.shoppingCartItemCount = 0; //Every Time Values are changed, will update.
      cart.forEach(item => this.shoppingCartItemCount += item.quantity);
    });
  }


Task 2 - Render Count:
-Add the span class badge pill from bootstrap to display the Shopping Cart icon.
-Insert the value from the COMPONENT
 <a class="nav-link"
           routerLink="/shopping-cart">
            Shopping Cart
            <span class="badge badge-warning badge-pill">{{shoppingCartItemCount}}</span>
          </a>


Task 3 - Test:
Add some Items, remove some make sure the count adds up and we didn't break anything.



---Tutorial 10 - Refactoring: Creating a Rich Model:---
So with the Current implmentation of ProductCount, anywhere we want to get the total quantity, we have to duplicate this code.
Would be better to add this into a service, so it can be used in many places.

    let cart = await this.shoppingCartService.getCartItems();
    cart.valueChanges().subscribe(cart => {
      this.shoppingCartItemCount = 0;
      cart.forEach(item => {
        this.shoppingCartItemCount += item.quantity
      });

Information Expert Principal:
The Object that has the information about performing a task, should be responsible for performing that task.


Task 1 - Create Shopping Cart Object:
So in accordance with the Information expert principal, the Shopping cart would be the best person to calculate the totalQuantity.

export class ShoppingCart {
  items: ShoppingCartItem[];

  get totalItemsCount() {
    let count = 0;
    for(let productId in this.items) count += this.items[productId].quantity;
    return count;
  }


Task 2 - Refactor Component & Template:
-Expose the Cart Observeable in Component
  cart$: Observable<ShoppingCart>;

-Set Observable to value returned from Service.
this.cart$ = await this.shoppingCartService.getCart();

-Use Value in Template:
            <span class="badge badge-warning badge-pill" *ngIf="cart$ | async as cart">
              {{cart$.totalItemsCount}}
            </span>



Task 3 - Rework Service to Use Interface:
    async getCartItemsMapped() {
      let cartId = await this.getOrCreateCart();
      let weh =  this.db.list('/shopping-carts/' + cartId + '/items/') as AngularFireList<ShoppingCart>
      return weh.valueChanges()
      .pipe(map(items => items.map(item => new ShoppingCart(item.items))));
    }


Note:
Although I made some progress integrating Moshes changes, was some difficultly Mapping the Service to return a ShoppingCart object with the correct data inside.
-The Shopping Cart worked, but the products inside were undefined.
-Async Pipe does not work with AngularFireList.
So for the reasons listed have noted his improvements, but kept my code as is.


---Tutorial 11 - Building a Simple Shopping Cart Page:---
So now we're ready to finally build the Shopping Cart Page. Again we're gonna do it in a step by step fashion. Lets start with displaying the data.


Task 1 - Setup ShoppingCartComponent:
-Would be nice to have Extracted this logic into the Service & ShoppingCart but alas no.

export class ShoppingCartComponent implements OnInit {
  shoppingCartItemCount: number

  constructor(private shoppingCartService: ShoppingCartService) { }

  async ngOnInit() {
    let cart = await this.shoppingCartService.getCartItems();
    cart.valueChanges().subscribe(cart => {
      this.shoppingCartItemCount = 0;
      cart.forEach(item => {
        this.shoppingCartItemCount += item.quantity
      });
    });
  }
}




Task 2 - Add Basic Markup:
-Lets get the basics up & running and see what this looks like.

<h1>Shopping Cart:</h1>
<ng-container *ngIf="shoppingCartItemCount">
  <p>
    You have {{shoppingCartItemCount}} Item in your Shopping Cart.
  </p>
</ng-container>


Task 3 - Add some more Advanced Markup:
  <table class="table">
    <thead>
      <tr>
          <th>Product</th>
          <th>Quantity</th>
          <th></th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let product of products">
          <th>{{product.productNode.product.title}}</th>
          <th>{{product.productNode.quantity}}</th>
          <th></th>
      </tr>
    </tbody>
  </table>


Task 4 - Update Component to Pass Data:
-Setting Products from Service

    let productList = await this.shoppingCartService.getProductsInCart();
    productList.subscribe(x => this.products = x);

-Mapping to Key & Payload to use in rendering Cart.

  async getProductsInCart() {
    let cartId = await this.getOrCreateCart();
    let cart =  this.db.list('/shopping-carts/' + cartId + '/items/');
    return cart.snapshotChanges().pipe(map(x => x.map(function(res){
      return {key: res.key, productNode: res.payload.toJSON()}
    })));
  }

Note:
Again the new Angular does not expose the nested products inside items so did it slighly differently.


---Tutorial 12 - Design Issue:---
So going with Moshes implmentation there are a few design issues we need to work out.

Issues:
-Iteraring using key in template is messy.
-Need Key Value Map for future lookups of data

Because of the Implementation Mosh has done, need a little refactoring of the Constructor of Shopping-Cart.ts.
-Define KeyValueMap for lookup
constructor(public items: {key: string}: shoppingCartItem)

-Declare Seperate value,Iterate & set Items for use in Template
items: ShoppingCartItem[];


Lucky for me I didn't use that method to render data so no changes needed.


----Tutorial 13 - Displaying the TotalPrice:---
So in order for us to get the TotalPrice calclated, we need to refactor some existing code.
If we flatten the nested Product Objects in our cart, it will be much easier to calclate total price, as quantity & price will be available to us on the same node.

Refactoring:
Task 1 - Rework Product Component & Card to use Flat ShoppingCartItem
-Create a Dummy Object in firebase with the required design.
Shopping-Cart Node
-DateCreated
-Items
	-ItemKey(ProductKEY)
		-ImageUrl
		-Price
		-Quantity
		-Title

-Task 2 - Create DTO Object with same data.
export class ProductItem {
  title: string;
  price: number;
  imageUrl: string;
  quantity: number;
}

-Task 3 - Refactor Service:
Where we get objects from the cart service eg getCartItems we need to return ProductItems.


-Task 4 - Refactor Components & Templates:
So where we previously passed an Array of ShoppingCart Items to the product card, and the Nav Bar we need to use the new ProductItem class instead.
This new object has the neccessary data for calculating totals eg quantity & price in the same object.
Also make sure the templates have the correct new fields that correspond to ProductItem.
-NavBar
-Shopping Cart
-Product Card



Task 5 - Flesh Out ShoppingCart:

-Component:
In the NgOnit we need to iterate over the items to get a TotalCount and calculate the TotalPrice.
Moshes approach is nice, he creates a Cart Object and they internally manage totalPrice & quantity.
But becuase firebase has changed its internal implmentation, we cannot get do the exact same.

      cart.forEach(item => {
        this.shoppingCartItemCount += item.quantity;
        
        //Refactor move into CartItem:
        this.totalPrice += (item.quantity * item.price);
      });
    });

    let productList = await this.shoppingCartService.getCartItems();
    productList.valueChanges().subscribe(x => this.products = x);


-Markup:
Decided to go with Embedding the calculation here, as this is where we are iterating over it.
<tbody>
      <tr *ngFor="let product of products">
          <th>{{product.title}}</th>
          <th>{{product.quantity}}</th>
          <th>{{(product.price * product.quantity) | currency:'USD'}}</th>
      </tr>
    </tbody>
    <tfoot>
      <tr>
        <th></th>
        <th>Total:</th>
        <th>{{totalPrice | currency:'USD'}}</th>
      </tr>
    </tfoot>



Note:
In General it is good to leave calculations out of templates as we want them to be as lean as possible.
Also for testability, it is much easier to test if they exist inside the component, rather than write integration tests and all the additional work.




---Tutorial 14 - Refactoring: Extracting Product Quantity Component:---
So in this section we want to refactor the + - methods for working with the shopping cart, so it can be reused in Shopping Cart & Products page.


Task 1 - Centralize Shopping Cart Methods in Shopping Cart Object:
So in conjunction with the Information Expert Principal, we should delegate responsabilities to the object with the most knoweldge.
By creating a Shopping Cart Object we can pass this cart around, and let the template interact to find Quantity & Price etc.

export class ShoppingCart {
  constructor(public items: ProductItem[]) { }

  getTotalItemsCount() {
    let count = 0;
    this.items.forEach(item => { count += item.quantity; });
    return count;
  }

  getQuantity(product: ProductNode) {
      let item = this.items.find(cartItem => cartItem.title === product.product.title);
      return item ? item.quantity : 0;
  }

  getTotalPrice() {
      let sum = 0;
      this.items.forEach(cartItem => {
          sum += (cartItem.price * cartItem.quantity);
        });
        return sum;
  }
}

Task 2 - Refactor Product Component to use new Cart Object:
-Remove ShoppingCartItems array in Favour of Shopping Cart.
  async ngOnInit() {
    this.subscription =  (await this.shoppingCartService.getCartItems()).valueChanges().subscribe(items => {
      this.cart = new ShoppingCart(items);
    });
  }

-Rework Template
      <ng-container *ngFor="let p of filteredProducts; let i = index">
        <div class="col-6">
          <product-card [product]="p" [cart]="cart"></product-card>
        </div>
        <div *ngIf="(i + 1) % 2 === 0" class="w-100"></div>
      </ng-container>


Task 3 - Create Product-Quantity Component:
-Extract Cart Methods

export class ProductQuantityComponent {
  @Input('product') product: ProductNode;
  @Input('cart') cart: ShoppingCart;

  constructor(private cartService: ShoppingCartService) {}

  addToCart() {
    console.log('Adding to cart...')
    this.cartService.addToCart(this.product);
  }

  removeFromCart(){
    console.log('Removing from cart...')
    this.cartService.removeFromCart(this.product);
  }
}
-Extract Quantity Footer into new template.
<div class="row no-gutters">
  <div class="col-2">
    <button (click)="removeFromCart()" class="btn btn-secondary btn-block">-</button>
  </div>
  <div class="col text-center">{{cart.getQuantity(product)}} in Cart.
  </div>
  <div class="col-2">
    <button (click)="addToCart()" class="btn btn-secondary btn-block">+</button>
  </div>
</div>


Task 4 - Refactor Product-Card to Use Cart Object
-Remove unnecessary methods in product card.
-Udpate Template
Because the Product Card has input propertier for cart & product, we can pass them directly to the product quantity component.
    <ng-template #updateQuantity>
      <product-quantity [product]="product" [cart]="cart"></product-quantity>
    </ng-template>


Task 5 - Manipulate Quantity InLine:
So rather than using the service to get quantity again, why don't we change the quantity on click, and pass a ProductItem not a Product.
This gets rid of loads of redundant code in our Service & concurrency issues with changing quantity.

    item.quantity = this.cart.getQuantity(this.product) + 1;

    this.cartService.addToCart(this.product.key, item);

In Summary:
Moshes design is slightly different to mine to had to do a couple design tweaks.
In my service the GetQuantity had to be updated, if the product had none to just make it 0.
ShoppingCart implmentation differs as we don't have the key values Mosh uses, works just as well though.
Could prob try look at refactoring the getQuantity in the service, and maybe how I go about switching from ProductNode to ShoppingCartItem,
like append quantity on AddingToCart, that way we don't repet it in the service, and fix the concurrency issue.


Additional Refactor:
-Service Cleanup, use quantity from UI, no need to do in service. - Done
-Nav Bar - Done
-Shopping Cart Component




---Tutorial 15 - Discovering a Design Issue:---
So in this section we're going to over a slight design issue with the Shopping Cart & Products Component.
The crux of the issue being the different data types, in Products Component we iteratre over a set of ProductNodes, check the cart if this exists then update the quantity.
However in the shopping cart, we don't have access to the ProductNode or the key attribute as a result.
This makes is difficult to reuse the same Quantity Selector component.


Task 1  - Add Key Property in Firebase:
This solution is a bit redundant, but in our case is the easiest to implement.

-Update ProductItem Model:
So when we add an Item to the Cart, we want to see the KEY field.

export class ProductItem {
  title: string;
  price: number;
  imageUrl: string;
  quantity: number;
  key: string;
}


-Rework Product-Card & Product-Quantity:
So now what we have the key propety, take it from ProductNode.key
  addToCart() {
    this.item.title = this.product.product.title;
    this.item.imageUrl = this.product.product.imageUrl;
    this.item.price = this.product.product.price;
    this.item.quantity = this.cart.getQuantity(this.product) + 1;
    this.item.key = this.product.key;

    this.cartService.addToCart(this.item.key, this.item);
  }

-Now we can see the key attribute on our Shopping Cart Items.

Task 2 - Create Component:
-Create Cart-Quantity Component
The Only difference here being we use ProductItems and not ProductNode. We then update the Quantity OnClick & pass to the service as normal.

  @Input('cartItem') cartItem: ProductItem;
  @Input('cart') cart: ShoppingCart;
  item: ProductItem = new ProductItem();

  constructor(private cartService: ShoppingCartService) { }

  addToCart() {
    this.item.title = this.cartItem.title;
    this.item.imageUrl = this.cartItem.imageUrl;
    this.item.price = this.cartItem.price;
    this.item.quantity = this.cartItem.quantity += 1;
    this.item.key = this.cartItem.key;

    this.cartService.addToCart(this.item.key, this.item);
  }


Task 3 - Use Component:
So lets add this into ShoppingCart Component & voila, we can update the Quantity in both the product card & shopping cart.
-Add Product Quantity & pass cart.
          <th><cart-quantity [cartItem]="product" [cart]="cart"></cart-quantity></th>
          <th>{{cart.getItemPrice(product) | currency:'USD'}}</th>


For Later:
Would be nice to have the same component used in both places, but the difference in Moshs version of firebase and mine makes it difficult.


---Tutorial 16 - Flattening Shopping Cart Items:---
This is not really applicable for me as I already simplified the shopping cart.

Task 1 - Create ProductItem DTO:
-Quantity, Title, Price, etc all in a single object


Task 2 - Update Service:
So when we are going to save this object make sure to use the ProductItem dto.

-Replace Nested Object with ProductItem DTO.
-Update Naming


Task 3 - Update ShoppingCart Template:
Because we have changed the data structure, we need to update our template to match.

Task 4 - Assign Objects:
Now when adding products to the shopping cart, use object.assign to copy the releveant data into our DTO, like auto mapper in C#.

To Do:
Seems when using Object.Assign i get this additional property Categories, not the end of the world but would be nice if it was cleaner.
Cleaner Code > Cleander DB at least for our application, not worried about performance.



---Tutorial 17 - Better Object Initialization:---
So in the last secttion we used Object.assign to copy over the items, that gave us the side affect of having additional elements like category which we don't want in the cart.
Another way is to spread the object using the ... operator.


Task 1 - Refactor Items to be initialized via constructor.
-Now add a partial generic class and take the values in using object.assign.

export class ProductItem {
  title: string;
  price: number;
  imageUrl: string;
  quantity: number;
  key: string;

  constructor(init?: Partial<ProductItem>){
    Object.assign(this, init);
  }


Task 2 - Add Properties Via spread opertator
So rather than creating an object, casting the values, THEN passing to the service, we can do it all in one go.
  addToCart() {
    this.cartService.addToCart(this.product.key, new ProductItem({
      ...this.product.product,
      key: this.product.key,
      quantity: this.cart.getQuantity(this.product) + 1
    }));
  }


So although this has not fixed the additional category property, it has cleaned up the code and useless object initialization.



---Tutorial 18 - Cleaning the Shopping Cart:---
So in this tutorial we're going to add a button to remove all items in the shopping cart.


Task 1 - Add Button:
-Add a button and onclick event to clearCart()
  </table>
  <button 
  (click)="clearCart()"
  class="btn btn-danger btn-sm">Clear Shopping Cart</button>
</ng-container>

-Call the Service from the Shopping Cart Component.
  clearCart() {
    this.shoppingCartService.clearCart();
  }


Task 2 - Remove Cart Item in service
-Simply get a reference to the cart using getCartItems, then use the .remove method and voila, cart cleared!
  async clearCart() {
    let cart = await this.getCartItems();
    cart.remove();
  }

  async getCartItems() {
    let cartId = await this.getOrCreateCartId();
    return this.db.list('/shopping-carts/' + cartId + '/items/') as AngularFireList<ProductItem>;
  }

Nice we can now clear the cart!