---Section 24 - Check Out Module:---
---Tutorial 1 - Introdution:---
So in this section we're going to flesh out the checkout section of our application.

Checkout Section:
After Reviewing the shopping cart we can proceed to checkout.
-Shipping Details
-Order Summary Widget
-Diverted to Order Success on completion of form.


Orders:
We also have an Admin & consumer version of the orders page. Admins can see every order whereas
users have the view tailored for them specifically.
Orders - Normal users
Manager Orders - Admin User



---Tutorial 2 - Adding Check Out Button:---


Task 1 - Add CheckOut Button:
So remember we have 2 ways of navigating, we can either redirect in the component using the Router or in this case add a routerLink
into the anchor & voila redirected.

  <a *ngIf="cart.items.length" routerLink="/check-out" class="btn btn-primary">Checkout</a>


Task 2 - Fix Styling:
So the whole point of our application if for users to buy things, lets make the clear cart button a little less conspicious.
btn-light is a nice grey box, styleing looks much better now!
  <p>
    You have {{cart.getTotalItemsCount()}} Item in your Shopping Cart.
    <button *ngIf="cart.items.length" (click)="clearCart()" class="btn btn-light btn-sm">Clear Shopping Cart</button>
  </p>


Test 3 - Test:
Logout, add items into your cart then click checkout. The check-out page is protected so we should be redirected to the login page, then be returned on sucessful
authentication.


---Tutorial 3 - Building a Shipping Form:---
In this section we're going to flesh out the Shipping Form.


Task 1 - Add Form Markup:
The process is very repetitive as we've already done this for products form. Copy & paste in the new markup.

Task 2 - Add Component:
Add the Shopping Cart Object & print to console to verify all is working correctly.



---Tutorial 4 - Saving the Order to Firebase:---



Task 1 - Add Cart subscription:
So before we can do anything we need to add the cart to our component.

  async ngOnInit() {
    let cart$ = await this.cartService.getCartItems();
    this.subscription = cart$.valueChanges().subscribe(cart => this.cart = new ShoppingCart(cart));
  }

  ngOnDestroy(){
    this.subscription.unsubscribe();
  }
  
  placeOrder() {
    console.log(this.shipping);

Task 2 - Create Order Object
So we're going to create an order Object like so, high level shipping details, then iterate through the cart items, extract a few details and save them under product.

    let order = {
      datePlace: new Date().getTime(),
      shipping: this.shipping,
      items: this.cart.items.map(i => {
        return {
          product: {
            title: i.title,
            imageUrl: i.imageUrl,
            price: i.price
          },
          quantity: i.quantity,
          totalPrice: (i.quantity * i.price)
        }
      })
    }
  } 



Task 3 - Create Order Service:
Just Add the order to the orders node and lets check out the result.

export class OrderService {

  constructor(private db: AngularFireDatabase) { }

  storeOrder(order) {
     return this.db.list('/orders').push(order);
  }
}


Result:
So we have a basic order being saved. We have items being stored as an array of numbers as the ID, then the various details.
So the ShoppingCart and Orders have different ways of arranging the data but thats okay. The way we're using orders we don't need to access them, at this point
the user has completed the transaction, the order is set.
In the next section we will look at appending more user information onto the order.



---Tutorial 5 - Associating Order with Current User:---
So to make the orders more useful, It would be useful to have the Current User details, so lets do that.


Task 1 - Retrieve UserID using User Service:
So we have the UserSerive, and the method got getting the current user. Can store this and append to our order object.
-Add UserService to Component
-Store UserID
-Pass to Order Object

  placeOrder() {
    console.log(this.shipping);
    let order = {
      userId: this.userId,
      datePlace: new Date().getTime(),
      shipping: this.shipping,
      items: this.cart.items.map(i => {


Task 2 - Test:
Make sure to test the order creation & verify the userId is appended to the order object.



---Tutorial 6 - Refactoring: Extracting a Rich Model:---
So our placeOrder method is getting very bulky, how can we go about simplfying this code? Lets create a Rich Model to handle this complexity internally.


Task 1 - Order Object:
So if we create an Order Model, we can push much of the logic there.
-Compute DateTime in constructor
-Let Order Object map the various properties.
-set Items(NOT productItems, less detailed order item) in the product node with the basic items needed.

export class Order {
    datePlaced: number;
    items: any[];

    constructor(public userId: string, public shipping: any, shoppingCart: ShoppingCart){
        this.datePlaced = new Date().getTime();

        this.items = shoppingCart.items.map(i => {
            return {
              product: {
                title: i.title,
                imageUrl: i.imageUrl,
                price: i.price
              },
              quantity: i.quantity,
              totalPrice: (i.quantity * i.price)
            }
          })
    }
}

Task 2 - Refactor Component:
Now all that complex messy code has been extracted to our Rich Model.

  placeOrder() {
    console.log(this.shipping);
    let order = new Order(this.userId, this.shipping, this.cart);
    this.orderService.storeOrder(order);
  }    


Task 3 - Test:
Place an order and make sure the same object structure is created.



---Tutorial 7 - Redirecting the User:---
So now that we've settled on the DB model, lets work on redirect the user to Order Success on completion of the order form.
 -Navigate to Order Success with the newly created object ID as a route parameter.

Task 1 - Add ID Parameter to Route:
      {path:'order-success/:id', component: OrderSuccessComponent, canActivate: [AuthGuard]},


Task 2 - Redirect on Completion:
So we have 2 approaches, we could use .then and route, and just await the result and pass the key into our router navigate.

  async placeOrder() {
    console.log(this.shipping);
    let order = new Order(this.userId, this.shipping, this.cart);
    let result = await this.orderService.storeOrder(order);
    this.router.navigate(['order-success', result.key]);
  }    


Task 3 - Test:
So lets test the route, and make sure the correct order key is used, we can later used this to build out an order summary.
http://localhost:4200/order-success/-LZZKnzFstBgtzRpORCf




---Tutorial 8 - Clearing the Shopping Cart:---
So now lets get working on Clearing the cart.
We want to clear the cart in such a way, that if we provide other routes to checking out(like quick checkout), we still clear the cart on completion.
So rather than putting it directly in placeOrder, we can put into the service method storeOrder.


Task 1 - Clear Cart:
export class OrderService {

  constructor(private db: AngularFireDatabase, private shoppingCart: ShoppingCartService) { }

  async placeOrder(order) {
     let result = await this.db.list('/orders').push(order);
     this.shoppingCart.clearCart();
     return result;
  }
}


Note:
We renamed storeOrder to placeOrder as it is more fitting. The service is not only responsible for storing data, but orchastrating with other service.
Thus placeOrder is more appropriate.


---Tutorial 9 - Transactions:---
Look at the current implementation of placeOrder method in OrderService:

async placeOrder(order) {

let result = await this.db.list(‘/orders’).push(order);

this.shoppingCartService.clearCart();

return result; 
}

In this implementation, it is possible that the second line (for clearing the cart) fails for some unexpected reason while connecting with Firebase.
A more reliable approach is to have a transaction. This will ensure that during placing an order, an order object is stored AND the corresponding shopping cart is cleared. Either both these operations succeed together or they both will fail.
Using a transaction involves updating multiple nodes and that’s beyond the scope of this course. I’ve covered that in my course “Build Enterprise Applications with Angular”.


--Tutorial 10 - Adding an Order Summary Widget:---
So now that we've build the check out process, lets implment the Order Summary Widget.


Task 1 - CleanUp Checkout Markup:
-Break the Page into 2 sections, shipping form and order summary widget
-Generate the shopping cart summary component
-Use the shopping-cart-summary selector

<h2>Shipping</h2>
<div class="row">
  <div class="col-6">
    <form #f="ngForm">
    </form>
  </div>
  <div class="col-6">
    <shopping-cart-summary></shopping-cart-summary>
  </div>
</div>


Task 2 - Flesh Out Order Summary Markup:
Lets add a simple bootstrap card to contain the order summary details.


Task 3 - Get Data:
We have 2 methods for getting the shopping cart, we could use the cart service inside our new
component, or we could pass it as an input property.
To avoid multiple calls to firebase however, it is better for us to use input properties.

export class ShoppingCartSummaryComponent implements OnInit {
  @Input('cart') cart: ShoppingCart;



Task 4 - Display Cart Data:
<div *ngIf="cart" class="card">
  <div class="card-body">
    <h5 class="card-title">Order Summary</h5>
    <p class="card-text">You have {{cart.getTotalItemsCount()}} items in your Shopping Cart.</p>
    <ul class="list-group list-group-flush">
      <li *ngFor="let item of cart.items" class="list-group-item">
        {{item.quantity}} x {{item.title}}
        <div class="float-right">{{cart.getItemPrice(item) | currency: 'USD': true}}
        </div>
      </li>
      <li class="list-group-item font-weight-bold">
        Total
        <div class="float-right">
            {{cart.getTotalPrice() | currency: 'USD': true}}
          </div>
      </li>
    </ul>
  </div>
</div>

Nice work we now have a nice order summary widget that is in sync across the application.



---Tutorial 11 - Refactor:---
So one thing I don't like about the current implmentation is the different layers of abstraction. On the Shipping form we have lots of complex markup whereas on the right
we only have a call to the order summary widget. Our approach should be consistent, so lets extract the shipping form into a component.


Task 1 - Extract Shipping Form:
-ng g c shipping-form
-Use selector shipping-form
-Extract Markup from CheckOut into Shipping Form


Task 2 - Extract from Component:
So we need to extract the various component logic including authenticatoin & the placeOrder logic.

export class ShippingFormComponent implements OnInit, OnDestroy {
  @Input('cart') cart: ShoppingCart;

  shipping = {};
  userId: string;
  userSubscription: Subscription;

  constructor(private orderService: OrderService, private authService: AuthService, private router: Router){}

  ngOnInit() {
    this.userSubscription = this.authService.user$.subscribe(user => this.userId = user.uid);
  }

  ngOnDestroy() {
    this.userSubscription.unsubscribe();
  }

  async placeOrder() {
    console.log(this.shipping);
    let order = new Order(this.userId, this.shipping, this.cart);
    let result = await this.orderService.placeOrder(order);
    this.router.navigate(['order-success', result.key]);
  }   
}


Now the way Mosh does it is slighly different, rather than getting the data directly in our component, he passes an obseverable which we unwrap in the template.
This does not work for us however as AngularFire returns the data as an AngularFireList, not directly an obseverable.



---Tutorial 12 - Displaying the Orders:---
We have built the checkout process, now we should give the user the ability to view the finished orders.
We have already covered the neccessary work to implement this, but to avoid repetition we will just copy & paste from the solution.


Task 1 - Add Order Service methods
For the Non-Admin interface, we need to filter by the UID.

  getOrdersByUser(userId: string) {
    return this.db.list('/orders', order => 
      order.orderByChild('userId')
      .equalTo(userId));
  }



Task 2 - Create Components & Markup:
This one is slighly more complex as we have to ensure the subscription is terminated as on logout we lose the UID which is critical for this list.

export class MyOrdersComponent implements OnInit, OnDestroy {
  orders = [];
  subscription: Subscription

  constructor(
    private authService: AuthService,
    private orderService: OrderService) {

    }

    ngOnInit() {
      this.subscription = this.authService.user$
      .pipe(switchMap(u => 
        this.orderService.getOrdersByUser(u.uid)
        .valueChanges()))
        .subscribe(orders => this.orders = orders);
    }

    ngOnDestroy() {
      this.subscription.unsubscribe();
    }
  }

Exta Task:
It seems when selecting logout, we get errors finding UID becuase the state is cleared but the subscription has not be cancelled.
Fix was to implment onInit & ondestory, and also redirect on logout to ensure the component is recycled.

  logout() {
    console.log("Logging Out...");
    this.router.navigateByUrl('/');
    this.afAuth.auth.signOut();
  }

  

---Tutorial 13 - Fixing a Bug:---
Small bug on the shipping form, we can submit the form even if its not complete...
  
Task 1 - Disable Submit:
    <button 
    [disabled]="!f.valid"
    (click)="placeOrder()" 
    class="btn btn-primary">Place Order</button>
  </form>


Thats it for this section, in the final section we'll look at the last improvements to the application.