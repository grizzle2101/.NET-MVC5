---Section 24 - Check Out Module:---
---Tutorial 1 - Introdution:---
So in this section we're going to flesh out the checkout section of our application.

Checkout Section:
After Reviewing the shopping cart we can proceed to checkout.
-Shipping Details
-Order Summary Widget
-Diverted to Order Success on completion of form.


Orders:
We also have an Admin & consumer version of the orders page. Admins can see every order whereas
users have the view tailored for them specifically.
Orders - Normal users
Manager Orders - Admin User



---Tutorial 2 - Adding Check Out Button:---


Task 1 - Add CheckOut Button:
So remember we have 2 ways of navigating, we can either redirect in the component using the Router or in this case add a routerLink
into the anchor & voila redirected.

  <a *ngIf="cart.items.length" routerLink="/check-out" class="btn btn-primary">Checkout</a>


Task 2 - Fix Styling:
So the whole point of our application if for users to buy things, lets make the clear cart button a little less conspicious.
btn-light is a nice grey box, styleing looks much better now!
  <p>
    You have {{cart.getTotalItemsCount()}} Item in your Shopping Cart.
    <button *ngIf="cart.items.length" (click)="clearCart()" class="btn btn-light btn-sm">Clear Shopping Cart</button>
  </p>


Test 3 - Test:
Logout, add items into your cart then click checkout. The check-out page is protected so we should be redirected to the login page, then be returned on sucessful
authentication.


---Tutorial 3 - Building a Shipping Form:---
In this section we're going to flesh out the Shipping Form.


Task 1 - Add Form Markup:
The process is very repetitive as we've already done this for products form. Copy & paste in the new markup.

Task 2 - Add Component:
Add the Shopping Cart Object & print to console to verify all is working correctly.



---Tutorial 4 - Saving the Order to Firebase:---



Task 1 - Add Cart subscription:
So before we can do anything we need to add the cart to our component.

  async ngOnInit() {
    let cart$ = await this.cartService.getCartItems();
    this.subscription = cart$.valueChanges().subscribe(cart => this.cart = new ShoppingCart(cart));
  }

  ngOnDestroy(){
    this.subscription.unsubscribe();
  }
  
  placeOrder() {
    console.log(this.shipping);

Task 2 - Create Order Object
So we're going to create an order Object like so, high level shipping details, then iterate through the cart items, extract a few details and save them under product.

    let order = {
      datePlace: new Date().getTime(),
      shipping: this.shipping,
      items: this.cart.items.map(i => {
        return {
          product: {
            title: i.title,
            imageUrl: i.imageUrl,
            price: i.price
          },
          quantity: i.quantity,
          totalPrice: (i.quantity * i.price)
        }
      })
    }
  } 



Task 3 - Create Order Service:
Just Add the order to the orders node and lets check out the result.

export class OrderService {

  constructor(private db: AngularFireDatabase) { }

  storeOrder(order) {
     return this.db.list('/orders').push(order);
  }
}


Result:
So we have a basic order being saved. We have items being stored as an array of numbers as the ID, then the various details.
So the ShoppingCart and Orders have different ways of arranging the data but thats okay. The way we're using orders we don't need to access them, at this point
the user has completed the transaction, the order is set.
In the next section we will look at appending more user information onto the order.