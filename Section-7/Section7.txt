----Section 7 - Template Driven Forms----
---Tutorial 1 - Inroduction---
In this section we're going to look at building forms with Angular.
-Implement Forms with different kinds of input fields.
-Display Validation Errors
-Disable Submit Button until form is valid.

---Tutorial 2 - Building a Basic Bootstrap Form---
We're just going to setup the form for this section, then iterate over it in each tutorial.
Forgot to install boostrap & add boostrap to style.css, but all sorted.

Task 1 - Build Really Simple BootStrap Form.


---Tutorial 3 - Types of Forms---
In Angular we have the concept of Form-Groups and Form-Controls. Form Group is a collection of Form Controls, and provides much of the same 
functionality like touched, valid, prestine etc allow us to validate the data in our form. Form-Group just allows us to apply this on every element,
where as Form Control is for a specific field.

In Angular there are 2 ways to achieve this, Directives & Code.

Template Driven forms:
We can apply some directives in our template, which allows Angular to build these Form Groups & Controls under the hood. 
We call these Template driven forms, where we generate the markup directly from the template.

Reactive/Model Driven Forms:
Explicity creating the control objects into our Markup or manually, is called Reactive forms or Model Driven Formns.

Whats the Difference?
Reactive:
-More Control over Validate Logic
-Good for Complex Forms
-Unit Testable

Template Driven:
-Good for Simple forms
-Simple Validation (required fields)
-Easier to Create
-Less Code


---Tutorial 4 - ngModel:---
So carrying on from our basic bootstrap form, we want to add validation with a template driven form.
So we need to use the ngModel directive, and allow angular to create a control object on our input fields.

Task 1 - Add ngModel to Form
Note that the Name field is required for Angular to create a control object.

Task 2 - Pass NgModel data to Log method.
If we bind to the Change event of our input, we can pass the NgModel and display it to get a better idea of whats happening under the hood.
(change)="log(firstName)"

Task 3 - Log the ngModel to Console
It Seems assigning ngModel to a template model does not wor anymore, NgModel not exportable anymore.
But the idea is not lost, we can pass the model and print out its data to get a better understanding.

Morale of the Story:
So we can pass the value of NgModel and see the various internal propeties NgModel uses to keep track of the data inside the Form-Control/Group.
We can use these values to dynamically validate our forms & data.

Problem:
With the Last Section could not bind NgModel to Template variable, this was because it was not added to App Module.these
import { FormsModule } from '@angular/forms'; Works now!

---Tutorial 5 - Adding Validation:---
Now that we know vaguely how NgModel works, we can begin to validate the data in our form.

Task 1 - Make FirstName field required.
Simply use the HTML attribute required.

Angular NgModel builds the Form control onto our firstName input, which also contains the requied value now.

Task 2 - Add Alert for Invalid Data.
Using a combination of NgIF & the data in NgModel, we can prompt the user to enter a Name!

---Tutorial 6 - Specific Validation---
Angular uses the built in HTML5 validtion properties, in this section we're going to go over a few of them.

Task 1 - Apply some Specific Validation attributes
minLength
maxLength
pattern - Makes sure the Input complies with a given Regex.
There are plenty more out there, so make sure to google them! or Explore the NgModel properties for a full list.


Task 2 - Create Seperate Validation Error for Each Rule
For each of the HTML error properties, we have NgModel.error, we can add an NgIF
for each of the possible errors, with its own custom error message.

Task 3 - Display the NgModel Errors in our Custom Errors:
Say the value of our MinLength may change at any time, and we want to make sure the message reflects the new value.
This can be done by directly accessing the error.minLength property.

Morale of the Story:
Use the NgModel Errors to create custom Validation errors, and also make the Message dynamic with string interpolation
of the Errors properties eg required length. 

----Tutorial 7 - Styling Invalid Input Fields---
As a best practice we should highlight the invalid field.
If we look at the invalid input box, we can see the extra classes angular appends to form-control.
We can take this new class & apply some styling to highlight the invalid field.

Task 1 - Add Style for Invalid Input Fields.
After looking at the angular classes applied when the field goes is invalid, just add this custom style for that class and voila!
.form-control.ng-invalid.ng-touched



---Tutorial 8 - Cleaner Templates---
So by now our template has got a bit messy, a general software rule is that another developer should not have to scroll left or right.
So lets clean that up.

Task 1 - Clean Up template Html.
General Housekeeping, breaking up big lines into smaller more manageable chunks


---Tutorial 9 - NgForm---
So we have learned by using NgModel, Angular will create a HTML5  Form-Control under the hood.
What we have not seen yet is a Form Group, this is because where have a FORM in HTML, angular knows that this is form group, and everything
inside is a form control. 

If we lookup NGForm on the Angular site, we can see the selectors are any kind of form, EXCEPT when using ngNoForm or NOT FORM GROUP.
To help our understanding of this process, lets save NgForm to a template variable then pass it into a console.log.

Task 1 - Pass NgForm & Log
Now we can check out all of the various parts in the NgForm object.

NGSubmit Output Property:
If we look into the Property we can see NgSubmit, this is an output property of the NgForm.
So this would allow us to listen for changes in the NgSubmit and hook it into the input of another component like a toaster message.

Task 2 - Pass NgForm on NGSubmit
So now when we click the submit form button, we can see the NgSubit Event is triggerd and we can see some of the properties.
Prestine, Dirty etc which tells us if the form as a WHOLE and the entire Form-Group is okay.

Also if we look inside the Form Group, we see a dictionary list of values, the name of the values being the name we set in the HTML.
name: value, basically it is a JSON representation of our form, so if we get f.value it is a straight forward process
to send out JSON to a server for processing.

---Tutorial 10 ngModelGroup---
Sometimes when working on complex forms, we might have multiple Form Groups.
So just as we have NgModel to hold simple data, we have NgModelGroup to allow us to store Form Groups like address, billing details etc.


Task 1 - Create NgModelGroup
So we've just crated a DIV containing the various input fields the make up the contact details section.
Now if we check out the Console, we can see this complex object represented in our NgModel, Contact details with the person input fields.

Note:
If our API's expect a complex nested structure like this, this is the way to go! NgModelGroup.

Task 2 - Bind NgModel Group to Validate entire sections.
So this is a nice feature, if we have really massive forms, we can tell you which section is invalid and allow the user to correct this.

Take Home:
Use NgModelGroup to build collections of data under certain sections like Contacts & Billing. This will make it easier to integrate with
API's and also mark entire sections of forms as invalid.


---Tutorial 11 - Control Classes & Directives---
It seems like in this section there is a lot of overlap in the various directives.
Just remember we have Form Control & Form Groups, for Form Control we use ngModel, and bind to the name of that input field.
For Form Groups we have ngForm, which is a directive automatically applied to ANY form, unless it contains ngNoFormgroup or a few other 
specific selectors.

NgModelGroup is a container of many OPTIONAL form controls. We can bind the NGModelGrouop diretive to various parts of the form
to better seperate it into logical section & structures that match out API.

Whats the Difference between ngForm & ngModelGroup?
NgForm Exposes the Output property ngSubmit which we use to bind to Submit event for forms, whereas NgModel Group does not.
IE we don't submit part of a form.


---Tutorial 12 - Disabling the Submit Button---
So now that we have a good grasp on the form compoments, lets start by disabling the Submit button until the form is filled out.

Task 1 - Disable Submit Button
As we already declared the template variable holding the ngForm, we can just disable the submit button until the form is complete.
