-----Section 10 - Routing & Navigation-----
---Tutorial 1 - Introduction---
So in this section we're going to look at Routing & Navigation, and by the end of this section you should have
in depth knowledge of the following:
-Configuring Routes
-Implmententing Single Page Applications
-Working with Route & Query Parameters
-Programatic Navigation


---Tutorial 2 - Routing in a Nutshell---
So far we have seen a few of the built in Modules like Forms, ReactiveForms & Http Module.
Now we have the router module, which has directive & service for Implmententing Navigation.

There are 3 steps to Implmenting Routing:
-Configure the Routes (Mapping of Path to Component)
-Add a Router Outlet (Displaying of a Component when route becomes active)
-Add Links

In the upcoming tutorials we are going to go over each of these steps in detail.

---Tutorial 3 - Configuring Routes---
So remember in the previous tutorials we made the Followers and the Posts component, in this section we're going to try configure a route between the pages.

So We're going to open up this more into a traditional webpage where we have a list of followers, then we can click to get more details on the follower.
-Creting a Route localhost/followers
-Creating a Route to Individual Followers eg localhost/profile/Username/ID?QueryParam
-Creating another Route localhost/Posts
-Linking between Followers & Posts with a link.

Task 1 - Import the Package Project supplied by Mosh
So by now we've noticed all the new components in the SRC folder. We are going to use these components to provide a NavBar which we can route to the various components.
In the NavBar component we have 2 links, Followers & Posts.

Task 2 - Add Router Details into Module.TS
-import { RouterModule } from '@angular/router';
-RouterModule.forRoot() = Static Method for Defineing Routes of our application
-RouterModule.forChild() = For Breaking up the application into child elements.

Task 3 - Define our Routes:
So we use the forRoot to hold an array of Path & Component, this is how we point locations eg localhost/persons to a PersonsComponent.
-RouterModule.forRoot([{path: '',component: HomeComponent}]) 
-Notice there is no trailing / for the Home Component.

The Rest of the Paths:
      {path: '',component: HomeComponent},
      {path: 'followers/:username', component: GithubProfileComponent},
      {path: 'followers', component: GithubFollowersComponent},
      {path: 'posts', component: PostsComponent},
      {path: '**', component: NotFoundComponent} //WildCard Catches any other Route the User may give.
      

Note:
-we use :variablename to declare a variable inside the route, this will let us pass values to the comonent and so we can serve Unique profiles.
-Make sure to arrange these Routes from MOST specific to LEAST. Because the are executed sequentially, and we could get the WildCard route before anything else.
the same also applies for Using followers and followers:id, we will be servred the followers component first which could throw us off.

Take Home:
-** Wildcard basically means ANYTHING else. We use this for when a user types a not defined route.
-path:'route/:variable' is used to declare variables inside the route.
-Routes are ordered in Sequence, so be careful when ordering, go from MOST specific to least.
-To Define Routes we just import RouterModule, use forRoot() and provide keyvalue pairs of Path & Components.



---Tutorial 4 - Router Outlet---
So after the previous section we added the Routes for Paths to Components, which should allow us to navigate between the various components.
The problem right now is we get an error "Cannot find primary outlet to load HomeComponent"", this is because we haven't done step 2 yet.
We need to add a Route Outlet, so we have an area for the Routed Component to appear.

-Task 1 - Add a Router Outlet:
This is how Angular is going to display the component associated with the current route.

App Component HTML:
<navbar></navbar>
<router-outlet></router-outlet>
<!--Area For Routed Component-->

Note:
This directive tells Angular to insert the Current Routed compoment on the Page.
If we use developer tools we can now see the HomeComponent in the main page.

Tests:
So now we should test the Routes to see if we get the correct Components:
localhost/ - HomePage with HomeComponent
localhost/followers - Followers Page
localhost/followers/1 - Individual Follower Page
localhost/posts - Posts
localhost/invalid - Custom Invalid Url Page

Next on the list is the links, we need action links to move us from Posts to Followers etc.

---Tutorial 5 - Router Link---
So now that we've added the Router Outlet, we have 1 more thing to do.... Adding Links in the Navigation.
In HTML we use <a href> as links, but in Angular we do not use this.

-Task 1 - Add /followers & /posts into NavBar:
This does work, however you notice the whole page redirected & flickering, this is because we we loaded the entire page.
As the application grows, the cost of this startup is going to more noticeable, we should only be loading what we need.

-Task 2 - Replace HREF with RouterLink:
So lets look at the Angular alternative RouterLink, just replace href with routerLink in the HTML.
Much faster! Now only the content in the component gets loaded, not the entire page.
If we check the network stab we can see only the service data for getting followers, no initialization of our javascript packages or anything.

Note:
The Router Outlet is the section for the currently selected route to appear, when we change the Route using routerLinks, only the content in the Component is loaded and placed
into the Router Outlet. This is how single page applications are commonly done.
Much more effiecent to only load the content needed for a small part of the application, while the rest remains, very cool!

-Task 3 - Add a link for Each Follower:
So this one is a little different, we are not sending the User to a static page we need to use the Login Name or ID to render a Unique page.

We use routerLink not a an attribute but with property binding. we bind the value of routerLink to a dynamic array including the path eg /followers
and any additional parameters, we only need one parameter though, the ID so this works for us.
<a [routerLink]="['followers', follower.id]">{{ follower.login }}</a>

In Summary:
-For Simple (static) routes use routerLink="/followers"
-For Rout Parameters use property binding syntax, passing a path & additional parameters as needed.

---Tutorial 6 - RouterLink Active---
So by now you've noticed that the Followers link is always highlighted, even when we
aren't on that page. So fix this we need to only apply this style with the link is active..

Task 1 - Rework  Link Highlighting:
The Router Module has a built in directive to handle this called routerLinkActive.
We provide the CSS classes to be applied when the link is active.


---Tutorial 7 - Accessing Route Parameters---
So if we remember our Route Setup we created a route that takes in a parameter
{path: 'followers/:username', component: GithubProfileComponent}
In the real world we would have a list of Users, then select to call a service which serves the selected user account.


Task 1 - Import Activated Route:
In the GithubProfile.ts component we want access to the data passed by the route, so to do this we must import ActivatedRoute in our constructor.

Task 2 - Subscribe to paramMap:
So the routing data is stored in this.route.paramMap, and if we check the type we can see this is Observeable.
So just like HTTP Services, we can probabaly Subscribe to this and get our Route Data...

Note:
So if we log at the param map we logged to the console, we can see the param map object, how we we can interact with it.
The most useful of these is GET, GETALL, HAS & KEYS. We can use this to select route parameters.

Task 3 - Getting Parameters:
Now that we know the ParamMap object we can use params.get('username') to get the Username value and pass this to our ProfileService.

Note:
Be careful when naming these routes & variables, make sure they are named correctly. Carrying on with this, we will rename username to ID, becasue thats what it is.

TopTip:
So when accessing the Route Parameters, they are normally set as strings. To Convert then to Numbers, use the + operator.
let id = +params.get('id');

Task 4 - Cast Param & Pass to Service:
let id = +params.get('id');
service.getProfile(id); //Example Call to service.

So you're probabaly wondering why we deal with Route Params as Observeables, surely that makes it more complex?
Why not have a simple API where we can just access the routes key value pairs.... coming up in the next tutorial.


---Tutorial 8 - Why Route Parameters are Observeables---
So before we go into detail on why Route Parameters are Observeables we have to understand what is happening with the routes.

Example 1 - Navigating from A to B:
-As we navigate from Component A to Component B, A is Destoryed and we initialize Component B.
-OnInit, OnDestroy are examples of Component LifeCycle hooks. If we want to be notified when a component is destoryed, we can implment OnDestroy as we do with OnInit.

Example 2 - Same Component with different Route Parameters:
-If we have a table of Transactions, when we click next, we don't destoryed the component, we just reload the data inside.
-We have the same Component Instance with different route parameters.
-This is exactly the reason Route Parameters are Observeable.

Note:
Observerables are simply a collection of asycronous data that arrives over time, we can use Observeable to model streams of asycronous data, and anyone whole
is subscribed will be notified.

Task 1 - Experiment - Demonstrate the Follower Profile initialization:
So Lets remove all the Code where we access the params and test a few things.
console.log("GithubProfileComponent OnInit");

So if we Click from the followers page, to a follower we can see the component is initialized each time.

Task 2 - Experiment - Changing Route Params:
-Add a Button to Profile to go Next or Previous between the follower profiles.
<button [routerLink]="['/followers', 1234]" class="btn btn-primary">Next</button>

-So by creating some new route route parameters, we can see the when we click next, we only get 1 OnInit, the component is being recycled with new data!
-This Verifies Angular did NOT destory this component!

Task 3 - Revert Changes Made:
-Undo the Logging, just Subscribe to RouteParams as normal.

Morale of the Story:
-Where we have Single Page Applications, the component may not be re-initialized, so RouteParams exist as Observeable Streams of data outside of the components
-That way we can have the same Profile Component, just different data or RouteParams inside it.

Other Method to Access Route Parameters:
So if you are 100% sure, you are never going to have Permant Components like Transactions or Profiles, there is another way to access the Route Parameters.

Task 4 - Accesing Route Param w Snapshots:
So rather than using Observeable, we can use snapshot and get the value from the newly initialized components.
 let id = this.route.snapshot.paramMap.get('id');
-Again this should only be used if we're 100% sure that we're not going to reuse Components, but must create new ones each time.