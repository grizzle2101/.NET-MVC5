-----Section 9 - Consuming HTTP Services-----
---Tutorial 1 - Introduction---
So far we've looked at a lot of Angular Fundamentals, in this section we're going to look at consuming HTTP services.
By the end of this section, we're going to be able to connect our Components to the backend API's.
-Perform CRUD Operations(Create, Read, Update & Delete)
-Extrace a reuseable data services
-Properly Handle different kinds of Errors
-Building Applications with proper serperation of concerns.

This section is quite long, so make sure not to take breaks and follow along the code examples in each section.


---Tutorial 2 - JSON Placeholder---
So as we know Angular is a front end framework, we built it to use client applications. In most real world applications however we need a bunch of HTTP services
to get or save data. We are not going to be building backends in this section, but instead using http://jsonplaceholder.typicode.com/

---Tutorial 3 - Getting Data---
So lets try get some data from JSON Placeholder.

Task 1 - Import HttpModule to app.module.
By importing HttpModule, we're importing a list of HTTP Modules, and their dependencies as providers.


Task 2 - Create Constructor:
So in the Constructor, we take in HTTP, make a GET request then subscribe.
Remember when dealing with Asynchronous Validation, we said a Promise or Observeable is a command to tell the Thread to come back to this once we get data from the Endpoint.
Subscribe is an Observeable method, we subscribe to get notified when this GET has finished.

constructor(http: Http)
  {
    http.get("http://jsonplaceholder.typicode.com/posts")
    .subscribe(response => {
      console.log(response);
    });
  }

The Subscribe method has a few overloads, one of which allows us to take in a response and return void.
We can use this to manipulate data in the subscriber, so the response data from our GET.

Task 3 - Convert Response to JSON:
So we can see the Response, which contains lots of data like the Headers, MetaData & the actual posts.
So format this into something actually useable, we need response.json()

Task 4 - Render API Data in HTML:
Quite Straight forward, just need to Create a list, iterate over the posts using *ngFor, use string interpolation to inject post.title and bam we got a list of data.

Note:
When creating a new project, make sure to use the command - npm install bootstrap, then also make sure tue global style sheet is there.


---Tutorial 4 - Creating Data---
Let see how to take this to the next level, and create some posts.

Task 1 - Create an Input Field. 
-Create a Template Variable to Store Input #title then pass this to createPost method.


Task 2 - CreatePost Method in Component:
-Add the CreatePost method
-Http in our constructor, append private to make this a private variable in our component.
-Http.Post, takes 2 parameters the URL & JSON object to be posted.
-Every Http method in Angular has the subscribe method, this allows us to write the response to console.

Task 3 - Add Newly Created Item to List:
Because our API is a mock, it does not create the returned data like it should. Once given the Object, it should return it with a new ID, and additional details as
as needed. To Simulate this, we can use the response data, append this to our post Object, and throw it back to our Post List & voila!


---Tutorial 5 - Updating Data---
Next step, lets update some existing data!

Task 1 - Create Update Button for Each Post:
Create a simple button, bind the click event to CreatePost() and pass the post object.

Task 2 - Create CreatePost Method in Component:
We can use either POST or PATCH to send the updated Posts. In General though, PATCH is used when only sending part of object, like when ready an email you might only patch
the IsRead field, as opposed to send a entirely new post. so PUT is used to whole objects, PATCH is for partial data.

Post Usage:
this.http.post(this.url, JSON.stringify(post));

Patch Usage:
this.http.patch(this.url, JSON.stringify({isRead: true}));

Task 3 - Provide API ID:
We are getting errors when we kick off the Patch, that is because we do not have an ID for the post we wish to udpate.
By Adding the / and post.id we can now target the specific element we wish to update.
this.http.patch(this.url + '/' + post.id,JSON.stringify({isRead: true}))

Note:
If we check the Network Tab, find the PATCH call and check the request payload. We can see the payload is ONLY the isRead: true.
If we tried a PUT instead, we would see the entire object being sent.
Make sure to check an API supports PATCH before implementing something like this. This can however make our footprint much smaller,
and cut down on a lot of data & operations if we have complex objects.

---Tutorial 6 - Deleteing Data---

Task 1 - Add Delete Button
Same as before, just copy the update button and edit it to Delete & DeletePost method.

Task 2 - Implment DeletePost Method:
Very similar to the previoud CRUD methods, we just use the DELETE verb instead.
We only send the ID of the element we wish to delete, no object to be sent.
Once thats is complete, in the response, we find the index of our selected post, then splice it from our collection.
Voila we can now delete items from our list.


---Tutorial 7 - OnInit Interface---
So in the constructor we have our GET which loads the initial list of Posts for our application.
As a best practice, constructors should be very small and lightweight, we shouldn't perform expensive operations like Getting the posts.

When Should we GET this data?
Components in Angular have "LifeCycle Hooks", special methods that we add to our components then at a specific time Angular will call these methods at specific times.

LifeCycle Hooks:
-Creates a Component
-Renders It
-Creates & Renders its Children
-Destroys a Component

If we created components using the Angular CLI, we saw they automatically use OnInit, this is one such lifecycle hook.
So we have to implment OnInit, and complete the method defined there.

LifeCycle Hooks:
-OnInit
-OnChanges
-DoCheck
-AfterContentInit
...
Each of these LifeCycle hooks is a class, with a method of the same name prefixed with Ng. Eg NgOnInit, NgOnChanges etc.

Task 1 - Move Get Logic into NgOnInit:
So we just need to move the logic for getting posts into NgOnInit.

Morale of the Story:
If we want to NewUp objects or data, use NgOnInit instead of the constructor.
We also don't have to inherit from OnInit, just by having the NgOnInit method in our component, Angular will know. Its just by inheriting it we get compile time checking.


---Tutorial 8 - Seperation of Concerns:---
So the problem with our current implmentation is the Component takes on the responsibility for the API & manipulating the presentation layer.
This violated the Seperation of Concerns rule, where our classes should have a single responsibility.
There are several key benefits to refactoring, and moving our API to a Service including;
-Less Duplicate API code
-Changes to API are centralized
-More Unit Testable (not reliant on sevrver data, & can mock HTTP Service)
-Service is reuseable

In the next section we're going to extract the API responsibility to a service!

---Tutorial 9 - Extracting a Service---

Task 1 - Create a Service
ng g s post

Task 2 - Add a reference in Providers;
Add PostService into the providers. This will help the dependency injection framework figure out where the service is.

Task 3 - Create Services Folder:
For better organization, we should not just dump everything into app like the CLI does by default, lets move the service files into the Service folder.

Task 4- Refactor:
-Remove Http imports & Variable declaration
-Rework Constructor, use PostService instead of Http
-Move every Http.get, .put, .update into the service.
-use the newly created service methods to get the promise object returned from the Http Module.
-Carry on adding & removing objects from the DOM as normal.
-Check for the Various Imports in AppModule, Component & service to make sure looking in correct location.

Morale of the Story:
Extract the HTTP requests to a Service, this provided a centralized place for all service calls, which we can reuse and maintain in a single file.
Return the Observeable, so the consumers can still access the response data as needed.


---Tutorial 10 - Handling Errors---
So far we've assumed the call to the server always succeeds, that is not always the case.
When it comes to handling erorrs we have 2 types, Unexpected & Expected. 

Unexpected:
Server if Offline
Network is down
Unhandled Excpetions

Expected:
Not Found(404) - A User Deleted a record, shortly after another user tries the same.
Bad Request(400) - Attempt to create an account with a Username that already exists.

So in the next tutorials we need to handle these Errors.


---Tutorial 11 - Handling Unexpected Errors---
So lets start by looking at the Subscribe method, previously we only take the response data and displa in the front end.
Subscribe has a 2nd optional parameter for errors which we need to implment.

Task 1 - Add Error Method to ngOnInit():
So we now know Subscribe has Response & Error parameters, which are functions. These methods are subscribed to the response & error events.
So we just want to print a really generic message.
error => {
      alert('An Unpected Error occured.');

Task 2 - Handle Unecpted Errors for All Subscribe Events in Component

Result:
Now if we malform the link, we can see instead of just a blank list, the user is prompted and we can see the Error in the console.


---Tutorial 12 - Handling Expected Errors---
So lets start work on the Expected Errors

Task 1 - Attempting to Delete a Post that does not exist:
If we get the error object, we can check what the status code is, then throw the correct warning.
First we need to fix something, error is of type ANY, we need to cast this to Response to get access to the status codes.
-Error : Response
(error: Response) => {
      if(error.status === 404)


Task 2 - Attempting to Create Post w Bad Data:
So just a basic copy of the previous task, just need to check for status 400(bad data).
Hopefully our would be API is smart enough to return a list of KeyValue pairs that cause the errors in the backend.
We can then bind the errors as json to the Form.SetErrors method and voila our input fields will be automatically marked as invalid.
this.form.setErrors(error.json);


---Tutorial 13 - Throwing Application Specific Errors---
So you've probaly noticed the problem with our current implmentation, we have violated the seperation of concern principle.
Everything to do with HTTP should be contained inside the service.

Task 1 - Move Http Error Handling to Service:
Observeable is a type from Reactive Extensions, there are other methods/operators that can help us with this task.
We need to Catch this Error, then send a Application Specific Error.

Task 2 - Create Application Specific Errors:
Create App.Error & Found-Found Errors, just a application specific wrapper on the HTTP errors.

Task 3 - Consume Application Specific Errors:
Now that our Service handles the HTTP Errors, we need to rework the component so we check for the Application specific errors.

Task 4 - Complete the HTTP Error Migration to Services.


---Tutorial 14 - Code Review----
So lets start code review & improving our design.


---Tutorial 15 - Importing Observeable Operators & Factory Methods---
So by now we've noticed the TypeError when we try to operate on our newly created Observeables.
Observeable is not a function, so lets check this out.

Task 1 - Import Operators:
We were getting warnings about the usage of throw. We need to be very careful to import the correct packages & modules.
import 'rxjs/operator/catch';
import 'rxjs/observable/throw';

Note:
Finally we resolved these silly errors we've been getting for the last 3 lessons. UnBlocked!!!
Observeable can really be its own course, but for now we only need to know about Catch & Throw for 90% of the time.


---Tutorial 16 - Global Error Handling---
So as you can see in our Posts Component we have repeated the Altert & Logging errors to the console.
What if we could do this globally?
Lets take a look at the ErrorHandler class in angular.io, we can see it takes and error & returns void.

Task 1 - Create ErrorHandler Class:
We need to inherit from ErrorHandler, implment the common functionality like Alert or logging to console.

Task 2 - Replace Stock ErrorHandler w MyErrorHandler:
We can use {provide: ErrorHandler, useClass: MyErrorHandler} to replace the built in ErrorHandler with our own.

Task 3 - Removing Error Handling from Posts Component:
So everywhere we handle Unexpected Errors, we need to remove because this is handled globally now.
-Keep the Application Specific Error Checks.
-Rethrow in Else blocks to avoid getting stuck there.


---Tutorial 17 - A Reuseable Error Handling Model---
So we have some more opportunity for refactoring here, in the Post Service we have duplication in Update & Create,
where we check the Error Status, and then return the application specific errors.
We could extract this logic into a private method, then call it in each API function.

Task 1 - Extract Duplicate Code to Private Method:
-Move the Status Code to Application Error into a centralized method.
-This should be private, as we don't want the Consumer to know our implmentation detail.

Task 2 - Clean Up API Methods:
-Now that handleError exists, we just call handleError(error) inside the catch block and voila we've extracted all that nastyness.

Result:
Our API Methods are much smaller & cleaner!

---Tutorial 18 - Extracting a Reuseable Data Service---
So in a real world application we're not going to be working with one service, but probaly a few dozen.
This would give us a lot of Duplicate code, how would we go about making this more generic and reuseable?

Task 1 - Move Posts Service into a new DataService. Do some light refactoring to make the names more generic.
-Take in Http & Url in the Constructor
-Make Create, Delete & Update mmore generic using resource not Posts or Course.
-Keep the Error Handling Method as is, may even add more more down the line.

Task 2 - Refactor Posts Service:
Now that we've extracted the bulk of the work into DataService we just need to.
-Extend Data Service.
-Provide a HTTP Client for Base Class (using super keyword)
-Provide URL
-Remove all unneccessary references and whatnot.

Task 3 - Refactor Post Component:
-We just need to make sure they're calling the newly named methods.
So create instead of CreatePosts etc.

In Summary:
So in the previous lecture we moved HTTP Error Handling from the component to the Service for better seperation of concern.
In THIS tutorial we extracted the HTTP into a data service, to make it more reuseable to accomodate other endpoints like courses, or movies.