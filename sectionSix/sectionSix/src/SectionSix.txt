---Tutorial 2 - NG IF:---
Showing or Hiding certain HTML elements using NG IF.

Structural V Attribute Directives
-Structural directives modify the DOM structure. & require *ngIf syntax.
-Attribute directives modify DOM attributes.

Task 1 - Traditional NGIF on each DIV.
Task 2 - Using ngif & ng-template.
Task 3 - Clean approach, using Template on both Sections, and encapsulating logic in one NGIF.


---Tutorial 3 - Hidden Property---
So carrying on from the last lecture, we have another approach for Showing & Hiding elements.
In HTML we have the Hidden Attribute which exists in our DOM, we can use this to hide elements.
So instead of a Structural directive, we want to use a Attribute Directive to modify this element.

Task 1 - Binding Hidden Propert
Depending on the value of Courses.length we will hide the various sections.

Note: Performance NGIF vs Hidden Property
If we check in the browser, we can see the HTML exists, but has the hidden property applied so we can't see it.
This is the main difference between NgIf & Template VS Hiden property.
NGIF will remove the DOM element altogther, hidden will render still build the DOM, but apply the hidden style.
For performance it is better to use NGIF, especially when working with big data sets.

Angular will also keep track of changes in the DOM elements, even the hidden ones. So again a waste of
resources.
However if there is a user toggle to hide and unhide elements, using NGIF may cause performance overhead
trying to rebuild the DOM, could be better to have it on pageLoad, but keep them hidden.

---Tutorial 4 - NgSwitchCase
We have multiple Data Views like Map & List View, being rendered dynamically.
We could use NGIf, but that only works for true or false. For Logic hiding & Showing
multiple pages we need NGSwitchCase.

Task 1 - Create Initial HTML, Map View & List View.
Task 2 - Create ViewMode variable to store value.
Task 3 - Implment Case Switch in Front End.
Task 4 - Change the ViewMode onClick of of either button.

Note:
If we want to Compare the value of a field or property against values, use the NgSwitchCase Directive.
It also seems to Remove the DOM elements like NgIF, so be aware of the same performance overheads.


---Tutorial 5 - NgFor:---
So we know NgFor is used as a generic For loop to iterate over a list of items.
What we probably aren't aware of is the built in variables & properties.
We can for example apply styles on the Even or ODD table rows, index or check first & list.

Task 1 - Return a List of Courses
Task 2 - NgFor Iterate Course Names
Task 3 - Demo built in NgFor Properties
-Index Variable
-Even, First & Last Variables
-For a Complete list variables for the NgFor directive, 
check out https://angular.io/api/common/NgForOf



---Tutorial 6 - NgFor & Change Detection---
Carrying on from the previous lecture, we are going to demonstrate how NgFor keeps track of
the course objects.

Task 1 - Create Add Course Button & Logic
Task 2 - Create Remove Course Button & Logic
Task 3 - Create Update Course Button & Logic.

Morale of the Story:
So if we Add, Remove or Edit data contained in the NgFor, Angulars change detection mechanism
will be able to track & update the DOM accordingly.
In the next section we will talk about the performance overhead for this kind of feature.


---Tutorial 7 - NgFor & TrackBy---
Lets do some tidy up, we only need a single button to load courses.

Task 1 - OnLoad method to populate the courses list.

Why this is Bad:
So each time we click the Get Courses button, we can see in Chrome Developer tools
that the entire DOM tree is being rebuilt.
(Purple HTML means new)

Even though the objects in the Array are the exact same objects,
angular treats them as entirely new, assigns them space in memory then constracts the DOM tree.
If we have lots of Data or complex DOM elements, this can be a big performance hit.
As Diarmuid mentioned, in Angular 4 must be very careful with the lifecycle of Objects in memory.
Lets optimize this

Solution:
Use TrackBy, rather than using Angulars default tracking mechanism the Memory Address.
We can use TrackBy and proivde another property to avoid duplication.
Eg our Course ID.

Task 2 - Add TrackBy with NgFor
Add the trackBy: methodName syntax to point angular to a method on how how to better track objects.

Task 3 - Create trackCourse Method
Return a Course if it has a CourseId, else undefined.

Morale of the Story:
If we are working with large or complex datasets, TrackBy can provide some performance benefits
and stop uneccessary creation of in memory objects. 

---Tutorial 8 - Leading Asterix---
So what is this leading Asterix all about? Where we have an NgIf with the leading asterix,
and a template holding the ELSE case. Angular will under the hood build another NgTemplate that contains
our div & Course List.

Task 1 - Demo Simple NgIf
Task 2 - Demo Generated Code

Morale of the Story:
When we use the Leading Asterix, Angular will auto generate an NgTemplate for each If & Else block.
We could do this ourselves of course, but its easier to let Angular do it for us.
* with NgIf, NgFor & NgSwitch will behind the scenes generate the template logic.


---Tutorial 9 - NgClass---
So in a previous lecture we created the Favourite Component using style class binding.
There is another, even better directive called NgClass to help us do the same.

Task 1 - Create Favoute Component 
Task 2 - Refactor using NgClass

Morale of the Story:
So rather than using Class binding twice, we can use NgClass, provide key value pairs to bind
the CSS selector glyphicons to values in our component, much less repetition!
This is an example of a Attribute directive, which is we don't have the leading asterix.
That is only for structural directives.

---Tutorial 10 - NgStyle---